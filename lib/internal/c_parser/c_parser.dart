// This code was generated by a tool.
// Processing tool available at https://github.com/mezoni/peg

library binary_declarations.internal.c_parser;

import "dart:math";
import "package:binary_declarations/binary_declarations.dart";

Expression _buildBinary(Expression first, List rest) {
  Expression builder(Expression result, List element) {
    return new BinaryExpression(left: result, operator: element[0], right: element[1]);
  };
  return _buildTree(first, rest, builder);        
}

Expression _buildTree(Expression first, List rest, builder(Expression result, List rest)) {
  var result = first;    
  for (var i = 0; i < rest.length; i++) {
    result = builder(result, rest[i]);
  }
  return result;
}

String _chars2str(List<int> chars) {
   if (chars == null) {
     return "";
   }
   return new String.fromCharCodes(chars);
 }

Expression _conditional(Expression condition, Expression left, Expression right) {  
  return new ConditionalExpression(condition: condition, left: left, right: right);
}

FloatingPointLiteral _floatLiteral(String source) {
  var value = _parserFloat(source);
  return new FloatingPointLiteral(text: source, value: value);
}

Identifier _ident(List parts) {
  var list = [];
  for (var part in parts) {
    if (part != null) {
      list.add(part);
    }
  }

  return new Identifier(name: list.join(" "));
}

int _escape(String ch) {
  switch(ch) {
    case "a":
      return 0x07;
    case "b":
      return 0x08;
    case "f":
      return 0x0c;
    case "n":
      return 0x0a;
    case "r":
      return 0x0d;
    case "t":
      return 0x09;
    case "v":
      return 0x0b;
    case "\'":
      return 0x27;
    case "\"":
      return 0x22;
    case "\?":
      return 0x3f;
    default:
      throw new StateError("Unknown escape sequence: \\$ch");  
  }
}

double _parserFloat(String source) {
  source = source.toLowerCase();
  var hex = false;
  if (source.startsWith("0x")) {
    source = source.substring(2);
    hex = true;
  }
  var length = source.length;
  var endsWith = source[length - 1];
  if (endsWith == "f" || endsWith == "l") {
    source = source.substring(0, length - 1);
  }
  if (!hex) {
    return double.parse(source);
  }
  var index = source.indexOf("p");
  var exponent = int.parse(source.substring(index + 1));
  source = source.substring(0, index);
  index = source.indexOf(".");
  int integer = 0;
  int fractional = 0;
  if (index == 0) {
    fractional = int.parse(source.substring(1), radix: 16);
  } else if (index > 0) {
    integer = int.parse(source.substring(0, index), radix: 16);
    fractional = int.parse(source.substring(index + 1), radix: 16);
  } else {
    integer = int.parse(source, radix: 16);
  }
  var d = double.parse(".$fractional") * .625;
  return (integer + d) * pow(2, exponent);
}

int _parseInt(String sign, String digits, int radix) {
  if (sign == null) {
    sign = "";
  }
  return int.parse("$sign$digits", radix: radix);   
}

List _removeNull(List list) {  
  var result = list.toList();
  result.retainWhere((e) => e != null);
  return result;
}

String _strValue(List<List<int>> list) {
  var chars = <int>[];
  for (var element in list) {
    chars.addAll(element);
  }
  return new String.fromCharCodes(chars);
}

Expression _unary(String operator, Expression operand) {  
  return new UnaryExpression(operand: operand, operator: operator);
}

class CParser {
  static final List<String> _ascii = new List<String>.generate(128, (c) => new String.fromCharCode(c));
  
  static final List<String> _expect0 = <String>["EOF"];
  
  static final List<String> _expect1 = <String>[];
  
  static final List<String> _expect10 = <String>["\'&&\'"];
  
  static final List<String> _expect11 = <String>["\'|\'"];
  
  static final List<String> _expect12 = <String>["\'^\'"];
  
  static final List<String> _expect13 = <String>["\'&\'"];
  
  static final List<String> _expect14 = <String>["equality_operator"];
  
  static final List<String> _expect15 = <String>["relational_operator"];
  
  static final List<String> _expect16 = <String>["shift_operator"];
  
  static final List<String> _expect17 = <String>["additive_operator"];
  
  static final List<String> _expect18 = <String>["multiplicative_operator"];
  
  static final List<String> _expect19 = <String>["\'(\'", "\'sizeof\'", "Identifier", "constant"];
  
  static final List<String> _expect2 = <String>["\';\'", "\'_Bool\'", "\'char\'", "\'enum\'", "\'struct\'", "\'typedef\'", "\'union\'", "\'void\'", "FloatTypeSpeficiers", "Identifier", "Integer_Type_Specifiers"];
  
  static final List<String> _expect20 = <String>["\'sizeof\'"];
  
  static final List<String> _expect21 = <String>["constant"];
  
  static final List<String> _expect22 = <String>["\'(\'"];
  
  static final List<String> _expect23 = <String>["\')\'"];
  
  static final List<String> _expect24 = <String>["unary_operator"];
  
  static final List<String> _expect25 = <String>["+"];
  
  static final List<String> _expect26 = <String>["-"];
  
  static final List<String> _expect27 = <String>["~"];
  
  static final List<String> _expect28 = <String>["!"];
  
  static final List<String> _expect29 = <String>["*"];
  
  static final List<String> _expect3 = <String>["\'_Bool\'", "\'char\'", "\'enum\'", "\'struct\'", "\'union\'", "\'void\'", "FloatTypeSpeficiers", "Identifier", "Integer_Type_Specifiers"];
  
  static final List<String> _expect30 = <String>["/"];
  
  static final List<String> _expect31 = <String>["%"];
  
  static final List<String> _expect32 = <String>["<<"];
  
  static final List<String> _expect33 = <String>[">>"];
  
  static final List<String> _expect34 = <String>["<"];
  
  static final List<String> _expect35 = <String>[">"];
  
  static final List<String> _expect36 = <String>["<="];
  
  static final List<String> _expect37 = <String>[">="];
  
  static final List<String> _expect38 = <String>["=="];
  
  static final List<String> _expect39 = <String>["!="];
  
  static final List<String> _expect4 = <String>["\'__attribute__\'"];
  
  static final List<String> _expect40 = <String>["\'?\'"];
  
  static final List<String> _expect41 = <String>["\':\'"];
  
  static final List<String> _expect42 = <String>["\'const\'", "\'volatile\'"];
  
  static final List<String> _expect43 = <String>["\'*\'"];
  
  static final List<String> _expect44 = <String>["\'char\'", "Integer_Type_Specifiers"];
  
  static final List<String> _expect45 = <String>["FloatTypeSpeficiers"];
  
  static final List<String> _expect46 = <String>["\'void\'"];
  
  static final List<String> _expect47 = <String>["\'_Bool\'"];
  
  static final List<String> _expect48 = <String>["\'struct\'", "\'union\'"];
  
  static final List<String> _expect49 = <String>["\'{\'"];
  
  static final List<String> _expect5 = <String>["Identifier"];
  
  static final List<String> _expect50 = <String>["integer_constant"];
  
  static final List<String> _expect51 = <String>["\'*\'", "\'[\'"];
  
  static final List<String> _expect52 = <String>["\'[\'"];
  
  static final List<String> _expect53 = <String>["\'enum\'"];
  
  static final List<String> _expect54 = <String>["\'typedef\'"];
  
  static final List<String> _expect55 = <String>["\'(\'", "Identifier"];
  
  static final List<String> _expect56 = <String>["string_literal"];
  
  static final List<String> _expect57 = <String>["\"", "L\""];
  
  static final List<String> _expect58 = <String>["\'=\'"];
  
  static final List<String> _expect59 = <String>["\'}\'"];
  
  static final List<String> _expect6 = <String>["\',\'"];
  
  static final List<String> _expect60 = <String>["\']\'"];
  
  static final List<String> _expect61 = <String>["\'const\'"];
  
  static final List<String> _expect62 = <String>["\'char\'"];
  
  static final List<String> _expect63 = <String>["\'...\'"];
  
  static final List<String> _expect64 = <String>["double", "float"];
  
  static final List<String> _expect65 = <String>["Integer_Type_Specifiers"];
  
  static final List<String> _expect66 = <String>["LEADING_SPACES"];
  
  static final List<String> _expect67 = <String>["_Bool", "_Complex", "_Imaginary", "__attribute__", "auto", "break", "case", "char", "const", "continue", "default", "do", "double", "else", "enum", "extern", "float", "for", "goto", "if", "inline", "int", "long", "register", "restrict", "return", "short", "signed", "sizeof", "static", "struct", "switch", "typedef", "union", "unsigned", "void", "volatile", "while"];
  
  static final List<String> _expect68 = <String>["\';\'"];
  
  static final List<String> _expect69 = <String>["\'struct\'"];
  
  static final List<String> _expect7 = <String>["\'(\'", "\'sizeof\'", "Identifier", "constant", "string_literal", "unary_operator"];
  
  static final List<String> _expect70 = <String>["\'union\'"];
  
  static final List<String> _expect71 = <String>["\'volatile\'"];
  
  static final List<String> _expect72 = <String>["\'", "L\'"];
  
  static final List<String> _expect73 = <String>["0X", "0x"];
  
  static final List<String> _expect74 = <String>["char"];
  
  static final List<String> _expect75 = <String>["//"];
  
  static final List<String> _expect76 = <String>["double"];
  
  static final List<String> _expect77 = <String>["float"];
  
  static final List<String> _expect78 = <String>["int"];
  
  static final List<String> _expect79 = <String>["long"];
  
  static final List<String> _expect8 = <String>["\'(\'", "\'sizeof\'", "Identifier", "constant", "unary_operator"];
  
  static final List<String> _expect80 = <String>["short"];
  
  static final List<String> _expect81 = <String>["signed"];
  
  static final List<String> _expect82 = <String>["signed", "unsigned"];
  
  static final List<String> _expect83 = <String>["long", "short"];
  
  static final List<String> _expect84 = <String>["unsigned"];
  
  static final List<String> _expect85 = <String>["P", "p"];
  
  static final List<String> _expect86 = <String>["E", "e"];
  
  static final List<String> _expect87 = <String>["\\x"];
  
  static final List<String> _expect88 = <String>["LL", "ll"];
  
  static final List<String> _expect89 = <String>["0"];
  
  static final List<String> _expect9 = <String>["\'||\'"];
  
  static final List<String> _expect90 = <String>["\\"];
  
  static final List<String> _expect91 = <String>["\\U", "\\u"];
  
  static final List<bool> _lookahead = _unmap([0x1ffb4c3, 0x17fffffe, 0xffffffd, 0x3ff6983, 0x2ffffffc, 0x1ffffffa, 0x5006, 0x0, 0x0, 0x603ff41c, 0x52ffffff, 0xbffffff, 0x7ff80000, 0x7ff4bfff, 0xffff, 0x7fffff82, 0x7fffff4b, 0x7ffffc0f, 0x7ffffa5f, 0x7fffffff, 0x7fffffa1, 0x7e03ff7, 0x1fc00000, 0x0, 0x18000, 0x18000000, 0x20000040, 0x4180, 0x7e818200, 0xc0000f, 0x60000000, 0x0, 0x60000003, 0x13fc12fe, 0x230000, 0x14740, 0xd00008c, 0x210d024]);
  
  static final List<bool> _mapping0 = _unmap([0x800001]);
  
  static final List<bool> _mapping1 = _unmap([0x9]);
  
  static final List<bool> _mapping10 = _unmap([0x20000021, 0x8000000, 0x544046]);
  
  static final List<bool> _mapping11 = _unmap([0x1, 0x2]);
  
  static final List<bool> _mapping2 = _unmap([0x800013]);
  
  static final List<bool> _mapping3 = _unmap([0x20000009, 0x0, 0x100000]);
  
  static final List<bool> _mapping4 = _unmap([0x41, 0x82]);
  
  static final List<bool> _mapping5 = _unmap([0x7e03ff, 0xfc0000]);
  
  static final List<bool> _mapping6 = _unmap([0x1, 0x2]);
  
  static final List<bool> _mapping7 = _unmap([0x43ffffff, 0x7fffffe]);
  
  static final List<bool> _mapping8 = _unmap([0x1000009, 0x0, 0x100000]);
  
  static final List<bool> _mapping9 = _unmap([0x5]);
  
  static final List<int> _strings0 = <int>[60, 60];
  
  static final List<int> _strings1 = <int>[62, 62];
  
  static final List<int> _strings10 = <int>[99, 111, 110, 115, 116];
  
  static final List<int> _strings11 = <int>[46, 46, 46];
  
  static final List<int> _strings12 = <int>[101, 110, 117, 109];
  
  static final List<int> _strings13 = <int>[95, 67, 111, 109, 112, 108, 101, 120];
  
  static final List<int> _strings14 = <int>[95, 73, 109, 97, 103, 105, 110, 97, 114, 121];
  
  static final List<int> _strings15 = <int>[97, 117, 116, 111];
  
  static final List<int> _strings16 = <int>[98, 114, 101, 97, 107];
  
  static final List<int> _strings17 = <int>[99, 97, 115, 101];
  
  static final List<int> _strings18 = <int>[99, 104, 97, 114];
  
  static final List<int> _strings19 = <int>[99, 111, 110, 116, 105, 110, 117, 101];
  
  static final List<int> _strings2 = <int>[60, 61];
  
  static final List<int> _strings20 = <int>[100, 101, 102, 97, 117, 108, 116];
  
  static final List<int> _strings21 = <int>[100, 111];
  
  static final List<int> _strings22 = <int>[100, 111, 117, 98, 108, 101];
  
  static final List<int> _strings23 = <int>[101, 108, 115, 101];
  
  static final List<int> _strings24 = <int>[101, 120, 116, 101, 114, 110];
  
  static final List<int> _strings25 = <int>[102, 108, 111, 97, 116];
  
  static final List<int> _strings26 = <int>[102, 111, 114];
  
  static final List<int> _strings27 = <int>[103, 111, 116, 111];
  
  static final List<int> _strings28 = <int>[105, 102];
  
  static final List<int> _strings29 = <int>[105, 110, 108, 105, 110, 101];
  
  static final List<int> _strings3 = <int>[62, 61];
  
  static final List<int> _strings30 = <int>[105, 110, 116];
  
  static final List<int> _strings31 = <int>[108, 111, 110, 103];
  
  static final List<int> _strings32 = <int>[114, 101, 103, 105, 115, 116, 101, 114];
  
  static final List<int> _strings33 = <int>[114, 101, 115, 116, 114, 105, 99, 116];
  
  static final List<int> _strings34 = <int>[114, 101, 116, 117, 114, 110];
  
  static final List<int> _strings35 = <int>[115, 104, 111, 114, 116];
  
  static final List<int> _strings36 = <int>[115, 105, 103, 110, 101, 100];
  
  static final List<int> _strings37 = <int>[115, 105, 122, 101, 111, 102];
  
  static final List<int> _strings38 = <int>[115, 116, 97, 116, 105, 99];
  
  static final List<int> _strings39 = <int>[115, 116, 114, 117, 99, 116];
  
  static final List<int> _strings4 = <int>[61, 61];
  
  static final List<int> _strings40 = <int>[115, 119, 105, 116, 99, 104];
  
  static final List<int> _strings41 = <int>[116, 121, 112, 101, 100, 101, 102];
  
  static final List<int> _strings42 = <int>[117, 110, 105, 111, 110];
  
  static final List<int> _strings43 = <int>[117, 110, 115, 105, 103, 110, 101, 100];
  
  static final List<int> _strings44 = <int>[118, 111, 105, 100];
  
  static final List<int> _strings45 = <int>[118, 111, 108, 97, 116, 105, 108, 101];
  
  static final List<int> _strings46 = <int>[119, 104, 105, 108, 101];
  
  static final List<int> _strings47 = <int>[76, 39];
  
  static final List<int> _strings48 = <int>[76, 34];
  
  static final List<int> _strings49 = <int>[47, 47];
  
  static final List<int> _strings5 = <int>[33, 61];
  
  static final List<int> _strings50 = <int>[13, 10];
  
  static final List<int> _strings51 = <int>[92, 120];
  
  static final List<int> _strings52 = <int>[48, 120];
  
  static final List<int> _strings53 = <int>[48, 88];
  
  static final List<int> _strings54 = <int>[76, 76];
  
  static final List<int> _strings55 = <int>[108, 108];
  
  static final List<int> _strings56 = <int>[92, 85];
  
  static final List<int> _strings57 = <int>[92, 117];
  
  static final List<int> _strings6 = <int>[38, 38];
  
  static final List<int> _strings7 = <int>[124, 124];
  
  static final List<int> _strings8 = <int>[95, 95, 97, 116, 116, 114, 105, 98, 117, 116, 101, 95, 95];
  
  static final List<int> _strings9 = <int>[95, 66, 111, 111, 108];
  
  final List<String> _tokenAliases = ["Identifier", "constant", "\'(\'", "\')\'", "unary_operator", "multiplicative_operator", "additive_operator", "equality_operator", "shift_operator", "relational_operator", "\'&\'", "\'^\'", "\'|\'", "\'&&\'", "\'||\'", "\'?\'", "\':\'", "integer_constant", "string_literal", "\'=\'", "\'*\'", "\'__attribute__\'", "\'_Bool\'", "\'}\'", "\']\'", "\')\'", "\':\'", "\',\'", "\'const\'", "\'char\'", "\'...\'", "\'enum\'", "EOF", "FloatTypeSpeficiers", "Integer_Type_Specifiers", "LEADING_SPACES", "\'{\'", "\'[\'", "\'(\'", "\';\'", "\'sizeof\'", "\'struct\'", "\'typedef\'", "\'union\'", "\'void\'", "\'volatile\'"];
  
  final List<int> _tokenFlags = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  
  final List<String> _tokenNames = ["Identifier", "constant", "lparen", "rparen", "unary_operator", "multiplicative_operator", "additive_operator", "equality_operator", "shift_operator", "relational_operator", "ampersand", "xor", "vertical_line", "ampersand2", "vertical_line2", "question_mark", "semicolon", "integer_constant", "string_literal", "ASSIGN", "ASTERISK", "ATTRIBUTE", "BOOL", "CLOSE_BRACE", "CLOSE_BRACKET", "CLOSE_PAREN", "COLON", "COMMA", "CONST", "CharTypeSpecifiers", "ELLIPSIS", "ENUM", "EOF", "FloatTypeSpeficiers", "Integer_Type_Specifiers", "LEADING_SPACES", "OPEN_BRACE", "OPEN_BRACKET", "OPEN_PAREN", "SEMICOLON", "SIZEOF", "STRUCT", "TYPEDEF", "UNION", "VOID", "VOLATILE"];
  
  static final List<List<int>> _transitions0 = [[42, 42], [59, 59], [65, 90, 92, 92], [95, 95, 97, 122]];
  
  static final List<List<int>> _transitions1 = [[42, 42], [65, 90, 92, 92, 95, 95, 97, 122]];
  
  static final List<List<int>> _transitions10 = [[33, 33, 43, 43, 45, 45, 126, 126], [39, 40, 46, 46, 48, 57, 65, 90, 92, 92, 95, 95, 97, 122]];
  
  static final List<List<int>> _transitions11 = [[39, 39, 46, 46, 48, 57], [40, 40], [65, 90], [92, 92, 95, 95, 97, 114, 116, 122], [115, 115]];
  
  static final List<List<int>> _transitions12 = [[39, 39, 46, 46, 48, 57, 76, 76]];
  
  static final List<List<int>> _transitions13 = [[39, 39, 76, 76], [46, 46], [48, 57]];
  
  static final List<List<int>> _transitions14 = [[46, 46], [48, 57]];
  
  static final List<List<int>> _transitions15 = [[46, 46, 48, 57]];
  
  static final List<List<int>> _transitions16 = [[33, 33], [43, 43], [45, 45], [126, 126]];
  
  static final List<List<int>> _transitions17 = [[37, 37], [42, 42], [47, 47]];
  
  static final List<List<int>> _transitions18 = [[43, 43], [45, 45]];
  
  static final List<List<int>> _transitions19 = [[33, 33], [61, 61]];
  
  static final List<List<int>> _transitions2 = [[65, 90, 92, 92, 95, 95, 97, 122]];
  
  static final List<List<int>> _transitions20 = [[60, 60], [62, 62]];
  
  static final List<List<int>> _transitions21 = [[99, 99, 118, 118]];
  
  static final List<List<int>> _transitions22 = [[99, 99], [118, 118]];
  
  static final List<List<int>> _transitions23 = [[42, 42, 65, 90, 92, 92, 95, 95, 97, 122]];
  
  static final List<List<int>> _transitions24 = [[65, 90, 92, 92], [95, 95], [97, 122]];
  
  static final List<List<int>> _transitions25 = [[99, 99, 105, 105, 108, 108, 115, 115, 117, 117]];
  
  static final List<List<int>> _transitions26 = [[99, 99], [105, 105, 108, 108], [115, 115, 117, 117]];
  
  static final List<List<int>> _transitions27 = [[100, 100, 102, 102]];
  
  static final List<List<int>> _transitions28 = [[115, 115, 117, 117]];
  
  static final List<List<int>> _transitions29 = [[115, 115], [117, 117]];
  
  static final List<List<int>> _transitions3 = [[33, 34, 39, 40, 43, 43, 45, 46, 48, 57, 65, 90, 92, 92, 95, 95, 97, 122, 126, 126]];
  
  static final List<List<int>> _transitions30 = [[58, 58, 65, 90, 92, 92, 95, 95, 97, 122]];
  
  static final List<List<int>> _transitions31 = [[42, 42], [91, 91]];
  
  static final List<List<int>> _transitions32 = [[40, 40, 42, 42]];
  
  static final List<List<int>> _transitions33 = [[95, 95, 99, 99, 115, 115, 117, 118]];
  
  static final List<List<int>> _transitions34 = [[95, 95, 99, 99, 101, 101, 118, 118]];
  
  static final List<List<int>> _transitions35 = [[95, 95, 99, 99, 116, 116, 118, 118]];
  
  static final List<List<int>> _transitions36 = [[40, 40, 42, 42, 65, 90, 92, 92, 95, 95, 97, 122]];
  
  static final List<List<int>> _transitions37 = [[40, 40], [42, 42], [65, 90, 92, 92, 95, 95, 97, 122]];
  
  static final List<List<int>> _transitions38 = [[34, 34, 76, 76]];
  
  static final List<List<int>> _transitions39 = [[99, 99], [115, 115, 117, 117]];
  
  static final List<List<int>> _transitions4 = [[33, 33, 39, 40, 43, 43, 45, 46, 48, 57, 92, 92, 95, 95, 97, 122, 126, 126], [34, 34], [65, 90]];
  
  static final List<List<int>> _transitions40 = [[100, 100], [102, 102]];
  
  static final List<List<int>> _transitions41 = [[105, 105], [108, 108], [115, 115], [117, 117]];
  
  static final List<List<int>> _transitions42 = [[95, 95, 97, 103, 105, 105, 108, 108, 114, 119]];
  
  static final List<List<int>> _transitions43 = [[95, 95], [97, 97], [98, 98], [99, 99], [100, 100], [101, 101], [102, 102], [103, 103], [105, 105], [108, 108], [114, 114], [115, 115], [116, 116], [117, 117], [118, 118], [119, 119]];
  
  static final List<List<int>> _transitions44 = [[39, 39], [76, 76]];
  
  static final List<List<int>> _transitions45 = [[48, 48], [49, 57]];
  
  static final List<List<int>> _transitions46 = [[34, 34], [76, 76]];
  
  static final List<List<int>> _transitions47 = [[0, 9, 11, 12, 14, 1114111], [10, 10, 13, 13]];
  
  static final List<List<int>> _transitions48 = [[10, 10], [13, 13]];
  
  static final List<List<int>> _transitions49 = [[48, 57], [65, 90, 92, 92, 95, 95, 97, 122]];
  
  static final List<List<int>> _transitions5 = [[33, 33, 39, 40, 43, 43, 45, 46, 48, 57, 65, 90, 92, 92, 95, 95, 97, 122, 126, 126]];
  
  static final List<List<int>> _transitions50 = [[65, 90, 95, 95, 97, 122], [92, 92]];
  
  static final List<List<int>> _transitions51 = [[9, 10, 13, 13, 32, 32]];
  
  static final List<List<int>> _transitions52 = [[9, 10, 13, 13, 32, 32], [47, 47]];
  
  static final List<List<int>> _transitions53 = [[108, 108], [115, 115]];
  
  static final List<List<int>> _transitions54 = [[80, 80, 112, 112]];
  
  static final List<List<int>> _transitions55 = [[80, 80], [112, 112]];
  
  static final List<List<int>> _transitions56 = [[69, 69, 101, 101]];
  
  static final List<List<int>> _transitions57 = [[69, 69], [101, 101]];
  
  static final List<List<int>> _transitions58 = [[70, 70, 76, 76, 102, 102, 108, 108]];
  
  static final List<List<int>> _transitions59 = [[48, 57, 65, 70, 97, 102]];
  
  static final List<List<int>> _transitions6 = [[33, 33, 61, 61]];
  
  static final List<List<int>> _transitions60 = [[46, 46], [48, 57, 65, 70, 97, 102]];
  
  static final List<List<int>> _transitions61 = [[76, 76, 108, 108], [85, 85, 117, 117]];
  
  static final List<List<int>> _transitions62 = [[76, 76], [108, 108]];
  
  static final List<List<int>> _transitions63 = [[76, 76, 108, 108]];
  
  static final List<List<int>> _transitions64 = [[65, 90, 95, 95, 97, 122]];
  
  static final List<List<int>> _transitions65 = [[85, 85, 117, 117]];
  
  static final List<List<int>> _transitions7 = [[60, 60, 62, 62]];
  
  static final List<List<int>> _transitions8 = [[43, 43, 45, 45]];
  
  static final List<List<int>> _transitions9 = [[37, 37, 42, 42, 47, 47]];
  
  List<Map<int, List>> _cache;
  
  List<int> _cachePos;
  
  List<bool> _cacheable;
  
  int _ch;
  
  int _cursor;
  
  List<CParserError> _errors;
  
  List<String> _expected;
  
  int _failurePos;
  
  List<int> _input;
  
  int _inputLen;
  
  int _startPos;
  
  int _testing;
  
  int _token;
  
  int _tokenStart;
  
  bool success;
  
  final String text;
  
  CParser(this.text) {
    if (text == null) {
      throw new ArgumentError('text: $text');
    }    
    _input = _toCodePoints(text);
    _inputLen = _input.length;    
    reset(0);    
  }
  
  void _addToCache(dynamic result, int start, int id) {   
    var map = _cache[id];
    if (map == null) {
      map = <int, List>{};
      _cache[id] = map;
    }
    map[start] = [result, _cursor, success];      
  }
  
  void _failure([List<String> expected]) {  
    if (_failurePos > _cursor) {
      return;
    }
    if (_failurePos < _cursor) {    
      _expected = [];
     _failurePos = _cursor;
    }
    if (_token != null) {
      var alias = _tokenAliases[_token];
      var flag = _tokenFlags[_token];
      var name = _tokenNames[_token];
      if (_failurePos > _tokenStart && _failurePos == _inputLen && (flag & 1) != 0) {             
        var message = "Unterminated '$name'";
        _errors.add(new CParserError(CParserError.UNTERMINATED, _failurePos, _tokenStart, message));
        _expected.addAll(expected);            
      } else if (_failurePos > _tokenStart && (flag & 1) != 0) {             
        var message = "Malformed '$name'";
        _errors.add(new CParserError(CParserError.MALFORMED, _failurePos, _tokenStart, message));
        _expected.addAll(expected);            
      } else {
        _expected.add(alias);
      }            
    } else if (expected == null) {
      _expected.add(null);
    } else {
      _expected.addAll(expected);
    }   
  }
  
  List _flatten(dynamic value) {
    if (value is List) {
      var result = [];
      var length = value.length;
      for (var i = 0; i < length; i++) {
        var element = value[i];
        if (element is Iterable) {
          result.addAll(_flatten(element));
        } else {
          result.add(element);
        }
      }
      return result;
    } else if (value is Iterable) {
      var result = [];
      for (var element in value) {
        if (element is! List) {
          result.add(element);
        } else {
          result.addAll(_flatten(element));
        }
      }
    }
    return [value];
  }
  
  dynamic _getFromCache(int id) {  
    if (!_cacheable[id]) {  
      _cacheable[id] = true;  
      return null;
    }
    var map = _cache[id];
    if (map == null) {
      return null;
    }
    var data = map[_cursor];
    if (data == null) {
      return null;
    }
    _cursor = data[1];
    success = data[2];
    if (_cursor < _inputLen) {
      _ch = _input[_cursor];
    } else {
      _ch = -1;
    }
    return data;  
  }
  
  int _getState(List<List<int>> transitions) {
    var count = transitions.length;
    var state = 0;
    for ( ; state < count; state++) {
      var found = false;
      var ranges = transitions[state];    
      while (true) {
        var right = ranges.length ~/ 2;
        if (right == 0) {
          break;
        }
        var left = 0;
        if (right == 1) {
          if (_ch <= ranges[1] && _ch >= ranges[0]) {
            found = true;          
          }
          break;
        }
        int middle;
        while (left < right) {
          middle = (left + right) >> 1;
          var index = middle << 1;
          if (ranges[index + 1] < _ch) {
            left = middle + 1;
          } else {
            if (_ch >= ranges[index]) {
              found = true;
              break;
            }
            right = middle;
          }
        }
        break;
      }
      if (found) {
        return state; 
      }   
    }
    if (_ch != -1) {
      return state;
    }
    return state + 1;  
  }
  
  List _list(Object first, List next) {
    var length = next.length;
    var list = new List(length + 1);
    list[0] = first;
    for (var i = 0; i < length; i++) {
      list[i + 1] = next[i][1];
    }
    return list;
  }
  
  String _matchAny() {
    success = _cursor < _inputLen;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }    
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return result;
    }    
    return null;  
  }
  
  String _matchChar(int ch, String string) {
    success = _ch == ch;
    if (success) {
      var result = string;  
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return result;
    }  
    return null;  
  }
  
  String _matchMapping(int start, int end, List<bool> mapping) {
    success = _ch >= start && _ch <= end;
    if (success) {    
      if(mapping[_ch - start]) {
        String result;
        if (_ch < 128) {
          result = _ascii[_ch];  
        } else {
          result = new String.fromCharCode(_ch);
        }     
        if (++_cursor < _inputLen) {
          _ch = _input[_cursor];
        } else {
          _ch = -1;
        }      
        return result;
      }
      success = false;
    }  
    return null;  
  }
  
  String _matchRange(int start, int end) {
    success = _ch >= start && _ch <= end;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }        
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }  
      return result;
    }  
    return null;  
  }
  
  String _matchRanges(List<int> ranges) {
    var length = ranges.length;
    for (var i = 0; i < length; i += 2) {    
      if (_ch >= ranges[i]) {
        if (_ch <= ranges[i + 1]) {
          String result;
          if (_ch < 128) {
            result = _ascii[_ch];  
          } else {
            result = new String.fromCharCode(_ch);
          }          
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
             _ch = -1;
          }
          success = true;    
          return result;
        }      
      } else break;  
    }
    success = false;  
    return null;  
  }
  
  String _matchString(List<int> codePoints, String string) {
    var length = codePoints.length;  
    success = _cursor + length <= _inputLen;
    if (success) {
      for (var i = 0; i < length; i++) {
        if (codePoints[i] != _input[_cursor + i]) {
          success = false;
          break;
        }
      }
    } else {
      success = false;
    }  
    if (success) {
      _cursor += length;      
      if (_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return string;      
    }  
    return null; 
  }
  
  void _nextChar() {
    if (++_cursor < _inputLen) {
      _ch = _input[_cursor];
    } else {
      _ch = -1;
    }  
  }
  
  dynamic _parse_ASSIGN() {
    var $$;
    _token = 19;  
    _tokenStart = _cursor;  
    switch (_ch == 61 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(61, '=');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect58);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_ASTERISK() {
    var $$;
    _token = 20;  
    _tokenStart = _cursor;  
    switch (_ch == 42 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(42, '*');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect43);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_ATTRIBUTE() {
    var $$;
    _token = 21;  
    _tokenStart = _cursor;  
    switch (_ch == 95 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings8, '__attribute__');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect4);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_ArrayDimensions() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[86] >= pos) {
      $$ = _getFromCache(86);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[86] = pos;
    }  
    switch (_ch == 91 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var testing0;
        for (var first = true, reps; ;) {  
          $$ = _parse_Dimension();  
          if (success) {
           if (first) {      
              first = false;
              reps = [$$];
              testing0 = _testing;                  
            } else {
              reps.add($$);
            }
            _testing = _cursor;   
          } else {
            success = !first;
            if (success) {      
              _testing = testing0;
              $$ = reps;      
            } else $$ = null;
            break;
          }  
        }
        if (success) {    
          final $1 = $$;
          final $start = startPos0;
          $$ = new ArrayDimensions(elements: $1);
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect52);
    }
    if (_cacheable[86]) {
      _addToCache($$, pos, 86);
    }    
    return $$;
  }
  
  dynamic _parse_BINARY_EXPONENT_PART() {
    var $$;
    switch (_getState(_transitions54)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          switch (_getState(_transitions55)) {
            case 0:
              var startPos1 = _startPos;
              _startPos = _cursor;
              $$ = _matchChar(80, 'P');
              _startPos = startPos1;
              break;
            case 1:
              var startPos2 = _startPos;
              _startPos = _cursor;
              $$ = _matchChar(112, 'p');
              _startPos = startPos2;
              break;
            case 2:
            case 3:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(_expect85);
          }
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_SIGN();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_DIGIT_SEQUENCE();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = _text();
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect85);
    }
    return $$;
  }
  
  dynamic _parse_BOOL() {
    var $$;
    _token = 22;  
    _tokenStart = _cursor;  
    switch (_ch == 95 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings9, '_Bool');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect47);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_BitFieldDeclaratorAbstract() {
    var $$;
    switch (_getState(_transitions30)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Identifier();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          $$ = _parse_COLON();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_integer_constant();
          if (!success) break;
          seq[2] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $start = startPos0;
            $$ = new Declarator(identifier: $1, metadata: $4, width: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect41);
    }
    return $$;
  }
  
  dynamic _parse_BitFieldDeclaratorNotAbstract() {
    var $$;
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_Identifier();
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          $$ = _parse_COLON();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_integer_constant();
          if (!success) break;
          seq[2] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $start = startPos0;
            $$ = new Declarator(identifier: $1, metadata: $4, width: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect5);
    }
    return $$;
  }
  
  dynamic _parse_BitFieldParameterDeclaration() {
    var $$;
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing0 = _testing;
            _testing = _cursor;
            $$ = _parse_Metadata();
            success = true; 
            _testing = testing0;
            if (!success) break;
            var seq = new List(4)..[0] = $$;
            var testing1 = _testing;
            _testing = _cursor;
            $$ = _parse_TypeQualifiers();
            success = true; 
            _testing = testing1;
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_Type();
            if (!success) break;
            seq[2] = $$;
            $$ = _parse_BitFieldDeclaratorNotAbstract();
            if (!success) break;
            seq[3] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              final $start = startPos0;
              $$ = new ParameterDeclaration(declarator: $4, metadata: $1, qualifiers: $2,  type: $3);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing2 = _testing;
            _testing = _cursor;
            $$ = _parse_Metadata();
            success = true; 
            _testing = testing2;
            if (!success) break;
            var seq = new List(4)..[0] = $$;
            var testing3 = _testing;
            _testing = _cursor;
            $$ = _parse_TypeQualifiers();
            success = true; 
            _testing = testing3;
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_Type();
            if (!success) break;
            seq[2] = $$;
            $$ = _parse_BitFieldDeclaratorAbstract();
            if (!success) break;
            seq[3] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              final $start = startPos1;
              $$ = new ParameterDeclaration(declarator: $4, metadata: $1, qualifiers: $2, type: $3);
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect3);
    }
    return $$;
  }
  
  dynamic _parse_BoolType() {
    var $$;
    switch (_ch == 95 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_BOOL();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_TypeQualifiers();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new BoolTypeSpecification(identifier: _ident([$1]), metadata: $2, qualifiers: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect47);
    }
    return $$;
  }
  
  dynamic _parse_CHAR() {
    var $$;
    switch (_ch == 99 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings18, 'char');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect74);
    }
    return $$;
  }
  
  dynamic _parse_CLOSE_BRACE() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[113] >= pos) {
      $$ = _getFromCache(113);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[113] = pos;
    }  
    _token = 23;    
    _tokenStart = _cursor;    
    switch (_ch == 125 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(125, '}');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect59);
    }
    if (_cacheable[113]) {
      _addToCache($$, pos, 113);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_CLOSE_BRACKET() {
    var $$;
    _token = 24;  
    _tokenStart = _cursor;  
    switch (_ch == 93 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(93, ']');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect60);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_CLOSE_PAREN() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[115] >= pos) {
      $$ = _getFromCache(115);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[115] = pos;
    }  
    _token = 25;    
    _tokenStart = _cursor;    
    switch (_ch == 41 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(41, ')');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect23);
    }
    if (_cacheable[115]) {
      _addToCache($$, pos, 115);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_COLON() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[116] >= pos) {
      $$ = _getFromCache(116);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[116] = pos;
    }  
    _token = 26;    
    _tokenStart = _cursor;    
    switch (_ch == 58 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(58, ':');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect41);
    }
    if (_cacheable[116]) {
      _addToCache($$, pos, 116);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_COMMA() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[117] >= pos) {
      $$ = _getFromCache(117);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[117] = pos;
    }  
    _token = 27;    
    _tokenStart = _cursor;    
    switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(44, ',');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect6);
    }
    if (_cacheable[117]) {
      _addToCache($$, pos, 117);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_COMMENT() {
    var $$;
    switch (_ch == 47 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings49, '//');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  var ch2 = _ch, pos2 = _cursor, testing1 = _testing; 
                  _testing = _inputLen + 1;
                  $$ = _parse_EOL();
                  _ch = ch2;
                  _cursor = pos2; 
                  _testing = testing1;
                  $$ = null;
                  success = !success;
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _matchAny();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(const [null]);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          switch (_getState(_transitions47)) {
            case 0:
            case 3:
              var startPos2 = _startPos;
              _startPos = _cursor;
              var ch3 = _ch, pos3 = _cursor, testing2 = _testing; 
              _testing = _inputLen + 1;
              $$ = _matchAny();
              _ch = ch3;
              _cursor = pos3; 
              _testing = testing2;
              $$ = null;
              success = !success;
              _startPos = startPos2;
              break;
            case 1:
              while (true) {
                var startPos3 = _startPos;
                _startPos = _cursor;
                $$ = _parse_EOL();
                _startPos = startPos3;
                if (success) break;
                var startPos4 = _startPos;
                _startPos = _cursor;
                var ch4 = _ch, pos4 = _cursor, testing3 = _testing; 
                _testing = _inputLen + 1;
                $$ = _matchAny();
                _ch = ch4;
                _cursor = pos4; 
                _testing = testing3;
                $$ = null;
                success = !success;
                _startPos = startPos4;
                break;
              }
              break;
            case 2:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(const [null]);
          }
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect75);
    }
    return $$;
  }
  
  dynamic _parse_CONST() {
    var $$;
    _token = 28;  
    _tokenStart = _cursor;  
    switch (_ch == 99 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings10, 'const');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect61);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_C_CHAR() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
            _testing = _inputLen + 1;
            $$ = _matchMapping(10, 92, _mapping3);
            _ch = ch1;
            _cursor = pos1; 
            _testing = testing0;
            $$ = null;
            success = !success;
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _matchAny();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos0;
              $$ = $2.codeUnitAt(0);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          $$ = _parse_ESCAPE_SEQUENCE();
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_CharTypeSpecifiers() {
    var $$;
    _token = 29;  
    _tokenStart = _cursor;  
    switch (_getState(_transitions39)) {
      case 0:
      case 3:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing0 = _testing;
            _testing = _cursor;
            $$ = _parse_SIGNMODIFIER();
            success = true; 
            _testing = testing0;
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _parse_CHAR();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos0;
              $$ = new TypeSpecifiers(elements: _removeNull([$1, $2]));
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_CHAR();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _parse_SIGNMODIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos1;
              $$ = new TypeSpecifiers(elements: [$1, $2]);
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_SIGNMODIFIER();
          success = true; 
          _testing = testing1;
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_CHAR();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos2;
            $$ = new TypeSpecifiers(elements: _removeNull([$1, $2]));
          }
          break;
        }
        if (!success) {
          _ch = ch2;
          _cursor = pos2;
        }
        _startPos = startPos2;
        break;
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect62);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_DECIMAL_CONSTANT() {
    var $$;
    switch (_ch >= 49 && _ch <= 57 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_NONZERO_DIGIT();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            $$ = _parse_DIGIT();
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = int.parse(_text());
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_DIGIT() {
    var $$;
    switch (_ch >= 48 && _ch <= 57 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchRange(48, 57);
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_DIGIT_SEQUENCE() {
    var $$;
    switch (_ch >= 48 && _ch <= 57 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var testing0;
        for (var first = true, reps; ;) {  
          $$ = _parse_DIGIT();  
          if (success) {
           if (first) {      
              first = false;
              reps = [$$];
              testing0 = _testing;                  
            } else {
              reps.add($$);
            }
            _testing = _cursor;   
          } else {
            success = !first;
            if (success) {      
              _testing = testing0;
              $$ = reps;      
            } else $$ = null;
            break;
          }  
        }
        if (success) {    
          final $1 = $$;
          final $start = startPos0;
          $$ = _text();
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_DOUBLE() {
    var $$;
    switch (_ch == 100 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings22, 'double');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect76);
    }
    return $$;
  }
  
  dynamic _parse_Declaration() {
    var $$;
    switch (_getState(_transitions0)) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_FunctionDeclaration();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0;
          for (var first = true, reps; ;) {  
            $$ = _parse_SEMICOLON();  
            if (success) {
             if (first) {      
                first = false;
                reps = [$$];
                testing0 = _testing;                  
              } else {
                reps.add($$);
              }
              _testing = _cursor;   
            } else {
              success = !first;
              if (success) {      
                _testing = testing0;
                $$ = reps;      
              } else $$ = null;
              break;
            }  
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        var testing1;
        for (var first = true, reps; ;) {  
          $$ = _parse_SEMICOLON();  
          if (success) {
           if (first) {      
              first = false;
              reps = [$$];
              testing1 = _testing;                  
            } else {
              reps.add($$);
            }
            _testing = _cursor;   
          } else {
            success = !first;
            if (success) {      
              _testing = testing1;
              $$ = reps;      
            } else $$ = null;
            break;
          }  
        }
        if (success) {    
          final $1 = $$;
          final $start = startPos1;
          $$ = new EmptyDeclaration();
        }
        _startPos = startPos1;
        break;
      case 2:
        while (true) {
          var ch1 = _ch, pos1 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_FunctionDeclaration();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing2;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing2 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing2;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos2;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos2;
          if (success) break;
          var ch2 = _ch, pos2 = _cursor, startPos3 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_VariableDeclaration();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing3;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing3 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing3;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos3;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos3;
          break;
        }
        break;
      case 3:
        while (true) {
          var ch3 = _ch, pos3 = _cursor, startPos4 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_FunctionDeclaration();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing4;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing4 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing4;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos4;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch3;
            _cursor = pos3;
          }
          _startPos = startPos4;
          if (success) break;
          var ch4 = _ch, pos4 = _cursor, startPos5 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_StructureDeclaration();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing5;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing5 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing5;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos5;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch4;
            _cursor = pos4;
          }
          _startPos = startPos5;
          if (success) break;
          var ch5 = _ch, pos5 = _cursor, startPos6 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_EnumDeclaration();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing6;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing6 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing6;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos6;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch5;
            _cursor = pos5;
          }
          _startPos = startPos6;
          if (success) break;
          var ch6 = _ch, pos6 = _cursor, startPos7 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_TypedefDeclaration();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing7;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing7 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing7;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos7;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch6;
            _cursor = pos6;
          }
          _startPos = startPos7;
          if (success) break;
          var ch7 = _ch, pos7 = _cursor, startPos8 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_VariableDeclaration();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing8;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing8 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing8;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos8;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch7;
            _cursor = pos7;
          }
          _startPos = startPos8;
          break;
        }
        break;
      case 4:
        $$ = null;
        success = false;
        break;
      case 5:
        while (true) {
          var ch8 = _ch, pos8 = _cursor, startPos9 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_FunctionDeclaration();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing9;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing9 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing9;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos9;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch8;
            _cursor = pos8;
          }
          _startPos = startPos9;
          if (success) break;
          var ch9 = _ch, pos9 = _cursor, startPos10 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_StructureDeclaration();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing10;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing10 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing10;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos10;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch9;
            _cursor = pos9;
          }
          _startPos = startPos10;
          if (success) break;
          var ch10 = _ch, pos10 = _cursor, startPos11 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_EnumDeclaration();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing11;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing11 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing11;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos11;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch10;
            _cursor = pos10;
          }
          _startPos = startPos11;
          if (success) break;
          var ch11 = _ch, pos11 = _cursor, startPos12 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_TypedefDeclaration();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing12;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing12 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing12;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos12;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch11;
            _cursor = pos11;
          }
          _startPos = startPos12;
          if (success) break;
          var ch12 = _ch, pos12 = _cursor, startPos13 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_VariableDeclaration();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing13;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing13 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing13;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos13;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch12;
            _cursor = pos12;
          }
          _startPos = startPos13;
          if (success) break;
          var startPos14 = _startPos;
          _startPos = _cursor;
          var testing14;
          for (var first = true, reps; ;) {  
            $$ = _parse_SEMICOLON();  
            if (success) {
             if (first) {      
                first = false;
                reps = [$$];
                testing14 = _testing;                  
              } else {
                reps.add($$);
              }
              _testing = _cursor;   
            } else {
              success = !first;
              if (success) {      
                _testing = testing14;
                $$ = reps;      
              } else $$ = null;
              break;
            }  
          }
          if (success) {    
            final $1 = $$;
            final $start = startPos14;
            $$ = new EmptyDeclaration();
          }
          _startPos = startPos14;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect2);
    }
    return $$;
  }
  
  dynamic _parse_DeclarationList() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var testing0 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          $$ = _parse_Declaration();
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing0;
            $$ = reps;
            break; 
          }
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = true;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect1);
    }
    return $$;
  }
  
  dynamic _parse_DeclarationModifier() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[7] >= pos) {
      $$ = _getFromCache(7);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[7] = pos;
    }  
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_Identifier();
            if (!success) break;
            var seq = new List(4)..[0] = $$;
            $$ = _parse_OPEN_PAREN();
            if (!success) break;
            seq[1] = $$;
            var testing0 = _testing;
            _testing = _cursor;
            $$ = _parse_DeclarationModifierArguments();
            success = true; 
            _testing = testing0;
            if (!success) break;
            seq[2] = $$;
            $$ = _parse_CLOSE_PAREN();
            if (!success) break;
            seq[3] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              final $start = startPos0;
              $$ = new DeclarationModifier(arguments: $3, identifier: $1);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          $$ = _parse_Identifier();
          if (success) {    
            final $1 = $$;
            final $start = startPos1;
            $$ = new DeclarationModifier(identifier: $1);
          }
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect5);
    }
    if (_cacheable[7]) {
      _addToCache($$, pos, 7);
    }    
    return $$;
  }
  
  dynamic _parse_DeclarationModifierArgument() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[10] >= pos) {
      $$ = _getFromCache(10);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[10] = pos;
    }  
    switch (_getState(_transitions3)) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_constant_expression();
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    if (_cacheable[10]) {
      _addToCache($$, pos, 10);
    }    
    return $$;
  }
  
  dynamic _parse_DeclarationModifierArguments() {
    var $$;
    switch (_getState(_transitions3)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_DeclarationModifierArgument();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_COMMA();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_DeclarationModifierArgument();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect6);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = new Arguments(elements: _list($1, $2));
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_DeclarationModifierList() {
    var $$;
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_DeclarationModifier();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_COMMA();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_DeclarationModifier();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect6);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = new DeclarationModifiers(elements: _list($1, $2));
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect5);
    }
    return $$;
  }
  
  dynamic _parse_DeclarationSpecifier() {
    var $$;
    switch (_ch == 95 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_ATTRIBUTE();
          if (!success) break;
          var seq = new List(6)..[0] = $$;
          $$ = _parse_OPEN_PAREN();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_OPEN_PAREN();
          if (!success) break;
          seq[2] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_DeclarationModifierList();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[3] = $$;
          $$ = _parse_CLOSE_PAREN();
          if (!success) break;
          seq[4] = $$;
          $$ = _parse_CLOSE_PAREN();
          if (!success) break;
          seq[5] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $5 = seq[4];
            final $6 = seq[5];
            final $start = startPos0;
            $$ = new DeclarationSpecifier(identifier: $1, modifiers: $4, parenthesis: true);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect4);
    }
    return $$;
  }
  
  dynamic _parse_DeclaratorAbstract() {
    var $$;
    switch (_getState(_transitions31)) {
      case 0:
      case 3:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_PointerSpecifiers();
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_ArrayDimensions();
            if (!success) break;
            seq[1] = $$;
            var testing0 = _testing;
            _testing = _cursor;
            $$ = _parse_Metadata();
            success = true; 
            _testing = testing0;
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos0;
              $$ = new Declarator(dimensions: $2, metadata: $3, pointers: $1);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing1 = _testing;
            _testing = _cursor;
            $$ = _parse_PointerSpecifiers();
            success = true; 
            _testing = testing1;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_ArrayDimensions();
            if (!success) break;
            seq[1] = $$;
            var testing2 = _testing;
            _testing = _cursor;
            $$ = _parse_Metadata();
            success = true; 
            _testing = testing2;
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos1;
              $$ = new Declarator(dimensions: $2, metadata: $3, pointers: $1);
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          if (success) break;
          var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_PointerSpecifiers();
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            var testing3 = _testing;
            _testing = _cursor;
            $$ = _parse_ArrayDimensions();
            success = true; 
            _testing = testing3;
            if (!success) break;
            seq[1] = $$;
            var testing4 = _testing;
            _testing = _cursor;
            $$ = _parse_Metadata();
            success = true; 
            _testing = testing4;
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos2;
              $$ = new Declarator(dimensions: $2, metadata: $3, pointers: $1);
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos2;
          break;
        }
        break;
      case 1:
        var ch3 = _ch, pos3 = _cursor, startPos3 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing5 = _testing;
          _testing = _cursor;
          $$ = _parse_PointerSpecifiers();
          success = true; 
          _testing = testing5;
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          $$ = _parse_ArrayDimensions();
          if (!success) break;
          seq[1] = $$;
          var testing6 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing6;
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos3;
            $$ = new Declarator(dimensions: $2, metadata: $3, pointers: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch3;
          _cursor = pos3;
        }
        _startPos = startPos3;
        break;
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect51);
    }
    return $$;
  }
  
  dynamic _parse_DeclaratorNotAbstract() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[96] >= pos) {
      $$ = _getFromCache(96);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[96] = pos;
    }  
    switch (_getState(_transitions23)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_PointerSpecifiers();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          $$ = _parse_Identifier();
          if (!success) break;
          seq[1] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_ArrayDimensions();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[2] = $$;
          var testing2 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing2;
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $start = startPos0;
            $$ = new Declarator(dimensions: $3, identifier: $2, metadata: $4, pointers: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect5);
    }
    if (_cacheable[96]) {
      _addToCache($$, pos, 96);
    }    
    return $$;
  }
  
  dynamic _parse_DefinedType() {
    var $$;
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_Identifier();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_TypeQualifiers();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new DefinedTypeSpecification(identifier: $1, metadata: $2, qualifiers: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect5);
    }
    return $$;
  }
  
  dynamic _parse_Dimension() {
    var $$;
    switch (_ch == 91 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_OPEN_BRACKET();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_constant_expression();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_CLOSE_BRACKET();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $2;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect52);
    }
    return $$;
  }
  
  dynamic _parse_ELLIPSIS() {
    var $$;
    _token = 30;  
    _tokenStart = _cursor;  
    switch (_ch == 46 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings11, '...');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect63);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_ENUM() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[121] >= pos) {
      $$ = _getFromCache(121);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[121] = pos;
    }  
    _token = 31;    
    _tokenStart = _cursor;    
    switch (_ch == 101 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings12, 'enum');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect53);
    }
    if (_cacheable[121]) {
      _addToCache($$, pos, 121);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_EOF() {
    var $$;
    _token = 32;  
    _tokenStart = _cursor;  
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var ch0 = _ch, pos0 = _cursor, testing0 = _testing; 
        _testing = _inputLen + 1;
        $$ = _matchAny();
        _ch = ch0;
        _cursor = pos0; 
        _testing = testing0;
        $$ = null;
        success = !success;
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect0);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_EOL() {
    var $$;
    switch (_getState(_transitions48)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchMapping(10, 13, _mapping1);
        _startPos = startPos0;
        break;
      case 1:
        while (true) {
          var startPos1 = _startPos;
          _startPos = _cursor;
          $$ = _matchString(_strings50, '\r\n');
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          $$ = _matchMapping(10, 13, _mapping1);
          _startPos = startPos2;
          break;
        }
        break;
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_ESCAPE_SEQUENCE() {
    var $$;
    switch (_ch == 92 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        while (true) {
          var startPos0 = _startPos;
          _startPos = _cursor;
          $$ = _parse_SIMPLE_ESCAPE_SEQUENCE();
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          $$ = _parse_OCTAL_ESCAPE_SEQUENCE();
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          $$ = _parse_HEXADECIMAL_ESCAPE_SEQUENCE();
          _startPos = startPos2;
          if (success) break;
          var startPos3 = _startPos;
          _startPos = _cursor;
          $$ = _parse_UNIVERSAL_CHARACTER_NAME();
          _startPos = startPos3;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
      case 2:
        var startPos4 = _startPos;
        _startPos = _cursor;
        $$ = _parse_HEXADECIMAL_ESCAPE_SEQUENCE();
        _startPos = startPos4;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_EXPONENT_PART() {
    var $$;
    switch (_getState(_transitions56)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          switch (_getState(_transitions57)) {
            case 0:
              var startPos1 = _startPos;
              _startPos = _cursor;
              $$ = _matchChar(69, 'E');
              _startPos = startPos1;
              break;
            case 1:
              var startPos2 = _startPos;
              _startPos = _cursor;
              $$ = _matchChar(101, 'e');
              _startPos = startPos2;
              break;
            case 2:
            case 3:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(_expect86);
          }
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_SIGN();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_DIGIT_SEQUENCE();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = _text();
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect86);
    }
    return $$;
  }
  
  dynamic _parse_EnumDeclaration() {
    var $$;
    switch (_getState(_transitions34)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_TypeQualifiers();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_EnumType();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new EnumDeclaration(metadata: $1, qualifiers: $2, type: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect53);
    }
    return $$;
  }
  
  dynamic _parse_EnumType() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[89] >= pos) {
      $$ = _getFromCache(89);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[89] = pos;
    }  
    switch (_ch == 101 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_EnumTypeSpecifier();
            if (!success) break;
            var seq = new List(6)..[0] = $$;
            $$ = _parse_OPEN_BRACE();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_Enumerators();
            if (!success) break;
            seq[2] = $$;
            $$ = _parse_CLOSE_BRACE();
            if (!success) break;
            seq[3] = $$;
            var testing0 = _testing;
            _testing = _cursor;
            $$ = _parse_Metadata();
            success = true; 
            _testing = testing0;
            if (!success) break;
            seq[4] = $$;
            var testing1 = _testing;
            _testing = _cursor;
            $$ = _parse_TypeQualifiers();
            success = true; 
            _testing = testing1;
            if (!success) break;
            seq[5] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              final $5 = seq[4];
              final $6 = seq[5];
              final $start = startPos0;
              $$ = new EnumTypeSpecification(metadata: $5, elaboratedType: $1, qualifiers: $6, enumerators: $3);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_EnumTypeSpecifierWithTag();
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            var testing2 = _testing;
            _testing = _cursor;
            $$ = _parse_Metadata();
            success = true; 
            _testing = testing2;
            if (!success) break;
            seq[1] = $$;
            var testing3 = _testing;
            _testing = _cursor;
            $$ = _parse_TypeQualifiers();
            success = true; 
            _testing = testing3;
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos1;
              $$ = new EnumTypeSpecification(metadata: $2, elaboratedType: $1, qualifiers: $3);
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect53);
    }
    if (_cacheable[89]) {
      _addToCache($$, pos, 89);
    }    
    return $$;
  }
  
  dynamic _parse_EnumTypeSpecifier() {
    var $$;
    switch (_ch == 101 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_ENUM();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_Identifier();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new ElaboratedTypeSpecifier(kind: $1, metadata: $2, tag: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect53);
    }
    return $$;
  }
  
  dynamic _parse_EnumTypeSpecifierWithTag() {
    var $$;
    switch (_ch == 101 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_ENUM();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_Identifier();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new ElaboratedTypeSpecifier(kind: $1, metadata: $2, tag: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect53);
    }
    return $$;
  }
  
  dynamic _parse_Enumerator() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[93] >= pos) {
      $$ = _getFromCache(93);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[93] = pos;
    }  
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_Identifier();
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_ASSIGN();
            if (!success) break;
            seq[1] = $$;
            switch (_getState(_transitions3)) {
              case 0:
              case 2:
                var startPos1 = _startPos;
                _startPos = _cursor;
                $$ = _parse_constant_expression();
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect7);
            }
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos0;
              $$ = new Enumerator(identifier: $1, value: $3);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          $$ = _parse_Identifier();
          if (success) {    
            final $1 = $$;
            final $start = startPos2;
            $$ = new Enumerator(identifier: $1);
          }
          _startPos = startPos2;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect5);
    }
    if (_cacheable[93]) {
      _addToCache($$, pos, 93);
    }    
    return $$;
  }
  
  dynamic _parse_EnumeratorList() {
    var $$;
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_Enumerator();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_COMMA();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_Enumerator();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect6);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_COMMA();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = _list($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect5);
    }
    return $$;
  }
  
  dynamic _parse_Enumerators() {
    var $$;
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_EnumeratorList();
        if (success) {    
          final $1 = $$;
          final $start = startPos0;
          $$ = new Enumerators(elements: $1);
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect5);
    }
    return $$;
  }
  
  dynamic _parse_FLOAT() {
    var $$;
    switch (_ch == 102 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings25, 'float');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect77);
    }
    return $$;
  }
  
  dynamic _parse_FLOATING_SUFFIX() {
    var $$;
    switch (_getState(_transitions58)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchMapping(70, 108, _mapping4);
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_FRACTIONAL_CONSTANT() {
    var $$;
    switch (_getState(_transitions14)) {
      case 0:
      case 3:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_DIGIT_SEQUENCE();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          $$ = _matchChar(46, '.');
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_DIGIT_SEQUENCE();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = _text();
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        while (true) {
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing1 = _testing;
            _testing = _cursor;
            $$ = _parse_DIGIT_SEQUENCE();
            success = true; 
            _testing = testing1;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _matchChar(46, '.');
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_DIGIT_SEQUENCE();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos1;
              $$ = _text();
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          if (success) break;
          var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_DIGIT_SEQUENCE();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _matchChar(46, '.');
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos2;
              $$ = _text();
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos2;
          break;
        }
        break;
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_FloatType() {
    var $$;
    switch (_getState(_transitions27)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_FloatTypeSpeficiers();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_TypeQualifiers();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new BasicTypeSpecification(metadata: $2, qualifiers: $3, specifiers: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect45);
    }
    return $$;
  }
  
  dynamic _parse_FloatTypeSpeficiers() {
    var $$;
    _token = 33;  
    _tokenStart = _cursor;  
    switch (_getState(_transitions27)) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        switch (_getState(_transitions40)) {
          case 0:
            var startPos1 = _startPos;
            _startPos = _cursor;
            $$ = _parse_DOUBLE();
            _startPos = startPos1;
            break;
          case 1:
            var startPos2 = _startPos;
            _startPos = _cursor;
            $$ = _parse_FLOAT();
            _startPos = startPos2;
            break;
          case 2:
            $$ = null;
            success = false;
            break;
          case 3:
            while (true) {
              var startPos3 = _startPos;
              _startPos = _cursor;
              $$ = _parse_FLOAT();
              _startPos = startPos3;
              if (success) break;
              var startPos4 = _startPos;
              _startPos = _cursor;
              $$ = _parse_DOUBLE();
              _startPos = startPos4;
              break;
            }
            break;
        }
        if (!success && _cursor > _testing) {
          _failure(_expect64);
        }
        if (success) {    
          final $1 = $$;
          final $start = startPos0;
          $$ = new TypeSpecifiers(elements: [$1]);
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect45);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_FunctionDeclaration() {
    var $$;
    switch (_getState(_transitions1)) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_TypeQualifiers();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_FunctionDeclarator();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new FunctionDeclaration(declarator: $3, metadata: $1, qualifiers: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 3:
        while (true) {
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing2 = _testing;
            _testing = _cursor;
            $$ = _parse_Metadata();
            success = true; 
            _testing = testing2;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            var testing3 = _testing;
            _testing = _cursor;
            $$ = _parse_TypeQualifiers();
            success = true; 
            _testing = testing3;
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_FunctionDeclarator();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos1;
              $$ = new FunctionDeclaration(declarator: $3, metadata: $1, qualifiers: $2);
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          if (success) break;
          var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing4 = _testing;
            _testing = _cursor;
            $$ = _parse_Metadata();
            success = true; 
            _testing = testing4;
            if (!success) break;
            var seq = new List(4)..[0] = $$;
            var testing5 = _testing;
            _testing = _cursor;
            $$ = _parse_TypeQualifiers();
            success = true; 
            _testing = testing5;
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_Type();
            if (!success) break;
            seq[2] = $$;
            $$ = _parse_FunctionDeclarator();
            if (!success) break;
            seq[3] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              final $start = startPos2;
              $$ = new FunctionDeclaration(declarator: $4, metadata: $1, qualifiers: $2, type: $3);
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos2;
          break;
        }
        break;
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect3);
    }
    return $$;
  }
  
  dynamic _parse_FunctionDeclarator() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[63] >= pos) {
      $$ = _getFromCache(63);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[63] = pos;
    }  
    switch (_getState(_transitions23)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_PointerSpecifiers();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(6)..[0] = $$;
          $$ = _parse_Identifier();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_OPEN_PAREN();
          if (!success) break;
          seq[2] = $$;
          $$ = _parse_FunctionParameters();
          if (!success) break;
          seq[3] = $$;
          $$ = _parse_CLOSE_PAREN();
          if (!success) break;
          seq[4] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[5] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $5 = seq[4];
            final $6 = seq[5];
            final $start = startPos0;
            $$ = new Declarator(identifier: $2, metadata: $6, parameters: $4, pointers: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect5);
    }
    if (_cacheable[63]) {
      _addToCache($$, pos, 63);
    }    
    return $$;
  }
  
  dynamic _parse_FunctionParameterDeclaration() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[68] >= pos) {
      $$ = _getFromCache(68);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[68] = pos;
    }  
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        while (true) {
          var startPos0 = _startPos;
          _startPos = _cursor;
          $$ = _parse_ParameterDeclarationNotAbstract();
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          $$ = _parse_ParameterDeclarationAbstract();
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect3);
    }
    if (_cacheable[68]) {
      _addToCache($$, pos, 68);
    }    
    return $$;
  }
  
  dynamic _parse_FunctionParameterList() {
    var $$;
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_FunctionParameterDeclaration();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_COMMA();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_FunctionParameterDeclaration();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect6);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _list($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect3);
    }
    return $$;
  }
  
  dynamic _parse_FunctionParameters() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_FunctionParameterList();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
            case 0:
            case 2:
              var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
              _startPos = _cursor;
              while (true) {  
                $$ = _parse_COMMA();
                if (!success) break;
                var seq = new List(2)..[0] = $$;
                $$ = _parse_ELLIPSIS();
                if (!success) break;
                seq[1] = $$;
                $$ = seq;
                if (success) {    
                  final $1 = seq[0];
                  final $2 = seq[1];
                  final $start = startPos1;
                  $$ = $2;
                }
                break;
              }
              if (!success) {
                _ch = ch1;
                _cursor = pos1;
              }
              _startPos = startPos1;
              break;
            case 1:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(_expect6);
          }
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = new FunctionParameters(elements: $1 != null ? $1 : [], ellipsis: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = true;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect1);
    }
    return $$;
  }
  
  dynamic _parse_FunctionPointerDeclarator() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[95] >= pos) {
      $$ = _getFromCache(95);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[95] = pos;
    }  
    switch (_getState(_transitions32)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_PointerSpecifiers();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(10)..[0] = $$;
          $$ = _parse_OPEN_PAREN();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_PointerSpecifiers();
          if (!success) break;
          seq[2] = $$;
          $$ = _parse_Identifier();
          if (!success) break;
          seq[3] = $$;
          $$ = _parse_CLOSE_PAREN();
          if (!success) break;
          seq[4] = $$;
          $$ = _parse_OPEN_PAREN();
          if (!success) break;
          seq[5] = $$;
          $$ = _parse_FunctionParameters();
          if (!success) break;
          seq[6] = $$;
          $$ = _parse_CLOSE_PAREN();
          if (!success) break;
          seq[7] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_ArrayDimensions();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[8] = $$;
          var testing2 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing2;
          if (!success) break;
          seq[9] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $5 = seq[4];
            final $6 = seq[5];
            final $7 = seq[6];
            final $8 = seq[7];
            final $9 = seq[8];
            final $10 = seq[9];
            final $start = startPos0;
            $$ = new Declarator(dimensions: $9, functionPointers: $3, identifier: $4, metadata: $10, parameters: $7, pointers: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect22);
    }
    if (_cacheable[95]) {
      _addToCache($$, pos, 95);
    }    
    return $$;
  }
  
  dynamic _parse_HEXADECIMAL_CONSTANT() {
    var $$;
    switch (_ch == 48 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_HEXADECIMAL_PREFIX();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          $$ = _parse_HEXADECIMAL_DIGIT();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_HEXADECIMAL_CONSTANT1();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = int.parse(_text(2), radix: 16);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect73);
    }
    return $$;
  }
  
  dynamic _parse_HEXADECIMAL_CONSTANT1() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var testing0 = _testing;
        _testing = _cursor;
        switch (_getState(_transitions59)) {
          case 0:
          case 2:
            var ch0 = _ch, pos0 = _cursor, startPos1 = _startPos;
            _startPos = _cursor;
            while (true) {  
              $$ = _parse_HEXADECIMAL_DIGIT();
              if (!success) break;
              var seq = new List(2)..[0] = $$;
              $$ = _parse_HEXADECIMAL_CONSTANT1();
              if (!success) break;
              seq[1] = $$;
              $$ = seq;
              break;
            }
            if (!success) {
              _ch = ch0;
              _cursor = pos0;
            }
            _startPos = startPos1;
            break;
          case 1:
            $$ = null;
            success = false;
            break;
        }
        if (!success && _cursor > _testing) {
          _failure(const [null]);
        }
        success = true; 
        _testing = testing0;
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = true;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect1);
    }
    return $$;
  }
  
  dynamic _parse_HEXADECIMAL_DIGIT() {
    var $$;
    switch (_getState(_transitions59)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchMapping(48, 102, _mapping5);
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_HEXADECIMAL_DIGIT_SEQUENCE() {
    var $$;
    switch (_getState(_transitions59)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var testing0;
        for (var first = true, reps; ;) {  
          $$ = _parse_HEXADECIMAL_DIGIT();  
          if (success) {
           if (first) {      
              first = false;
              reps = [$$];
              testing0 = _testing;                  
            } else {
              reps.add($$);
            }
            _testing = _cursor;   
          } else {
            success = !first;
            if (success) {      
              _testing = testing0;
              $$ = reps;      
            } else $$ = null;
            break;
          }  
        }
        if (success) {    
          final $1 = $$;
          final $start = startPos0;
          $$ = _text();
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_HEXADECIMAL_ESCAPE_SEQUENCE() {
    var $$;
    switch (_ch == 92 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings51, '\\x');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          $$ = _parse_HEXADECIMAL_DIGIT();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_HEXADECIMAL_ESCAPE_SEQUENCE1();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = int.parse(_text(2), radix: 16);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect87);
    }
    return $$;
  }
  
  dynamic _parse_HEXADECIMAL_ESCAPE_SEQUENCE1() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var testing0 = _testing;
        _testing = _cursor;
        switch (_getState(_transitions59)) {
          case 0:
          case 2:
            var ch0 = _ch, pos0 = _cursor, startPos1 = _startPos;
            _startPos = _cursor;
            while (true) {  
              $$ = _parse_HEXADECIMAL_DIGIT();
              if (!success) break;
              var seq = new List(2)..[0] = $$;
              $$ = _parse_HEXADECIMAL_ESCAPE_SEQUENCE1();
              if (!success) break;
              seq[1] = $$;
              $$ = seq;
              break;
            }
            if (!success) {
              _ch = ch0;
              _cursor = pos0;
            }
            _startPos = startPos1;
            break;
          case 1:
            $$ = null;
            success = false;
            break;
        }
        if (!success && _cursor > _testing) {
          _failure(const [null]);
        }
        success = true; 
        _testing = testing0;
        if (success) {    
          final $1 = $$;
          final $start = startPos0;
          $$ = _text();
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = true;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect1);
    }
    return $$;
  }
  
  dynamic _parse_HEXADECIMAL_FRACTIONAL_CONSTANT() {
    var $$;
    switch (_getState(_transitions60)) {
      case 0:
      case 3:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_HEXADECIMAL_DIGIT_SEQUENCE();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          $$ = _matchChar(46, '.');
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_HEXADECIMAL_DIGIT_SEQUENCE();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        while (true) {
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing1 = _testing;
            _testing = _cursor;
            $$ = _parse_HEXADECIMAL_DIGIT_SEQUENCE();
            success = true; 
            _testing = testing1;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _matchChar(46, '.');
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_HEXADECIMAL_DIGIT_SEQUENCE();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          if (success) break;
          var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_HEXADECIMAL_DIGIT_SEQUENCE();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _matchChar(46, '.');
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos2;
          break;
        }
        break;
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_HEXADECIMAL_PREFIX() {
    var $$;
    switch (_ch == 48 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        while (true) {
          var startPos0 = _startPos;
          _startPos = _cursor;
          $$ = _matchString(_strings52, '0x');
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          $$ = _matchString(_strings53, '0X');
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect73);
    }
    return $$;
  }
  
  dynamic _parse_HEX_QUAD() {
    var $$;
    switch (_getState(_transitions59)) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_HEXADECIMAL_DIGIT();
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          $$ = _parse_HEXADECIMAL_DIGIT();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_HEXADECIMAL_DIGIT();
          if (!success) break;
          seq[2] = $$;
          $$ = _parse_HEXADECIMAL_DIGIT();
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $start = startPos0;
            $$ = _text();
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_IDENTIFIER_BASE1() {
    var $$;
    switch (_getState(_transitions49)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_DIGIT();
        if (success) {    
          final $1 = $$;
          final $start = startPos0;
          $$ = _text();
        }
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        $$ = _parse_IDENTIFIER_NONDIGIT();
        if (success) {    
          final $1 = $$;
          final $start = startPos1;
          $$ = _text();
        }
        _startPos = startPos1;
        break;
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_IDENTIFIER_NONDIGIT() {
    var $$;
    switch (_getState(_transitions50)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_NONDIGIT();
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        $$ = _parse_UNIVERSAL_CHARACTER_NAME();
        _startPos = startPos1;
        break;
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_INT() {
    var $$;
    switch (_ch == 105 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings30, 'int');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect78);
    }
    return $$;
  }
  
  dynamic _parse_INTEGER_SUFFIX() {
    var $$;
    switch (_getState(_transitions61)) {
      case 0:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_LONG_LONG_SUFFIX();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing0 = _testing;
            _testing = _cursor;
            $$ = _parse_UNSIGNED_SUFFIX();
            success = true; 
            _testing = testing0;
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_LONG_SUFFIX();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing1 = _testing;
            _testing = _cursor;
            $$ = _parse_UNSIGNED_SUFFIX();
            success = true; 
            _testing = testing1;
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        while (true) {
          var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_UNSIGNED_SUFFIX();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _parse_LONG_LONG_SUFFIX();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos2;
          if (success) break;
          var ch3 = _ch, pos3 = _cursor, startPos3 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_UNSIGNED_SUFFIX();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing2 = _testing;
            _testing = _cursor;
            $$ = _parse_LONG_SUFFIX();
            success = true; 
            _testing = testing2;
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            break;
          }
          if (!success) {
            _ch = ch3;
            _cursor = pos3;
          }
          _startPos = startPos3;
          break;
        }
        break;
      case 2:
        $$ = null;
        success = false;
        break;
      case 3:
        while (true) {
          var ch4 = _ch, pos4 = _cursor, startPos4 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_UNSIGNED_SUFFIX();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing3 = _testing;
            _testing = _cursor;
            $$ = _parse_LONG_SUFFIX();
            success = true; 
            _testing = testing3;
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            break;
          }
          if (!success) {
            _ch = ch4;
            _cursor = pos4;
          }
          _startPos = startPos4;
          if (success) break;
          var ch5 = _ch, pos5 = _cursor, startPos5 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_LONG_LONG_SUFFIX();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing4 = _testing;
            _testing = _cursor;
            $$ = _parse_UNSIGNED_SUFFIX();
            success = true; 
            _testing = testing4;
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            break;
          }
          if (!success) {
            _ch = ch5;
            _cursor = pos5;
          }
          _startPos = startPos5;
          if (success) break;
          var ch6 = _ch, pos6 = _cursor, startPos6 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_LONG_SUFFIX();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing5 = _testing;
            _testing = _cursor;
            $$ = _parse_UNSIGNED_SUFFIX();
            success = true; 
            _testing = testing5;
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            break;
          }
          if (!success) {
            _ch = ch6;
            _cursor = pos6;
          }
          _startPos = startPos6;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_Identifier() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[8] >= pos) {
      $$ = _getFromCache(8);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[8] = pos;
    }  
    _token = 0;    
    _tokenStart = _cursor;    
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_RESERVED_WORD();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          $$ = _parse_Identifier_base();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $2;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect5);
    }
    if (_cacheable[8]) {
      _addToCache($$, pos, 8);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_Identifier_base() {
    var $$;
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_IDENTIFIER_NONDIGIT();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            $$ = _parse_IDENTIFIER_BASE1();
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = new Identifier(name: _text());
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_IntegerType() {
    var $$;
    switch (_getState(_transitions25)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          switch (_getState(_transitions26)) {
            case 0:
              var startPos1 = _startPos;
              _startPos = _cursor;
              $$ = _parse_CharTypeSpecifiers();
              _startPos = startPos1;
              break;
            case 1:
              var startPos2 = _startPos;
              _startPos = _cursor;
              $$ = _parse_Integer_Type_Specifiers();
              _startPos = startPos2;
              break;
            case 2:
            case 4:
              while (true) {
                var startPos3 = _startPos;
                _startPos = _cursor;
                $$ = _parse_CharTypeSpecifiers();
                _startPos = startPos3;
                if (success) break;
                var startPos4 = _startPos;
                _startPos = _cursor;
                $$ = _parse_Integer_Type_Specifiers();
                _startPos = startPos4;
                break;
              }
              break;
            case 3:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(_expect44);
          }
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_TypeQualifiers();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new BasicTypeSpecification(metadata: $2, qualifiers: $3, specifiers: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect44);
    }
    return $$;
  }
  
  dynamic _parse_Integer_Type_Specifiers() {
    var $$;
    _token = 34;  
    _tokenStart = _cursor;  
    switch (_getState(_transitions41)) {
      case 0:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing0 = _testing;
            _testing = _cursor;
            $$ = _parse_SIGNMODIFIER();
            success = true; 
            _testing = testing0;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_INT();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_SIZEMODIFIER();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos0;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing1 = _testing;
            _testing = _cursor;
            $$ = _parse_SIZEMODIFIER();
            success = true; 
            _testing = testing1;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_INT();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_SIGNMODIFIER();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos1;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          if (success) break;
          var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing2 = _testing;
            _testing = _cursor;
            $$ = _parse_INT();
            success = true; 
            _testing = testing2;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_SIGNMODIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_SIZEMODIFIER();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos2;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos2;
          if (success) break;
          var ch3 = _ch, pos3 = _cursor, startPos3 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing3 = _testing;
            _testing = _cursor;
            $$ = _parse_INT();
            success = true; 
            _testing = testing3;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_SIZEMODIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_SIGNMODIFIER();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos3;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch3;
            _cursor = pos3;
          }
          _startPos = startPos3;
          if (success) break;
          var startPos4 = _startPos;
          _startPos = _cursor;
          $$ = _parse_INT();
          if (success) {    
            final $1 = $$;
            final $start = startPos4;
            $$ = new TypeSpecifiers(elements: _flatten([$1]));
          }
          _startPos = startPos4;
          break;
        }
        break;
      case 1:
        while (true) {
          var ch4 = _ch, pos4 = _cursor, startPos5 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing4 = _testing;
            _testing = _cursor;
            $$ = _parse_SIGNMODIFIER();
            success = true; 
            _testing = testing4;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_SIZEMODIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_INT();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos5;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch4;
            _cursor = pos4;
          }
          _startPos = startPos5;
          if (success) break;
          var ch5 = _ch, pos5 = _cursor, startPos6 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing5 = _testing;
            _testing = _cursor;
            $$ = _parse_SIZEMODIFIER();
            success = true; 
            _testing = testing5;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_SIGNMODIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_INT();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos6;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch5;
            _cursor = pos5;
          }
          _startPos = startPos6;
          if (success) break;
          var ch6 = _ch, pos6 = _cursor, startPos7 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing6 = _testing;
            _testing = _cursor;
            $$ = _parse_SIZEMODIFIER();
            success = true; 
            _testing = testing6;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_INT();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_SIGNMODIFIER();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos7;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch6;
            _cursor = pos6;
          }
          _startPos = startPos7;
          if (success) break;
          var ch7 = _ch, pos7 = _cursor, startPos8 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing7 = _testing;
            _testing = _cursor;
            $$ = _parse_INT();
            success = true; 
            _testing = testing7;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_SIZEMODIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_SIGNMODIFIER();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos8;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch7;
            _cursor = pos7;
          }
          _startPos = startPos8;
          if (success) break;
          var startPos9 = _startPos;
          _startPos = _cursor;
          $$ = _parse_SIZEMODIFIER();
          if (success) {    
            final $1 = $$;
            final $start = startPos9;
            $$ = new TypeSpecifiers(elements: _flatten([$1]));
          }
          _startPos = startPos9;
          break;
        }
        break;
      case 2:
        while (true) {
          var ch8 = _ch, pos8 = _cursor, startPos10 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing8 = _testing;
            _testing = _cursor;
            $$ = _parse_SIGNMODIFIER();
            success = true; 
            _testing = testing8;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_SIZEMODIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_INT();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos10;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch8;
            _cursor = pos8;
          }
          _startPos = startPos10;
          if (success) break;
          var ch9 = _ch, pos9 = _cursor, startPos11 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing9 = _testing;
            _testing = _cursor;
            $$ = _parse_SIGNMODIFIER();
            success = true; 
            _testing = testing9;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_INT();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_SIZEMODIFIER();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos11;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch9;
            _cursor = pos9;
          }
          _startPos = startPos11;
          if (success) break;
          var ch10 = _ch, pos10 = _cursor, startPos12 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing10 = _testing;
            _testing = _cursor;
            $$ = _parse_SIZEMODIFIER();
            success = true; 
            _testing = testing10;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_SIGNMODIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_INT();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos12;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch10;
            _cursor = pos10;
          }
          _startPos = startPos12;
          if (success) break;
          var ch11 = _ch, pos11 = _cursor, startPos13 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing11 = _testing;
            _testing = _cursor;
            $$ = _parse_SIZEMODIFIER();
            success = true; 
            _testing = testing11;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_INT();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_SIGNMODIFIER();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos13;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch11;
            _cursor = pos11;
          }
          _startPos = startPos13;
          if (success) break;
          var ch12 = _ch, pos12 = _cursor, startPos14 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing12 = _testing;
            _testing = _cursor;
            $$ = _parse_INT();
            success = true; 
            _testing = testing12;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_SIGNMODIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_SIZEMODIFIER();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos14;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch12;
            _cursor = pos12;
          }
          _startPos = startPos14;
          if (success) break;
          var ch13 = _ch, pos13 = _cursor, startPos15 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing13 = _testing;
            _testing = _cursor;
            $$ = _parse_INT();
            success = true; 
            _testing = testing13;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_SIZEMODIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_SIGNMODIFIER();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos15;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch13;
            _cursor = pos13;
          }
          _startPos = startPos15;
          if (success) break;
          var startPos16 = _startPos;
          _startPos = _cursor;
          $$ = _parse_SIGNMODIFIER();
          if (success) {    
            final $1 = $$;
            final $start = startPos16;
            $$ = new TypeSpecifiers(elements: _flatten([$1]));
          }
          _startPos = startPos16;
          if (success) break;
          var startPos17 = _startPos;
          _startPos = _cursor;
          $$ = _parse_SIZEMODIFIER();
          if (success) {    
            final $1 = $$;
            final $start = startPos17;
            $$ = new TypeSpecifiers(elements: _flatten([$1]));
          }
          _startPos = startPos17;
          break;
        }
        break;
      case 3:
        while (true) {
          var ch14 = _ch, pos14 = _cursor, startPos18 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing14 = _testing;
            _testing = _cursor;
            $$ = _parse_SIGNMODIFIER();
            success = true; 
            _testing = testing14;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_SIZEMODIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_INT();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos18;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch14;
            _cursor = pos14;
          }
          _startPos = startPos18;
          if (success) break;
          var ch15 = _ch, pos15 = _cursor, startPos19 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing15 = _testing;
            _testing = _cursor;
            $$ = _parse_SIGNMODIFIER();
            success = true; 
            _testing = testing15;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_INT();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_SIZEMODIFIER();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos19;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch15;
            _cursor = pos15;
          }
          _startPos = startPos19;
          if (success) break;
          var ch16 = _ch, pos16 = _cursor, startPos20 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing16 = _testing;
            _testing = _cursor;
            $$ = _parse_SIZEMODIFIER();
            success = true; 
            _testing = testing16;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_SIGNMODIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_INT();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos20;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch16;
            _cursor = pos16;
          }
          _startPos = startPos20;
          if (success) break;
          var ch17 = _ch, pos17 = _cursor, startPos21 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing17 = _testing;
            _testing = _cursor;
            $$ = _parse_INT();
            success = true; 
            _testing = testing17;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_SIGNMODIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_SIZEMODIFIER();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos21;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch17;
            _cursor = pos17;
          }
          _startPos = startPos21;
          if (success) break;
          var startPos22 = _startPos;
          _startPos = _cursor;
          $$ = _parse_SIGNMODIFIER();
          if (success) {    
            final $1 = $$;
            final $start = startPos22;
            $$ = new TypeSpecifiers(elements: _flatten([$1]));
          }
          _startPos = startPos22;
          break;
        }
        break;
      case 4:
        $$ = null;
        success = false;
        break;
      case 5:
        while (true) {
          var ch18 = _ch, pos18 = _cursor, startPos23 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing18 = _testing;
            _testing = _cursor;
            $$ = _parse_SIGNMODIFIER();
            success = true; 
            _testing = testing18;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_SIZEMODIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_INT();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos23;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch18;
            _cursor = pos18;
          }
          _startPos = startPos23;
          if (success) break;
          var ch19 = _ch, pos19 = _cursor, startPos24 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing19 = _testing;
            _testing = _cursor;
            $$ = _parse_SIGNMODIFIER();
            success = true; 
            _testing = testing19;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_INT();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_SIZEMODIFIER();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos24;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch19;
            _cursor = pos19;
          }
          _startPos = startPos24;
          if (success) break;
          var ch20 = _ch, pos20 = _cursor, startPos25 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing20 = _testing;
            _testing = _cursor;
            $$ = _parse_SIZEMODIFIER();
            success = true; 
            _testing = testing20;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_SIGNMODIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_INT();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos25;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch20;
            _cursor = pos20;
          }
          _startPos = startPos25;
          if (success) break;
          var ch21 = _ch, pos21 = _cursor, startPos26 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing21 = _testing;
            _testing = _cursor;
            $$ = _parse_SIZEMODIFIER();
            success = true; 
            _testing = testing21;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_INT();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_SIGNMODIFIER();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos26;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch21;
            _cursor = pos21;
          }
          _startPos = startPos26;
          if (success) break;
          var ch22 = _ch, pos22 = _cursor, startPos27 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing22 = _testing;
            _testing = _cursor;
            $$ = _parse_INT();
            success = true; 
            _testing = testing22;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_SIGNMODIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_SIZEMODIFIER();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos27;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch22;
            _cursor = pos22;
          }
          _startPos = startPos27;
          if (success) break;
          var ch23 = _ch, pos23 = _cursor, startPos28 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing23 = _testing;
            _testing = _cursor;
            $$ = _parse_INT();
            success = true; 
            _testing = testing23;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_SIZEMODIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_SIGNMODIFIER();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos28;
              $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3])));
            }
            break;
          }
          if (!success) {
            _ch = ch23;
            _cursor = pos23;
          }
          _startPos = startPos28;
          if (success) break;
          var startPos29 = _startPos;
          _startPos = _cursor;
          $$ = _parse_SIGNMODIFIER();
          if (success) {    
            final $1 = $$;
            final $start = startPos29;
            $$ = new TypeSpecifiers(elements: _flatten([$1]));
          }
          _startPos = startPos29;
          if (success) break;
          var startPos30 = _startPos;
          _startPos = _cursor;
          $$ = _parse_SIZEMODIFIER();
          if (success) {    
            final $1 = $$;
            final $start = startPos30;
            $$ = new TypeSpecifiers(elements: _flatten([$1]));
          }
          _startPos = startPos30;
          if (success) break;
          var startPos31 = _startPos;
          _startPos = _cursor;
          $$ = _parse_INT();
          if (success) {    
            final $1 = $$;
            final $start = startPos31;
            $$ = new TypeSpecifiers(elements: _flatten([$1]));
          }
          _startPos = startPos31;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect65);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_LEADING_SPACES() {
    var $$;
    _token = 35;  
    _tokenStart = _cursor;  
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_SPACING();
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = true;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect66);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_LONG() {
    var $$;
    switch (_ch == 108 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings31, 'long');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect79);
    }
    return $$;
  }
  
  dynamic _parse_LONG_LONG_SUFFIX() {
    var $$;
    switch (_getState(_transitions62)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchString(_strings54, 'LL');
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        $$ = _matchString(_strings55, 'll');
        _startPos = startPos1;
        break;
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect88);
    }
    return $$;
  }
  
  dynamic _parse_LONG_SUFFIX() {
    var $$;
    switch (_getState(_transitions63)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchMapping(76, 108, _mapping6);
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_Metadata() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[4] >= pos) {
      $$ = _getFromCache(4);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[4] = pos;
    }  
    switch (_ch == 95 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var testing0;
        for (var first = true, reps; ;) {  
          $$ = _parse_DeclarationSpecifier();  
          if (success) {
           if (first) {      
              first = false;
              reps = [$$];
              testing0 = _testing;                  
            } else {
              reps.add($$);
            }
            _testing = _cursor;   
          } else {
            success = !first;
            if (success) {      
              _testing = testing0;
              $$ = reps;      
            } else $$ = null;
            break;
          }  
        }
        if (success) {    
          final $1 = $$;
          final $start = startPos0;
          $$ = new DeclarationSpecifiers(elements: $1);
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect4);
    }
    if (_cacheable[4]) {
      _addToCache($$, pos, 4);
    }    
    return $$;
  }
  
  dynamic _parse_NONDIGIT() {
    var $$;
    switch (_getState(_transitions64)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchMapping(65, 122, _mapping7);
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_NONZERO_DIGIT() {
    var $$;
    switch (_ch >= 49 && _ch <= 57 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchRange(49, 57);
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_OCTAL_CONSTANT() {
    var $$;
    switch (_ch == 48 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(48, '0');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_OCTAL_CONSTANT1();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = int.parse(_text(), radix: 8);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect89);
    }
    return $$;
  }
  
  dynamic _parse_OCTAL_CONSTANT1() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var testing0 = _testing;
        _testing = _cursor;
        switch (_ch >= 48 && _ch <= 55 ? 0 : _ch == -1 ? 2 : 1) {
          case 0:
          case 2:
            var ch0 = _ch, pos0 = _cursor, startPos1 = _startPos;
            _startPos = _cursor;
            while (true) {  
              $$ = _parse_OCTAL_DIGIT();
              if (!success) break;
              var seq = new List(2)..[0] = $$;
              $$ = _parse_OCTAL_CONSTANT1();
              if (!success) break;
              seq[1] = $$;
              $$ = seq;
              break;
            }
            if (!success) {
              _ch = ch0;
              _cursor = pos0;
            }
            _startPos = startPos1;
            break;
          case 1:
            $$ = null;
            success = false;
            break;
        }
        if (!success && _cursor > _testing) {
          _failure(const [null]);
        }
        success = true; 
        _testing = testing0;
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = true;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect1);
    }
    return $$;
  }
  
  dynamic _parse_OCTAL_DIGIT() {
    var $$;
    switch (_ch >= 48 && _ch <= 55 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchRange(48, 55);
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_OCTAL_ESCAPE_SEQUENCE() {
    var $$;
    switch (_ch == 92 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _matchChar(92, '\\');
            if (!success) break;
            var seq = new List(4)..[0] = $$;
            $$ = _parse_OCTAL_DIGIT();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_OCTAL_DIGIT();
            if (!success) break;
            seq[2] = $$;
            $$ = _parse_OCTAL_DIGIT();
            if (!success) break;
            seq[3] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              final $start = startPos0;
              $$ = int.parse(_text(1), radix: 8);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _matchChar(92, '\\');
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_OCTAL_DIGIT();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_OCTAL_DIGIT();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos1;
              $$ = int.parse(_text(1), radix: 8);
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          if (success) break;
          var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _matchChar(92, '\\');
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _parse_OCTAL_DIGIT();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos2;
              $$ = int.parse($2, radix: 8);
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos2;
          break;
        }
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect90);
    }
    return $$;
  }
  
  dynamic _parse_OPEN_BRACE() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[127] >= pos) {
      $$ = _getFromCache(127);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[127] = pos;
    }  
    _token = 36;    
    _tokenStart = _cursor;    
    switch (_ch == 123 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(123, '{');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect49);
    }
    if (_cacheable[127]) {
      _addToCache($$, pos, 127);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_OPEN_BRACKET() {
    var $$;
    _token = 37;  
    _tokenStart = _cursor;  
    switch (_ch == 91 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(91, '[');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect52);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_OPEN_PAREN() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[129] >= pos) {
      $$ = _getFromCache(129);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[129] = pos;
    }  
    _token = 38;    
    _tokenStart = _cursor;    
    switch (_ch == 40 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(40, '(');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect22);
    }
    if (_cacheable[129]) {
      _addToCache($$, pos, 129);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_ParameterDeclarationAbstract() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[84] >= pos) {
      $$ = _getFromCache(84);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[84] = pos;
    }  
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing0 = _testing;
            _testing = _cursor;
            $$ = _parse_Metadata();
            success = true; 
            _testing = testing0;
            if (!success) break;
            var seq = new List(4)..[0] = $$;
            var testing1 = _testing;
            _testing = _cursor;
            $$ = _parse_TypeQualifiers();
            success = true; 
            _testing = testing1;
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_Type();
            if (!success) break;
            seq[2] = $$;
            $$ = _parse_DeclaratorAbstract();
            if (!success) break;
            seq[3] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              final $start = startPos0;
              $$ = new ParameterDeclaration(declarator: $4, metadata: $1, qualifiers: $2, type: $3);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing2 = _testing;
            _testing = _cursor;
            $$ = _parse_Metadata();
            success = true; 
            _testing = testing2;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            var testing3 = _testing;
            _testing = _cursor;
            $$ = _parse_TypeQualifiers();
            success = true; 
            _testing = testing3;
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_Type();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos1;
              $$ = new ParameterDeclaration(declarator: new Declarator(), metadata: $1, qualifiers: $2, type: $3);
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect3);
    }
    if (_cacheable[84]) {
      _addToCache($$, pos, 84);
    }    
    return $$;
  }
  
  dynamic _parse_ParameterDeclarationNotAbstract() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[69] >= pos) {
      $$ = _getFromCache(69);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[69] = pos;
    }  
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing0 = _testing;
            _testing = _cursor;
            $$ = _parse_Metadata();
            success = true; 
            _testing = testing0;
            if (!success) break;
            var seq = new List(4)..[0] = $$;
            var testing1 = _testing;
            _testing = _cursor;
            $$ = _parse_TypeQualifiers();
            success = true; 
            _testing = testing1;
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_Type();
            if (!success) break;
            seq[2] = $$;
            $$ = _parse_FunctionDeclarator();
            if (!success) break;
            seq[3] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              final $start = startPos0;
              $$ = new ParameterDeclaration(declarator: $4, metadata: $1, qualifiers: $2,  type: $3);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing2 = _testing;
            _testing = _cursor;
            $$ = _parse_Metadata();
            success = true; 
            _testing = testing2;
            if (!success) break;
            var seq = new List(4)..[0] = $$;
            var testing3 = _testing;
            _testing = _cursor;
            $$ = _parse_TypeQualifiers();
            success = true; 
            _testing = testing3;
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_Type();
            if (!success) break;
            seq[2] = $$;
            $$ = _parse_FunctionPointerDeclarator();
            if (!success) break;
            seq[3] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              final $start = startPos1;
              $$ = new ParameterDeclaration(declarator: $4, metadata: $1, qualifiers: $2,  type: $3);
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          if (success) break;
          var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing4 = _testing;
            _testing = _cursor;
            $$ = _parse_Metadata();
            success = true; 
            _testing = testing4;
            if (!success) break;
            var seq = new List(4)..[0] = $$;
            var testing5 = _testing;
            _testing = _cursor;
            $$ = _parse_TypeQualifiers();
            success = true; 
            _testing = testing5;
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_Type();
            if (!success) break;
            seq[2] = $$;
            $$ = _parse_DeclaratorNotAbstract();
            if (!success) break;
            seq[3] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              final $start = startPos2;
              $$ = new ParameterDeclaration(declarator: $4, metadata: $1, qualifiers: $2,  type: $3);
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos2;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect3);
    }
    if (_cacheable[69]) {
      _addToCache($$, pos, 69);
    }    
    return $$;
  }
  
  dynamic _parse_PointerSpecifier() {
    var $$;
    switch (_ch == 42 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_ASTERISK();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_TypeQualifiers();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new PointerSpecifier(metadata: $2, qualifiers: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect43);
    }
    return $$;
  }
  
  dynamic _parse_PointerSpecifiers() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[64] >= pos) {
      $$ = _getFromCache(64);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[64] = pos;
    }  
    switch (_ch == 42 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var testing0;
        for (var first = true, reps; ;) {  
          $$ = _parse_PointerSpecifier();  
          if (success) {
           if (first) {      
              first = false;
              reps = [$$];
              testing0 = _testing;                  
            } else {
              reps.add($$);
            }
            _testing = _cursor;   
          } else {
            success = !first;
            if (success) {      
              _testing = testing0;
              $$ = reps;      
            } else $$ = null;
            break;
          }  
        }
        if (success) {    
          final $1 = $$;
          final $start = startPos0;
          $$ = new PointerSpecifiers(elements: $1);
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect43);
    }
    if (_cacheable[64]) {
      _addToCache($$, pos, 64);
    }    
    return $$;
  }
  
  dynamic _parse_RESERVED_WORD() {
    var $$;
    switch (_getState(_transitions42)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          switch (_getState(_transitions43)) {
            case 0:
              while (true) {
                var startPos1 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings8, '__attribute__');
                _startPos = startPos1;
                if (success) break;
                var startPos2 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings9, '_Bool');
                _startPos = startPos2;
                if (success) break;
                var startPos3 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings13, '_Complex');
                _startPos = startPos3;
                if (success) break;
                var startPos4 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings14, '_Imaginary');
                _startPos = startPos4;
                break;
              }
              break;
            case 1:
              var startPos5 = _startPos;
              _startPos = _cursor;
              $$ = _matchString(_strings15, 'auto');
              _startPos = startPos5;
              break;
            case 2:
              var startPos6 = _startPos;
              _startPos = _cursor;
              $$ = _matchString(_strings16, 'break');
              _startPos = startPos6;
              break;
            case 3:
              while (true) {
                var startPos7 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings17, 'case');
                _startPos = startPos7;
                if (success) break;
                var startPos8 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings18, 'char');
                _startPos = startPos8;
                if (success) break;
                var startPos9 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings10, 'const');
                _startPos = startPos9;
                if (success) break;
                var startPos10 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings19, 'continue');
                _startPos = startPos10;
                break;
              }
              break;
            case 4:
              while (true) {
                var startPos11 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings20, 'default');
                _startPos = startPos11;
                if (success) break;
                var startPos12 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings21, 'do');
                _startPos = startPos12;
                if (success) break;
                var startPos13 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings22, 'double');
                _startPos = startPos13;
                break;
              }
              break;
            case 5:
              while (true) {
                var startPos14 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings23, 'else');
                _startPos = startPos14;
                if (success) break;
                var startPos15 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings12, 'enum');
                _startPos = startPos15;
                if (success) break;
                var startPos16 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings24, 'extern');
                _startPos = startPos16;
                break;
              }
              break;
            case 6:
              while (true) {
                var startPos17 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings25, 'float');
                _startPos = startPos17;
                if (success) break;
                var startPos18 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings26, 'for');
                _startPos = startPos18;
                break;
              }
              break;
            case 7:
              var startPos19 = _startPos;
              _startPos = _cursor;
              $$ = _matchString(_strings27, 'goto');
              _startPos = startPos19;
              break;
            case 8:
              while (true) {
                var startPos20 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings28, 'if');
                _startPos = startPos20;
                if (success) break;
                var startPos21 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings29, 'inline');
                _startPos = startPos21;
                if (success) break;
                var startPos22 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings30, 'int');
                _startPos = startPos22;
                break;
              }
              break;
            case 9:
              var startPos23 = _startPos;
              _startPos = _cursor;
              $$ = _matchString(_strings31, 'long');
              _startPos = startPos23;
              break;
            case 10:
              while (true) {
                var startPos24 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings32, 'register');
                _startPos = startPos24;
                if (success) break;
                var startPos25 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings33, 'restrict');
                _startPos = startPos25;
                if (success) break;
                var startPos26 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings34, 'return');
                _startPos = startPos26;
                break;
              }
              break;
            case 11:
              while (true) {
                var startPos27 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings35, 'short');
                _startPos = startPos27;
                if (success) break;
                var startPos28 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings36, 'signed');
                _startPos = startPos28;
                if (success) break;
                var startPos29 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings37, 'sizeof');
                _startPos = startPos29;
                if (success) break;
                var startPos30 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings38, 'static');
                _startPos = startPos30;
                if (success) break;
                var startPos31 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings39, 'struct');
                _startPos = startPos31;
                if (success) break;
                var startPos32 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings40, 'switch');
                _startPos = startPos32;
                break;
              }
              break;
            case 12:
              var startPos33 = _startPos;
              _startPos = _cursor;
              $$ = _matchString(_strings41, 'typedef');
              _startPos = startPos33;
              break;
            case 13:
              while (true) {
                var startPos34 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings42, 'union');
                _startPos = startPos34;
                if (success) break;
                var startPos35 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings43, 'unsigned');
                _startPos = startPos35;
                break;
              }
              break;
            case 14:
              while (true) {
                var startPos36 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings44, 'void');
                _startPos = startPos36;
                if (success) break;
                var startPos37 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings45, 'volatile');
                _startPos = startPos37;
                break;
              }
              break;
            case 15:
              var startPos38 = _startPos;
              _startPos = _cursor;
              $$ = _matchString(_strings46, 'while');
              _startPos = startPos38;
              break;
            case 16:
            case 17:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(_expect67);
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect67);
    }
    return $$;
  }
  
  dynamic _parse_SEMICOLON() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[131] >= pos) {
      $$ = _getFromCache(131);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[131] = pos;
    }  
    _token = 39;    
    _tokenStart = _cursor;    
    switch (_ch == 59 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(59, ';');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect68);
    }
    if (_cacheable[131]) {
      _addToCache($$, pos, 131);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_SHORT() {
    var $$;
    switch (_ch == 115 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings35, 'short');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect80);
    }
    return $$;
  }
  
  dynamic _parse_SIGN() {
    var $$;
    switch (_getState(_transitions8)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchMapping(43, 45, _mapping9);
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_SIGNED() {
    var $$;
    switch (_ch == 115 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings36, 'signed');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect81);
    }
    return $$;
  }
  
  dynamic _parse_SIGNMODIFIER() {
    var $$;
    switch (_getState(_transitions29)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_SIGNED();
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        $$ = _parse_UNSIGNED();
        _startPos = startPos1;
        break;
      case 2:
        $$ = null;
        success = false;
        break;
      case 3:
        while (true) {
          var startPos2 = _startPos;
          _startPos = _cursor;
          $$ = _parse_SIGNED();
          _startPos = startPos2;
          if (success) break;
          var startPos3 = _startPos;
          _startPos = _cursor;
          $$ = _parse_UNSIGNED();
          _startPos = startPos3;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect82);
    }
    return $$;
  }
  
  dynamic _parse_SIMPLE_ESCAPE_SEQUENCE() {
    var $$;
    switch (_ch == 92 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(92, '\\');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _matchMapping(34, 118, _mapping10);
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _escape($1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_SIZEMODIFIER() {
    var $$;
    switch (_getState(_transitions53)) {
      case 0:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_LONG();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _parse_LONG();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          $$ = _parse_LONG();
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        var startPos2 = _startPos;
        _startPos = _cursor;
        $$ = _parse_SHORT();
        _startPos = startPos2;
        break;
      case 2:
        $$ = null;
        success = false;
        break;
      case 3:
        while (true) {
          var startPos3 = _startPos;
          _startPos = _cursor;
          $$ = _parse_SHORT();
          _startPos = startPos3;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos4 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_LONG();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _parse_LONG();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos4;
          if (success) break;
          var startPos5 = _startPos;
          _startPos = _cursor;
          $$ = _parse_LONG();
          _startPos = startPos5;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect83);
    }
    return $$;
  }
  
  dynamic _parse_SIZEOF() {
    var $$;
    _token = 40;  
    _tokenStart = _cursor;  
    switch (_ch == 115 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings37, 'sizeof');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect20);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_SPACE() {
    var $$;
    switch (_getState(_transitions51)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchMapping(9, 32, _mapping2);
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_SPACING() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var testing0 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          switch (_getState(_transitions52)) {
            case 0:
              var startPos1 = _startPos;
              _startPos = _cursor;
              $$ = _parse_SPACE();
              _startPos = startPos1;
              break;
            case 1:
            case 3:
              var startPos2 = _startPos;
              _startPos = _cursor;
              $$ = _parse_COMMENT();
              _startPos = startPos2;
              break;
            case 2:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(const [null]);
          }
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing0;
            $$ = reps;
            break; 
          }
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = true;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect1);
    }
    return $$;
  }
  
  dynamic _parse_STRUCT() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[133] >= pos) {
      $$ = _getFromCache(133);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[133] = pos;
    }  
    _token = 41;    
    _tokenStart = _cursor;    
    switch (_ch == 115 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings39, 'struct');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect69);
    }
    if (_cacheable[133]) {
      _addToCache($$, pos, 133);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_S_CHAR() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
            _testing = _inputLen + 1;
            $$ = _matchMapping(10, 92, _mapping8);
            _ch = ch1;
            _cursor = pos1; 
            _testing = testing0;
            $$ = null;
            success = !success;
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _matchAny();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos0;
              $$ = $2.codeUnitAt(0);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          $$ = _parse_ESCAPE_SEQUENCE();
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_S_CHAR_SEQUENCE() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var testing0;
        for (var first = true, reps; ;) {  
          $$ = _parse_S_CHAR();  
          if (success) {
           if (first) {      
              first = false;
              reps = [$$];
              testing0 = _testing;                  
            } else {
              reps.add($$);
            }
            _testing = _cursor;   
          } else {
            success = !first;
            if (success) {      
              _testing = testing0;
              $$ = reps;      
            } else $$ = null;
            break;
          }  
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_StructureDeclaration() {
    var $$;
    switch (_getState(_transitions33)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_TypeQualifiers();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_StructureType();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new StructureDeclaration(metadata: $1, qualifiers: $2, type: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect48);
    }
    return $$;
  }
  
  dynamic _parse_StructureMember() {
    var $$;
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_BitFieldParameterDeclaration();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _parse_SEMICOLON();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos0;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_ParameterDeclarationNotAbstract();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _parse_SEMICOLON();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos1;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          if (success) break;
          var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_ParameterDeclarationAbstract();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _parse_SEMICOLON();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos2;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos2;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect3);
    }
    return $$;
  }
  
  dynamic _parse_StructureMemberList() {
    var $$;
    switch (_ch == 123 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_OPEN_BRACE();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0;
          for (var first = true, reps; ;) {  
            $$ = _parse_StructureMember();  
            if (success) {
             if (first) {      
                first = false;
                reps = [$$];
                testing0 = _testing;                  
              } else {
                reps.add($$);
              }
              _testing = _cursor;   
            } else {
              success = !first;
              if (success) {      
                _testing = testing0;
                $$ = reps;      
              } else $$ = null;
              break;
            }  
          }
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_CLOSE_BRACE();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new MemberDeclarations(elements: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect49);
    }
    return $$;
  }
  
  dynamic _parse_StructureType() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[76] >= pos) {
      $$ = _getFromCache(76);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[76] = pos;
    }  
    switch (_getState(_transitions28)) {
      case 0:
      case 2:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_StructureTypeSpecifier();
            if (!success) break;
            var seq = new List(4)..[0] = $$;
            $$ = _parse_StructureMemberList();
            if (!success) break;
            seq[1] = $$;
            var testing0 = _testing;
            _testing = _cursor;
            $$ = _parse_Metadata();
            success = true; 
            _testing = testing0;
            if (!success) break;
            seq[2] = $$;
            var testing1 = _testing;
            _testing = _cursor;
            $$ = _parse_TypeQualifiers();
            success = true; 
            _testing = testing1;
            if (!success) break;
            seq[3] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              final $start = startPos0;
              $$ = new StructureTypeSpecification(metadata: $3, elaboratedType: $1, members: $2, qualifiers: $4);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_StructureTypeSpecifierWithTag();
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            var testing2 = _testing;
            _testing = _cursor;
            $$ = _parse_Metadata();
            success = true; 
            _testing = testing2;
            if (!success) break;
            seq[1] = $$;
            var testing3 = _testing;
            _testing = _cursor;
            $$ = _parse_TypeQualifiers();
            success = true; 
            _testing = testing3;
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos1;
              $$ = new StructureTypeSpecification(metadata: $2, elaboratedType: $1, qualifiers: $3);
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect48);
    }
    if (_cacheable[76]) {
      _addToCache($$, pos, 76);
    }    
    return $$;
  }
  
  dynamic _parse_StructureTypeSpecifier() {
    var $$;
    switch (_getState(_transitions28)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          switch (_getState(_transitions29)) {
            case 0:
              var startPos1 = _startPos;
              _startPos = _cursor;
              $$ = _parse_STRUCT();
              _startPos = startPos1;
              break;
            case 1:
              var startPos2 = _startPos;
              _startPos = _cursor;
              $$ = _parse_UNION();
              _startPos = startPos2;
              break;
            case 2:
              $$ = null;
              success = false;
              break;
            case 3:
              while (true) {
                var startPos3 = _startPos;
                _startPos = _cursor;
                $$ = _parse_STRUCT();
                _startPos = startPos3;
                if (success) break;
                var startPos4 = _startPos;
                _startPos = _cursor;
                $$ = _parse_UNION();
                _startPos = startPos4;
                break;
              }
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(_expect48);
          }
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_Identifier();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new ElaboratedTypeSpecifier(kind: $1, metadata: $2, tag: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect48);
    }
    return $$;
  }
  
  dynamic _parse_StructureTypeSpecifierWithTag() {
    var $$;
    switch (_getState(_transitions28)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          switch (_getState(_transitions29)) {
            case 0:
              var startPos1 = _startPos;
              _startPos = _cursor;
              $$ = _parse_STRUCT();
              _startPos = startPos1;
              break;
            case 1:
              var startPos2 = _startPos;
              _startPos = _cursor;
              $$ = _parse_UNION();
              _startPos = startPos2;
              break;
            case 2:
              $$ = null;
              success = false;
              break;
            case 3:
              while (true) {
                var startPos3 = _startPos;
                _startPos = _cursor;
                $$ = _parse_STRUCT();
                _startPos = startPos3;
                if (success) break;
                var startPos4 = _startPos;
                _startPos = _cursor;
                $$ = _parse_UNION();
                _startPos = startPos4;
                break;
              }
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(_expect48);
          }
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_Identifier();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new ElaboratedTypeSpecifier(kind: $1, metadata: $2, tag: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect48);
    }
    return $$;
  }
  
  dynamic _parse_TYPEDEF() {
    var $$;
    _token = 42;  
    _tokenStart = _cursor;  
    switch (_ch == 116 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings41, 'typedef');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect54);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_Type() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[70] >= pos) {
      $$ = _getFromCache(70);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[70] = pos;
    }  
    switch (_getState(_transitions24)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_DefinedType();
        _startPos = startPos0;
        break;
      case 1:
        while (true) {
          var startPos1 = _startPos;
          _startPos = _cursor;
          $$ = _parse_DefinedType();
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          $$ = _parse_BoolType();
          _startPos = startPos2;
          break;
        }
        break;
      case 2:
        while (true) {
          var startPos3 = _startPos;
          _startPos = _cursor;
          $$ = _parse_DefinedType();
          _startPos = startPos3;
          if (success) break;
          var startPos4 = _startPos;
          _startPos = _cursor;
          $$ = _parse_IntegerType();
          _startPos = startPos4;
          if (success) break;
          var startPos5 = _startPos;
          _startPos = _cursor;
          $$ = _parse_FloatType();
          _startPos = startPos5;
          if (success) break;
          var startPos6 = _startPos;
          _startPos = _cursor;
          $$ = _parse_VoidType();
          _startPos = startPos6;
          if (success) break;
          var startPos7 = _startPos;
          _startPos = _cursor;
          $$ = _parse_StructureType();
          _startPos = startPos7;
          if (success) break;
          var startPos8 = _startPos;
          _startPos = _cursor;
          $$ = _parse_EnumType();
          _startPos = startPos8;
          break;
        }
        break;
      case 3:
        $$ = null;
        success = false;
        break;
      case 4:
        while (true) {
          var startPos9 = _startPos;
          _startPos = _cursor;
          $$ = _parse_DefinedType();
          _startPos = startPos9;
          if (success) break;
          var startPos10 = _startPos;
          _startPos = _cursor;
          $$ = _parse_IntegerType();
          _startPos = startPos10;
          if (success) break;
          var startPos11 = _startPos;
          _startPos = _cursor;
          $$ = _parse_FloatType();
          _startPos = startPos11;
          if (success) break;
          var startPos12 = _startPos;
          _startPos = _cursor;
          $$ = _parse_VoidType();
          _startPos = startPos12;
          if (success) break;
          var startPos13 = _startPos;
          _startPos = _cursor;
          $$ = _parse_BoolType();
          _startPos = startPos13;
          if (success) break;
          var startPos14 = _startPos;
          _startPos = _cursor;
          $$ = _parse_StructureType();
          _startPos = startPos14;
          if (success) break;
          var startPos15 = _startPos;
          _startPos = _cursor;
          $$ = _parse_EnumType();
          _startPos = startPos15;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect3);
    }
    if (_cacheable[70]) {
      _addToCache($$, pos, 70);
    }    
    return $$;
  }
  
  dynamic _parse_TypeDeclarator() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[102] >= pos) {
      $$ = _getFromCache(102);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[102] = pos;
    }  
    switch (_getState(_transitions37)) {
      case 0:
        while (true) {
          var startPos0 = _startPos;
          _startPos = _cursor;
          $$ = _parse_FunctionPointerDeclarator();
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          $$ = _parse_TypedefFunctionDeclarator();
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
      case 4:
        while (true) {
          var startPos2 = _startPos;
          _startPos = _cursor;
          $$ = _parse_FunctionDeclarator();
          _startPos = startPos2;
          if (success) break;
          var startPos3 = _startPos;
          _startPos = _cursor;
          $$ = _parse_FunctionPointerDeclarator();
          _startPos = startPos3;
          if (success) break;
          var startPos4 = _startPos;
          _startPos = _cursor;
          $$ = _parse_DeclaratorNotAbstract();
          _startPos = startPos4;
          if (success) break;
          var startPos5 = _startPos;
          _startPos = _cursor;
          $$ = _parse_TypedefFunctionDeclarator();
          _startPos = startPos5;
          break;
        }
        break;
      case 2:
        while (true) {
          var startPos6 = _startPos;
          _startPos = _cursor;
          $$ = _parse_FunctionDeclarator();
          _startPos = startPos6;
          if (success) break;
          var startPos7 = _startPos;
          _startPos = _cursor;
          $$ = _parse_DeclaratorNotAbstract();
          _startPos = startPos7;
          break;
        }
        break;
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect55);
    }
    if (_cacheable[102]) {
      _addToCache($$, pos, 102);
    }    
    return $$;
  }
  
  dynamic _parse_TypeDeclaratorList() {
    var $$;
    switch (_getState(_transitions36)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_TypeDeclarator();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_COMMA();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_TypeDeclarator();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect6);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = new TypedefDeclarators(elements: _list($1, $2));
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect55);
    }
    return $$;
  }
  
  dynamic _parse_TypeQualifier() {
    var $$;
    switch (_getState(_transitions21)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          switch (_getState(_transitions22)) {
            case 0:
              var startPos1 = _startPos;
              _startPos = _cursor;
              $$ = _parse_CONST();
              _startPos = startPos1;
              break;
            case 1:
              var startPos2 = _startPos;
              _startPos = _cursor;
              $$ = _parse_VOLATILE();
              _startPos = startPos2;
              break;
            case 2:
              $$ = null;
              success = false;
              break;
            case 3:
              while (true) {
                var startPos3 = _startPos;
                _startPos = _cursor;
                $$ = _parse_CONST();
                _startPos = startPos3;
                if (success) break;
                var startPos4 = _startPos;
                _startPos = _cursor;
                $$ = _parse_VOLATILE();
                _startPos = startPos4;
                break;
              }
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(_expect42);
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = new TypeQualifier(identifier: $1, metadata: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect42);
    }
    return $$;
  }
  
  dynamic _parse_TypeQualifiers() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[61] >= pos) {
      $$ = _getFromCache(61);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[61] = pos;
    }  
    switch (_getState(_transitions21)) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var testing0;
        for (var first = true, reps; ;) {  
          $$ = _parse_TypeQualifier();  
          if (success) {
           if (first) {      
              first = false;
              reps = [$$];
              testing0 = _testing;                  
            } else {
              reps.add($$);
            }
            _testing = _cursor;   
          } else {
            success = !first;
            if (success) {      
              _testing = testing0;
              $$ = reps;      
            } else $$ = null;
            break;
          }  
        }
        if (success) {    
          final $1 = $$;
          final $start = startPos0;
          $$ = new TypeQualifiers(elements: $1);
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect42);
    }
    if (_cacheable[61]) {
      _addToCache($$, pos, 61);
    }    
    return $$;
  }
  
  dynamic _parse_TypedefDeclaration() {
    var $$;
    switch (_getState(_transitions35)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(5)..[0] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_TypeQualifiers();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_TypedefSpecifier();
          if (!success) break;
          seq[2] = $$;
          $$ = _parse_Type();
          if (!success) break;
          seq[3] = $$;
          $$ = _parse_TypeDeclaratorList();
          if (!success) break;
          seq[4] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $5 = seq[4];
            final $start = startPos0;
            $$ = new TypedefDeclaration(declarators: $5, metadata: $1, qualifiers: $2, type: $4, typedef: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect54);
    }
    return $$;
  }
  
  dynamic _parse_TypedefFunctionDeclarator() {
    var $$;
    switch (_getState(_transitions32)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_PointerSpecifiers();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(8)..[0] = $$;
          $$ = _parse_OPEN_PAREN();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_Identifier();
          if (!success) break;
          seq[2] = $$;
          $$ = _parse_CLOSE_PAREN();
          if (!success) break;
          seq[3] = $$;
          $$ = _parse_OPEN_PAREN();
          if (!success) break;
          seq[4] = $$;
          $$ = _parse_FunctionParameters();
          if (!success) break;
          seq[5] = $$;
          $$ = _parse_CLOSE_PAREN();
          if (!success) break;
          seq[6] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[7] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $5 = seq[4];
            final $6 = seq[5];
            final $7 = seq[6];
            final $8 = seq[7];
            final $start = startPos0;
            $$ = new Declarator(identifier: $3, metadata: $8, parameters: $6, pointers: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect22);
    }
    return $$;
  }
  
  dynamic _parse_TypedefSpecifier() {
    var $$;
    switch (_ch == 116 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_TYPEDEF();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_TypeQualifiers();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new TypedefSpecifier(metadata: $2, qualifiers: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect54);
    }
    return $$;
  }
  
  dynamic _parse_UNION() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[135] >= pos) {
      $$ = _getFromCache(135);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[135] = pos;
    }  
    _token = 43;    
    _tokenStart = _cursor;    
    switch (_ch == 117 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings42, 'union');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect70);
    }
    if (_cacheable[135]) {
      _addToCache($$, pos, 135);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_UNIVERSAL_CHARACTER_NAME() {
    var $$;
    switch (_ch == 92 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _matchString(_strings56, '\\U');
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_HEX_QUAD();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_HEX_QUAD();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos0;
              $$ = int.parse(_text(2), radix: 16);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _matchString(_strings57, '\\u');
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _parse_HEX_QUAD();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos1;
              $$ = int.parse(_text(2), radix: 16);
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect91);
    }
    return $$;
  }
  
  dynamic _parse_UNSIGNED() {
    var $$;
    switch (_ch == 117 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings43, 'unsigned');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect84);
    }
    return $$;
  }
  
  dynamic _parse_UNSIGNED_SUFFIX() {
    var $$;
    switch (_getState(_transitions65)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _matchMapping(85, 117, _mapping11);
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_VOID() {
    var $$;
    _token = 44;  
    _tokenStart = _cursor;  
    switch (_ch == 118 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings44, 'void');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect46);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_VOLATILE() {
    var $$;
    _token = 45;  
    _tokenStart = _cursor;  
    switch (_ch == 118 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings45, 'volatile');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENTIFIER_BASE1();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new Identifier(name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect71);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_VariableDeclaration() {
    var $$;
    switch (_getState(_transitions2)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_TypeQualifiers();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_Type();
          if (!success) break;
          seq[2] = $$;
          $$ = _parse_VariableDeclaratorList();
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $start = startPos0;
            $$ = new VariableDeclaration(declarators: $4, metadata: $1, qualifiers: $2, type: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect3);
    }
    return $$;
  }
  
  dynamic _parse_VariableDeclarator() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[106] >= pos) {
      $$ = _getFromCache(106);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[106] = pos;
    }  
    switch (_getState(_transitions23)) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_DeclaratorNotAbstract();
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect5);
    }
    if (_cacheable[106]) {
      _addToCache($$, pos, 106);
    }    
    return $$;
  }
  
  dynamic _parse_VariableDeclaratorList() {
    var $$;
    switch (_getState(_transitions23)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_VariableDeclarator();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_COMMA();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_VariableDeclarator();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect6);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = new VariableDeclarators(elements: _list($1, $2));
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect5);
    }
    return $$;
  }
  
  dynamic _parse_VoidType() {
    var $$;
    switch (_ch == 118 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_VOID();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_Metadata();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_TypeQualifiers();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new VoidTypeSpecification(identifier: _ident([$1]), metadata: $2, qualifiers: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect46);
    }
    return $$;
  }
  
  dynamic _parse_additive_expression() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[21] >= pos) {
      $$ = _getFromCache(21);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[21] = pos;
    }  
    switch (_getState(_transitions5)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_multiplicative_expression();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_getState(_transitions8)) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_additive_operator();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_multiplicative_expression();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect17);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _buildBinary($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect8);
    }
    if (_cacheable[21]) {
      _addToCache($$, pos, 21);
    }    
    return $$;
  }
  
  dynamic _parse_additive_operator() {
    var $$;
    _token = 6;  
    _tokenStart = _cursor;  
    switch (_getState(_transitions18)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_plus();
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        $$ = _parse_minus();
        _startPos = startPos1;
        break;
      case 2:
        $$ = null;
        success = false;
        break;
      case 3:
        while (true) {
          var startPos2 = _startPos;
          _startPos = _cursor;
          $$ = _parse_plus();
          _startPos = startPos2;
          if (success) break;
          var startPos3 = _startPos;
          _startPos = _cursor;
          $$ = _parse_minus();
          _startPos = startPos3;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect17);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_ampersand() {
    var $$;
    _token = 10;  
    _tokenStart = _cursor;  
    switch (_ch == 38 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(38, '&');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect13);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_ampersand2() {
    var $$;
    _token = 13;  
    _tokenStart = _cursor;  
    switch (_ch == 38 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings6, '&&');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect10);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_and_expression() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[17] >= pos) {
      $$ = _getFromCache(17);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[17] = pos;
    }  
    switch (_getState(_transitions5)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_equality_expression();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch == 38 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_ampersand();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_equality_expression();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect13);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _buildBinary($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect8);
    }
    if (_cacheable[17]) {
      _addToCache($$, pos, 17);
    }    
    return $$;
  }
  
  dynamic _parse_asterisk() {
    var $$;
    switch (_ch == 42 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(42, '*');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect29);
    }
    return $$;
  }
  
  dynamic _parse_character_constant_base() {
    var $$;
    switch (_getState(_transitions44)) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(39, '\'');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          $$ = _parse_C_CHAR();
          if (!success) break;
          seq[1] = $$;
          $$ = _matchChar(39, '\'');
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new CharacterLiteral(text: _text(), value: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings47, 'L\'');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          $$ = _parse_C_CHAR();
          if (!success) break;
          seq[1] = $$;
          $$ = _matchChar(39, '\'');
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos1;
            $$ = new CharacterLiteral(text: _text(), value: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch1;
          _cursor = pos1;
        }
        _startPos = startPos1;
        break;
      case 2:
        $$ = null;
        success = false;
        break;
      case 3:
        while (true) {
          var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _matchChar(39, '\'');
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_C_CHAR();
            if (!success) break;
            seq[1] = $$;
            $$ = _matchChar(39, '\'');
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos2;
              $$ = new CharacterLiteral(text: _text(), value: $2);
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos2;
          if (success) break;
          var ch3 = _ch, pos3 = _cursor, startPos3 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _matchString(_strings47, 'L\'');
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_C_CHAR();
            if (!success) break;
            seq[1] = $$;
            $$ = _matchChar(39, '\'');
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos3;
              $$ = new CharacterLiteral(text: _text(), value: $2);
            }
            break;
          }
          if (!success) {
            _ch = ch3;
            _cursor = pos3;
          }
          _startPos = startPos3;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect72);
    }
    return $$;
  }
  
  dynamic _parse_conditional_expression() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[12] >= pos) {
      $$ = _getFromCache(12);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[12] = pos;
    }  
    switch (_getState(_transitions5)) {
      case 0:
      case 2:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_logical_or_expression();
            if (!success) break;
            var seq = new List(5)..[0] = $$;
            $$ = _parse_question_mark();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_expression();
            if (!success) break;
            seq[2] = $$;
            $$ = _parse_semicolon();
            if (!success) break;
            seq[3] = $$;
            $$ = _parse_conditional_expression();
            if (!success) break;
            seq[4] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              final $5 = seq[4];
              final $start = startPos0;
              $$ = _conditional($1, $3, $5);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          $$ = _parse_logical_or_expression();
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect8);
    }
    if (_cacheable[12]) {
      _addToCache($$, pos, 12);
    }    
    return $$;
  }
  
  dynamic _parse_constant() {
    var $$;
    _token = 1;  
    _tokenStart = _cursor;  
    switch (_getState(_transitions12)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_constant_base();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect21);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_constant_base() {
    var $$;
    switch (_getState(_transitions13)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_character_constant_base();
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        $$ = _parse_floating_constant_base();
        _startPos = startPos1;
        break;
      case 2:
        while (true) {
          var startPos2 = _startPos;
          _startPos = _cursor;
          $$ = _parse_floating_constant_base();
          _startPos = startPos2;
          if (success) break;
          var startPos3 = _startPos;
          _startPos = _cursor;
          $$ = _parse_integer_constant_base();
          _startPos = startPos3;
          break;
        }
        break;
      case 3:
        $$ = null;
        success = false;
        break;
      case 4:
        while (true) {
          var startPos4 = _startPos;
          _startPos = _cursor;
          $$ = _parse_floating_constant_base();
          _startPos = startPos4;
          if (success) break;
          var startPos5 = _startPos;
          _startPos = _cursor;
          $$ = _parse_integer_constant_base();
          _startPos = startPos5;
          if (success) break;
          var startPos6 = _startPos;
          _startPos = _cursor;
          $$ = _parse_character_constant_base();
          _startPos = startPos6;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_constant_expression() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[11] >= pos) {
      $$ = _getFromCache(11);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[11] = pos;
    }  
    switch (_getState(_transitions4)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_conditional_expression();
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        $$ = _parse_string_literal();
        _startPos = startPos1;
        break;
      case 2:
      case 4:
        while (true) {
          var startPos2 = _startPos;
          _startPos = _cursor;
          $$ = _parse_conditional_expression();
          _startPos = startPos2;
          if (success) break;
          var startPos3 = _startPos;
          _startPos = _cursor;
          $$ = _parse_string_literal();
          _startPos = startPos3;
          break;
        }
        break;
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    if (_cacheable[11]) {
      _addToCache($$, pos, 11);
    }    
    return $$;
  }
  
  dynamic _parse_decimal_floating_constant() {
    var $$;
    switch (_getState(_transitions15)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_decimal_floating_constant_base();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_decimal_floating_constant_base() {
    var $$;
    switch (_getState(_transitions14)) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_FRACTIONAL_CONSTANT();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_EXPONENT_PART();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_FLOATING_SUFFIX();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = _floatLiteral(_text());
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 3:
        while (true) {
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_FRACTIONAL_CONSTANT();
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            var testing2 = _testing;
            _testing = _cursor;
            $$ = _parse_EXPONENT_PART();
            success = true; 
            _testing = testing2;
            if (!success) break;
            seq[1] = $$;
            var testing3 = _testing;
            _testing = _cursor;
            $$ = _parse_FLOATING_SUFFIX();
            success = true; 
            _testing = testing3;
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos1;
              $$ = _floatLiteral(_text());
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          if (success) break;
          var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_DIGIT_SEQUENCE();
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_EXPONENT_PART();
            if (!success) break;
            seq[1] = $$;
            var testing4 = _testing;
            _testing = _cursor;
            $$ = _parse_FLOATING_SUFFIX();
            success = true; 
            _testing = testing4;
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos2;
              $$ = _floatLiteral(_text());
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos2;
          break;
        }
        break;
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_eq() {
    var $$;
    switch (_ch == 61 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings4, '==');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect38);
    }
    return $$;
  }
  
  dynamic _parse_equality_expression() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[18] >= pos) {
      $$ = _getFromCache(18);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[18] = pos;
    }  
    switch (_getState(_transitions5)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_relational_expression();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_getState(_transitions6)) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_equality_operator();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_relational_expression();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect14);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _buildBinary($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect8);
    }
    if (_cacheable[18]) {
      _addToCache($$, pos, 18);
    }    
    return $$;
  }
  
  dynamic _parse_equality_operator() {
    var $$;
    _token = 7;  
    _tokenStart = _cursor;  
    switch (_getState(_transitions19)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_neq();
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        $$ = _parse_eq();
        _startPos = startPos1;
        break;
      case 2:
        $$ = null;
        success = false;
        break;
      case 3:
        while (true) {
          var startPos2 = _startPos;
          _startPos = _cursor;
          $$ = _parse_eq();
          _startPos = startPos2;
          if (success) break;
          var startPos3 = _startPos;
          _startPos = _cursor;
          $$ = _parse_neq();
          _startPos = startPos3;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect14);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_exclamation() {
    var $$;
    switch (_ch == 33 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(33, '!');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect28);
    }
    return $$;
  }
  
  dynamic _parse_exclusive_or_expression() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[16] >= pos) {
      $$ = _getFromCache(16);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[16] = pos;
    }  
    switch (_getState(_transitions5)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_and_expression();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch == 94 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_xor();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_and_expression();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect12);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _buildBinary($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect8);
    }
    if (_cacheable[16]) {
      _addToCache($$, pos, 16);
    }    
    return $$;
  }
  
  dynamic _parse_expression() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[26] >= pos) {
      $$ = _getFromCache(26);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[26] = pos;
    }  
    switch (_getState(_transitions5)) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_conditional_expression();
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect8);
    }
    if (_cacheable[26]) {
      _addToCache($$, pos, 26);
    }    
    return $$;
  }
  
  dynamic _parse_floating_constant_base() {
    var $$;
    switch (_getState(_transitions14)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_decimal_floating_constant();
        _startPos = startPos0;
        break;
      case 1:
      case 3:
        while (true) {
          var startPos1 = _startPos;
          _startPos = _cursor;
          $$ = _parse_decimal_floating_constant();
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          $$ = _parse_hexadecimal_floating_constant();
          _startPos = startPos2;
          break;
        }
        break;
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_gt() {
    var $$;
    switch (_ch == 62 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(62, '>');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect35);
    }
    return $$;
  }
  
  dynamic _parse_gte() {
    var $$;
    switch (_ch == 62 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings3, '>=');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect37);
    }
    return $$;
  }
  
  dynamic _parse_hexadecimal_floating_constant() {
    var $$;
    switch (_ch == 48 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_HEXADECIMAL_PREFIX();
            if (!success) break;
            var seq = new List(4)..[0] = $$;
            $$ = _parse_HEXADECIMAL_FRACTIONAL_CONSTANT();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_BINARY_EXPONENT_PART();
            if (!success) break;
            seq[2] = $$;
            var testing0 = _testing;
            _testing = _cursor;
            $$ = _parse_FLOATING_SUFFIX();
            success = true; 
            _testing = testing0;
            if (!success) break;
            seq[3] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              final $start = startPos0;
              $$ = _floatLiteral(_text());
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_HEXADECIMAL_PREFIX();
            if (!success) break;
            var seq = new List(4)..[0] = $$;
            $$ = _parse_HEXADECIMAL_DIGIT_SEQUENCE();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_BINARY_EXPONENT_PART();
            if (!success) break;
            seq[2] = $$;
            var testing1 = _testing;
            _testing = _cursor;
            $$ = _parse_FLOATING_SUFFIX();
            success = true; 
            _testing = testing1;
            if (!success) break;
            seq[3] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              final $start = startPos1;
              $$ = _floatLiteral(_text());
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect73);
    }
    return $$;
  }
  
  dynamic _parse_inclusive_or_expression() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[15] >= pos) {
      $$ = _getFromCache(15);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[15] = pos;
    }  
    switch (_getState(_transitions5)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_exclusive_or_expression();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch == 124 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_vertical_line();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_exclusive_or_expression();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect11);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _buildBinary($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect8);
    }
    if (_cacheable[15]) {
      _addToCache($$, pos, 15);
    }    
    return $$;
  }
  
  dynamic _parse_integer_constant() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[82] >= pos) {
      $$ = _getFromCache(82);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[82] = pos;
    }  
    _token = 17;    
    _tokenStart = _cursor;    
    switch (_ch >= 48 && _ch <= 57 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_integer_constant_base();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect50);
    }
    if (_cacheable[82]) {
      _addToCache($$, pos, 82);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_integer_constant_base() {
    var $$;
    switch (_getState(_transitions45)) {
      case 0:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_HEXADECIMAL_CONSTANT();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing0 = _testing;
            _testing = _cursor;
            $$ = _parse_INTEGER_SUFFIX();
            success = true; 
            _testing = testing0;
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos0;
              $$ = new IntegerLiteral(text: _text(), value: $1);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_OCTAL_CONSTANT();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing1 = _testing;
            _testing = _cursor;
            $$ = _parse_INTEGER_SUFFIX();
            success = true; 
            _testing = testing1;
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos1;
              $$ = new IntegerLiteral(text: _text(), value: $1);
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_DECIMAL_CONSTANT();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing2 = _testing;
          _testing = _cursor;
          $$ = _parse_INTEGER_SUFFIX();
          success = true; 
          _testing = testing2;
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos2;
            $$ = new IntegerLiteral(text: _text(), value: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch2;
          _cursor = pos2;
        }
        _startPos = startPos2;
        break;
      case 2:
        $$ = null;
        success = false;
        break;
      case 3:
        while (true) {
          var ch3 = _ch, pos3 = _cursor, startPos3 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_DECIMAL_CONSTANT();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing3 = _testing;
            _testing = _cursor;
            $$ = _parse_INTEGER_SUFFIX();
            success = true; 
            _testing = testing3;
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos3;
              $$ = new IntegerLiteral(text: _text(), value: $1);
            }
            break;
          }
          if (!success) {
            _ch = ch3;
            _cursor = pos3;
          }
          _startPos = startPos3;
          if (success) break;
          var ch4 = _ch, pos4 = _cursor, startPos4 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_HEXADECIMAL_CONSTANT();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing4 = _testing;
            _testing = _cursor;
            $$ = _parse_INTEGER_SUFFIX();
            success = true; 
            _testing = testing4;
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos4;
              $$ = new IntegerLiteral(text: _text(), value: $1);
            }
            break;
          }
          if (!success) {
            _ch = ch4;
            _cursor = pos4;
          }
          _startPos = startPos4;
          if (success) break;
          var ch5 = _ch, pos5 = _cursor, startPos5 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_OCTAL_CONSTANT();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing5 = _testing;
            _testing = _cursor;
            $$ = _parse_INTEGER_SUFFIX();
            success = true; 
            _testing = testing5;
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos5;
              $$ = new IntegerLiteral(text: _text(), value: $1);
            }
            break;
          }
          if (!success) {
            _ch = ch5;
            _cursor = pos5;
          }
          _startPos = startPos5;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(const [null]);
    }
    return $$;
  }
  
  dynamic _parse_logical_and_expression() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[14] >= pos) {
      $$ = _getFromCache(14);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[14] = pos;
    }  
    switch (_getState(_transitions5)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_inclusive_or_expression();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch == 38 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_ampersand2();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_inclusive_or_expression();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect10);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _buildBinary($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect8);
    }
    if (_cacheable[14]) {
      _addToCache($$, pos, 14);
    }    
    return $$;
  }
  
  dynamic _parse_logical_or_expression() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[13] >= pos) {
      $$ = _getFromCache(13);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[13] = pos;
    }  
    switch (_getState(_transitions5)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_logical_and_expression();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch == 124 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_vertical_line2();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_logical_and_expression();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect9);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _buildBinary($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect8);
    }
    if (_cacheable[13]) {
      _addToCache($$, pos, 13);
    }    
    return $$;
  }
  
  dynamic _parse_lparen() {
    var $$;
    _token = 2;  
    _tokenStart = _cursor;  
    switch (_ch == 40 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(40, '(');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect22);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_lsh() {
    var $$;
    switch (_ch == 60 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings0, '<<');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect32);
    }
    return $$;
  }
  
  dynamic _parse_lt() {
    var $$;
    switch (_ch == 60 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(60, '<');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect34);
    }
    return $$;
  }
  
  dynamic _parse_lte() {
    var $$;
    switch (_ch == 60 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings2, '<=');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect36);
    }
    return $$;
  }
  
  dynamic _parse_minus() {
    var $$;
    switch (_ch == 45 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(45, '-');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect26);
    }
    return $$;
  }
  
  dynamic _parse_multiplicative_expression() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[22] >= pos) {
      $$ = _getFromCache(22);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[22] = pos;
    }  
    switch (_getState(_transitions5)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_unary_expression();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_getState(_transitions9)) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_multiplicative_operator();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_unary_expression();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect18);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _buildBinary($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect8);
    }
    if (_cacheable[22]) {
      _addToCache($$, pos, 22);
    }    
    return $$;
  }
  
  dynamic _parse_multiplicative_operator() {
    var $$;
    _token = 5;  
    _tokenStart = _cursor;  
    switch (_getState(_transitions17)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_percent();
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        $$ = _parse_asterisk();
        _startPos = startPos1;
        break;
      case 2:
        var startPos2 = _startPos;
        _startPos = _cursor;
        $$ = _parse_slash();
        _startPos = startPos2;
        break;
      case 3:
        $$ = null;
        success = false;
        break;
      case 4:
        while (true) {
          var startPos3 = _startPos;
          _startPos = _cursor;
          $$ = _parse_asterisk();
          _startPos = startPos3;
          if (success) break;
          var startPos4 = _startPos;
          _startPos = _cursor;
          $$ = _parse_slash();
          _startPos = startPos4;
          if (success) break;
          var startPos5 = _startPos;
          _startPos = _cursor;
          $$ = _parse_percent();
          _startPos = startPos5;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect18);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_neq() {
    var $$;
    switch (_ch == 33 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings5, '!=');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect39);
    }
    return $$;
  }
  
  dynamic _parse_percent() {
    var $$;
    switch (_ch == 37 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(37, '%');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect31);
    }
    return $$;
  }
  
  dynamic _parse_plus() {
    var $$;
    switch (_ch == 43 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(43, '+');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect25);
    }
    return $$;
  }
  
  dynamic _parse_primary_expression() {
    var $$;
    switch (_getState(_transitions11)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_constant();
        _startPos = startPos0;
        break;
      case 1:
        var ch0 = _ch, pos0 = _cursor, startPos1 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_lparen();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          $$ = _parse_expression();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_rparen();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos1;
            $$ = new ParenthesisExpression(expression: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos1;
        break;
      case 2:
        while (true) {
          var startPos2 = _startPos;
          _startPos = _cursor;
          $$ = _parse_Identifier();
          _startPos = startPos2;
          if (success) break;
          var startPos3 = _startPos;
          _startPos = _cursor;
          $$ = _parse_constant();
          _startPos = startPos3;
          break;
        }
        break;
      case 3:
        var startPos4 = _startPos;
        _startPos = _cursor;
        $$ = _parse_Identifier();
        _startPos = startPos4;
        break;
      case 4:
        while (true) {
          var startPos5 = _startPos;
          _startPos = _cursor;
          $$ = _parse_sizeof();
          _startPos = startPos5;
          if (success) break;
          var startPos6 = _startPos;
          _startPos = _cursor;
          $$ = _parse_Identifier();
          _startPos = startPos6;
          break;
        }
        break;
      case 5:
        $$ = null;
        success = false;
        break;
      case 6:
        while (true) {
          var startPos7 = _startPos;
          _startPos = _cursor;
          $$ = _parse_sizeof();
          _startPos = startPos7;
          if (success) break;
          var startPos8 = _startPos;
          _startPos = _cursor;
          $$ = _parse_Identifier();
          _startPos = startPos8;
          if (success) break;
          var startPos9 = _startPos;
          _startPos = _cursor;
          $$ = _parse_constant();
          _startPos = startPos9;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos10 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_lparen();
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            $$ = _parse_expression();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_rparen();
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos10;
              $$ = new ParenthesisExpression(expression: $2);
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos10;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect19);
    }
    return $$;
  }
  
  dynamic _parse_question_mark() {
    var $$;
    _token = 15;  
    _tokenStart = _cursor;  
    switch (_ch == 63 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(63, '?');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect40);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_relational_expression() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[19] >= pos) {
      $$ = _getFromCache(19);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[19] = pos;
    }  
    switch (_getState(_transitions5)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_shift_expression();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_getState(_transitions7)) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_relational_operator();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_shift_expression();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect15);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _buildBinary($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect8);
    }
    if (_cacheable[19]) {
      _addToCache($$, pos, 19);
    }    
    return $$;
  }
  
  dynamic _parse_relational_operator() {
    var $$;
    _token = 9;  
    _tokenStart = _cursor;  
    switch (_getState(_transitions20)) {
      case 0:
        while (true) {
          var startPos0 = _startPos;
          _startPos = _cursor;
          $$ = _parse_lt();
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          $$ = _parse_lte();
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        while (true) {
          var startPos2 = _startPos;
          _startPos = _cursor;
          $$ = _parse_gt();
          _startPos = startPos2;
          if (success) break;
          var startPos3 = _startPos;
          _startPos = _cursor;
          $$ = _parse_gte();
          _startPos = startPos3;
          break;
        }
        break;
      case 2:
        $$ = null;
        success = false;
        break;
      case 3:
        while (true) {
          var startPos4 = _startPos;
          _startPos = _cursor;
          $$ = _parse_lt();
          _startPos = startPos4;
          if (success) break;
          var startPos5 = _startPos;
          _startPos = _cursor;
          $$ = _parse_gt();
          _startPos = startPos5;
          if (success) break;
          var startPos6 = _startPos;
          _startPos = _cursor;
          $$ = _parse_lte();
          _startPos = startPos6;
          if (success) break;
          var startPos7 = _startPos;
          _startPos = _cursor;
          $$ = _parse_gte();
          _startPos = startPos7;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect15);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_rparen() {
    var $$;
    _token = 3;  
    _tokenStart = _cursor;  
    switch (_ch == 41 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(41, ')');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect23);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_rsh() {
    var $$;
    switch (_ch == 62 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings1, '>>');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect33);
    }
    return $$;
  }
  
  dynamic _parse_semicolon() {
    var $$;
    _token = 16;  
    _tokenStart = _cursor;  
    switch (_ch == 58 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(58, ':');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect41);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_shift_expression() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[20] >= pos) {
      $$ = _getFromCache(20);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[20] = pos;
    }  
    switch (_getState(_transitions5)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_additive_expression();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_getState(_transitions7)) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_shift_operator();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_additive_expression();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect16);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _buildBinary($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect8);
    }
    if (_cacheable[20]) {
      _addToCache($$, pos, 20);
    }    
    return $$;
  }
  
  dynamic _parse_shift_operator() {
    var $$;
    _token = 8;  
    _tokenStart = _cursor;  
    switch (_getState(_transitions20)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_lsh();
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        $$ = _parse_rsh();
        _startPos = startPos1;
        break;
      case 2:
        $$ = null;
        success = false;
        break;
      case 3:
        while (true) {
          var startPos2 = _startPos;
          _startPos = _cursor;
          $$ = _parse_lsh();
          _startPos = startPos2;
          if (success) break;
          var startPos3 = _startPos;
          _startPos = _cursor;
          $$ = _parse_rsh();
          _startPos = startPos3;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect16);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_sizeof() {
    var $$;
    switch (_ch == 115 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_SIZEOF();
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          $$ = _parse_OPEN_PAREN();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_Type();
          if (!success) break;
          seq[2] = $$;
          $$ = _parse_CLOSE_PAREN();
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $start = startPos0;
            $$ = new SizeofExpression(type: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect20);
    }
    return $$;
  }
  
  dynamic _parse_slash() {
    var $$;
    switch (_ch == 47 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(47, '/');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect30);
    }
    return $$;
  }
  
  dynamic _parse_spaces() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var testing0 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          $$ = _matchMapping(9, 32, _mapping0);
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing0;
            $$ = reps;
            break; 
          }
        }
        if (success) {    
          final $1 = $$;
          final $start = startPos0;
          $$ = _text();
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = true;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect1);
    }
    return $$;
  }
  
  dynamic _parse_string_literal() {
    var $$;
    _token = 18;  
    _tokenStart = _cursor;  
    switch (_getState(_transitions38)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_string_literal2();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect56);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_string_literal2() {
    var $$;
    switch (_getState(_transitions38)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_string_literal_base();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_spaces();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_string_literal_base();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect57);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = new StringLiteral(text: _text(), value: _strValue(_list($1, $2)));
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect57);
    }
    return $$;
  }
  
  dynamic _parse_string_literal_base() {
    var $$;
    switch (_getState(_transitions46)) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(34, '\"');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_S_CHAR_SEQUENCE();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          $$ = _matchChar(34, '\"');
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $2;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings48, 'L\"');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_S_CHAR_SEQUENCE();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[1] = $$;
          $$ = _matchChar(34, '\"');
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos1;
            $$ = $2;
          }
          break;
        }
        if (!success) {
          _ch = ch1;
          _cursor = pos1;
        }
        _startPos = startPos1;
        break;
      case 2:
        $$ = null;
        success = false;
        break;
      case 3:
        while (true) {
          var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _matchChar(34, '\"');
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            var testing2 = _testing;
            _testing = _cursor;
            $$ = _parse_S_CHAR_SEQUENCE();
            success = true; 
            _testing = testing2;
            if (!success) break;
            seq[1] = $$;
            $$ = _matchChar(34, '\"');
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos2;
              $$ = $2;
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos2;
          if (success) break;
          var ch3 = _ch, pos3 = _cursor, startPos3 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _matchString(_strings48, 'L\"');
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            var testing3 = _testing;
            _testing = _cursor;
            $$ = _parse_S_CHAR_SEQUENCE();
            success = true; 
            _testing = testing3;
            if (!success) break;
            seq[1] = $$;
            $$ = _matchChar(34, '\"');
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $start = startPos3;
              $$ = $2;
            }
            break;
          }
          if (!success) {
            _ch = ch3;
            _cursor = pos3;
          }
          _startPos = startPos3;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect57);
    }
    return $$;
  }
  
  dynamic _parse_tilde() {
    var $$;
    switch (_ch == 126 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(126, '~');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect27);
    }
    return $$;
  }
  
  dynamic _parse_unary_expression() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[23] >= pos) {
      $$ = _getFromCache(23);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[23] = pos;
    }  
    switch (_getState(_transitions10)) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_unary_operator();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_unary_expression();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _unary($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        $$ = _parse_primary_expression();
        _startPos = startPos1;
        break;
      case 2:
        $$ = null;
        success = false;
        break;
      case 3:
        while (true) {
          var startPos2 = _startPos;
          _startPos = _cursor;
          $$ = _parse_primary_expression();
          _startPos = startPos2;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos3 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_unary_operator();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _parse_unary_expression();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos3;
              $$ = _unary($1, $2);
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos3;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect8);
    }
    if (_cacheable[23]) {
      _addToCache($$, pos, 23);
    }    
    return $$;
  }
  
  dynamic _parse_unary_operator() {
    var $$;
    _token = 4;  
    _tokenStart = _cursor;  
    switch (_getState(_transitions16)) {
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_exclamation();
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        $$ = _parse_plus();
        _startPos = startPos1;
        break;
      case 2:
        var startPos2 = _startPos;
        _startPos = _cursor;
        $$ = _parse_minus();
        _startPos = startPos2;
        break;
      case 3:
        var startPos3 = _startPos;
        _startPos = _cursor;
        $$ = _parse_tilde();
        _startPos = startPos3;
        break;
      case 4:
        $$ = null;
        success = false;
        break;
      case 5:
        while (true) {
          var startPos4 = _startPos;
          _startPos = _cursor;
          $$ = _parse_plus();
          _startPos = startPos4;
          if (success) break;
          var startPos5 = _startPos;
          _startPos = _cursor;
          $$ = _parse_minus();
          _startPos = startPos5;
          if (success) break;
          var startPos6 = _startPos;
          _startPos = _cursor;
          $$ = _parse_tilde();
          _startPos = startPos6;
          if (success) break;
          var startPos7 = _startPos;
          _startPos = _cursor;
          $$ = _parse_exclamation();
          _startPos = startPos7;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect24);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_vertical_line() {
    var $$;
    _token = 12;  
    _tokenStart = _cursor;  
    switch (_ch == 124 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(124, '|');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect11);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_vertical_line2() {
    var $$;
    _token = 14;  
    _tokenStart = _cursor;  
    switch (_ch == 124 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings7, '||');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect9);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_xor() {
    var $$;
    _token = 11;  
    _tokenStart = _cursor;  
    switch (_ch == 94 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchChar(94, '^');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_spaces();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect12);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  String _text([int offset = 0]) {
    return new String.fromCharCodes(_input.sublist(_startPos + offset, _cursor));
  }
  
  int _toCodePoint(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      throw new StateError("An empty string contains no elements.");
    }
  
    var start = string.codeUnitAt(0);
    if (length == 1) {
      return start;
    }
  
    if ((start & 0xFC00) == 0xD800) {
      var end = string.codeUnitAt(1);
      if ((end & 0xFC00) == 0xDC00) {
        return (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
      }
    }
  
    return start;
  }
  
  List<int> _toCodePoints(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      return const <int>[];
    }
  
    var codePoints = <int>[];
    codePoints.length = length;
    var i = 0;
    var pos = 0;
    for ( ; i < length; pos++) {
      var start = string.codeUnitAt(i);
      i++;
      if ((start & 0xFC00) == 0xD800 && i < length) {
        var end = string.codeUnitAt(i);
        if ((end & 0xFC00) == 0xDC00) {
          codePoints[pos] = (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
          i++;
        } else {
          codePoints[pos] = start;
        }
      } else {
        codePoints[pos] = start;
      }
    }
  
    codePoints.length = pos;
    return codePoints;
  }
  
  static List<bool> _unmap(List<int> mapping) {
    var length = mapping.length;
    var result = new List<bool>(length * 31);
    var offset = 0;
    for (var i = 0; i < length; i++) {
      var v = mapping[i];
      for (var j = 0; j < 31; j++) {
        result[offset++] = v & (1 << j) == 0 ? false : true;
      }
    }
    return result;
  }
  
  List<CParserError> errors() {
    if (success) {
      return <CParserError>[];
    }
  
    String escape(int c) {
      switch (c) {
        case 10:
          return r"\n";
        case 13:
          return r"\r";
        case 09:
          return r"\t";
        case -1:
          return "";
      }
      return new String.fromCharCode(c);
    } 
    
    String getc(int position) {  
      if (position < _inputLen) {
        return "'${escape(_input[position])}'";      
      }       
      return "end of file";
    }
  
    var errors = <CParserError>[];
    if (_failurePos >= _cursor) {
      var set = new Set<CParserError>();
      set.addAll(_errors);
      for (var error in set) {
        if (error.position >= _failurePos) {
          errors.add(error);
        }
      }
      var names = new Set<String>();  
      names.addAll(_expected);
      if (names.contains(null)) {
        var string = getc(_failurePos);
        var message = "Unexpected $string";
        var error = new CParserError(CParserError.UNEXPECTED, _failurePos, _failurePos, message);
        errors.add(error);
      } else {      
        var found = getc(_failurePos);      
        var list = names.toList();
        list.sort();
        var message = "Expected ${list.join(", ")} but found $found";
        var error = new CParserError(CParserError.EXPECTED, _failurePos, _failurePos, message);
        errors.add(error);
      }        
    }
    errors.sort((a, b) => a.position.compareTo(b.position));
    return errors;  
  }
  
  dynamic parse_Declarations() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_LEADING_SPACES();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_DeclarationList();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_EOF();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $2;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect0);
    }
    return $$;
  }
  
  void reset(int pos) {
    if (pos == null) {
      throw new ArgumentError('pos: $pos');
    }
    if (pos < 0 || pos > _inputLen) {
      throw new RangeError('pos');
    }      
    _cursor = pos;
    _cache = new List<Map<int, List>>(194);
    _cachePos = new List<int>.filled(194, -1);  
    _cacheable = new List<bool>.filled(194, false);
    _ch = -1;
    _errors = <CParserError>[];   
    _expected = <String>[];
    _failurePos = -1;
    _startPos = pos;        
    _testing = -1;
    _token = null;
    _tokenStart = null;  
    if (_cursor < _inputLen) {
      _ch = _input[_cursor];
    }
    success = true;    
  }
  
}

class CParserError {
  static const int EXPECTED = 1;    
      
  static const int MALFORMED = 2;    
      
  static const int MISSING = 3;    
      
  static const int UNEXPECTED = 4;    
      
  static const int UNTERMINATED = 5;    
      
  final int hashCode = 0;
  
  final String message;
  
  final int position;
  
  final int start;
  
  final int type;
  
  CParserError(this.type, this.position, this.start, this.message);
  
  bool operator ==(other) {
    if (identical(this, other)) return true;
    if (other is CParserError) {
      return type == other.type && position == other.position &&
      start == other.start && message == other.message;  
    }
    return false;
  }
  
}

