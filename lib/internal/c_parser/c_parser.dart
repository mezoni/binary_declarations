// This code was generated by a tool.
// Processing tool available at https://github.com/mezoni/peg

import "package:binary_declarations/binary_declarations.dart";

ArrayTypeSpecification _createArray(TypeSpecification type, ArrayDimensions dimensions, Metadata metadata) {  
  return new ArrayTypeSpecification(dimensions: dimensions, metadata: metadata, type: type);
}

String _createInt(List parts) {
  var list = [];
  for (var part in parts) {
    if (part != null) {
      list.add(part);
    }
  }

  return list.join(" ");
}

List _createParameters(List parameters, ParameterDeclaration vaList) {    
  var list = <ParameterDeclaration>[];
  list.addAll(parameters);
  if (vaList != null) {
    list.add(vaList);  
  }
  
  return list;
}

PointerTypeSpecification _createPointerType(TypeSpecification type, List stars, Metadata metadata) {    
  for (var star in stars) {
    type = new PointerTypeSpecification(metadata: metadata, type: type);
  }
  
  return type;
}

int _escape(String ch) {
  switch(ch) {
    case "a":
      return 0x07;
    case "b":
      return 0x08;
    case "f":
      return 0x0c;
    case "n":
      return 0x0a;
    case "r":
      return 0x0d;
    case "t":
      return 0x09;
    case "v":
      return 0x0b;
    case "\'":
      return 0x27;
    case "\"":
      return 0x22;
    case "\?":
      return 0x3f;
    default:
      throw new StateError("Unknown escape sequence: \\$ch");  
  }
}


int _parseInt(String sign, String digits, int radix) {
  if (sign == null) {
    sign = "";
  }
  return int.parse("$sign$digits", radix: radix);
}

class CParser {
  static final List<String> _ascii = new List<String>.generate(128, (c) => new String.fromCharCode(c));
  
  static final List<String> _expect0 = <String>["EOF"];
  
  static final List<String> _expect1 = <String>[];
  
  static final List<String> _expect10 = <String>["\'double\'", "\'float\'"];
  
  static final List<String> _expect11 = <String>["\'struct\'", "\'union\'"];
  
  static final List<String> _expect12 = <String>["\'enum\'"];
  
  static final List<String> _expect13 = <String>["\'[\'"];
  
  static final List<String> _expect14 = <String>["POSITIVE_NUMBER"];
  
  static final List<String> _expect15 = <String>["IDENTIFIER"];
  
  static final List<String> _expect16 = <String>["\'(\'"];
  
  static final List<String> _expect17 = <String>["\'typedef\'"];
  
  static final List<String> _expect18 = <String>["\'{\'"];
  
  static final List<String> _expect19 = <String>["\'enum\'", "\'struct\'", "\'union\'"];
  
  static final List<String> _expect2 = <String>["\';\'", "\'char\'", "\'double\'", "\'enum\'", "\'float\'", "\'int\'", "\'long\'", "\'short\'", "\'struct\'", "\'typedef\'", "\'union\'", "\'void\'", "IDENTIFIER", "SIGNEDNESS"];
  
  static final List<String> _expect20 = <String>["\'*\'", "IDENTIFIER"];
  
  static final List<String> _expect21 = <String>["\'*\'"];
  
  static final List<String> _expect22 = <String>["\'=\'"];
  
  static final List<String> _expect23 = <String>["\'char\'"];
  
  static final List<String> _expect24 = <String>["\'}\'"];
  
  static final List<String> _expect25 = <String>["\']\'"];
  
  static final List<String> _expect26 = <String>["\')\'"];
  
  static final List<String> _expect27 = <String>["\':\'"];
  
  static final List<String> _expect28 = <String>["\'double\'"];
  
  static final List<String> _expect29 = <String>["\'float\'"];
  
  static final List<String> _expect3 = <String>["\'char\'", "\'double\'", "\'enum\'", "\'float\'", "\'int\'", "\'long\'", "\'short\'", "\'struct\'", "\'union\'", "\'void\'", "IDENTIFIER", "SIGNEDNESS"];
  
  static final List<String> _expect30 = <String>["\'int\'"];
  
  static final List<String> _expect31 = <String>["LEADING_SPACES"];
  
  static final List<String> _expect32 = <String>["\'long\'"];
  
  static final List<String> _expect33 = <String>["NUMBER"];
  
  static final List<String> _expect34 = <String>["-"];
  
  static final List<String> _expect35 = <String>["\';\'"];
  
  static final List<String> _expect36 = <String>["\'short\'"];
  
  static final List<String> _expect37 = <String>["SIGNEDNESS"];
  
  static final List<String> _expect38 = <String>["STRING"];
  
  static final List<String> _expect39 = <String>["\'struct\'"];
  
  static final List<String> _expect4 = <String>["\'__attribute__\'"];
  
  static final List<String> _expect40 = <String>["TYPE_QUALIFIERS"];
  
  static final List<String> _expect41 = <String>["\'union\'"];
  
  static final List<String> _expect42 = <String>["\'...\'"];
  
  static final List<String> _expect43 = <String>["\'void\'"];
  
  static final List<String> _expect44 = <String>["ZERO_NUMBER"];
  
  static final List<String> _expect45 = <String>["//"];
  
  static final List<String> _expect46 = <String>["const"];
  
  static final List<String> _expect47 = <String>["..."];
  
  static final List<String> _expect48 = <String>["\\x"];
  
  static final List<String> _expect49 = <String>["long"];
  
  static final List<String> _expect5 = <String>["IDENT"];
  
  static final List<String> _expect50 = <String>["\\"];
  
  static final List<String> _expect51 = <String>["+"];
  
  static final List<String> _expect52 = <String>["_Bool", "_Complex", "_Imaginary", "auto", "break", "case", "char", "const", "continue", "default", "do", "double", "else", "enum", "extern", "float", "for", "goto", "if", "inline", "int", "long", "register", "restrict", "return", "short", "signed", "sizeof", "static", "struct", "switch", "typedef", "union", "unsigned", "void", "volatile", "while"];
  
  static final List<String> _expect53 = <String>["+", "-"];
  
  static final List<String> _expect54 = <String>["signed"];
  
  static final List<String> _expect55 = <String>["\\U", "\\u"];
  
  static final List<String> _expect56 = <String>["unsigned"];
  
  static final List<String> _expect6 = <String>["\',\'"];
  
  static final List<String> _expect7 = <String>["NUMBER", "STRING"];
  
  static final List<String> _expect8 = <String>["\'long\'", "\'short\'"];
  
  static final List<String> _expect9 = <String>["\'char\'", "\'int\'", "\'long\'", "\'short\'"];
  
  static final List<bool> _lookahead = _unmap([0x7ffe03ff, 0x7ffd0fff, 0x7fffffff, 0x7fffffff, 0x3ff28061, 0x60000, 0x60000000, 0x13fc12fe, 0x30000, 0x80]);
  
  // '\n', '\r'
  static final List<bool> _mapping0 = _unmap([0x9]);
  
  // '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\', ']', '^', '_', '`', 'a', 'f'
  static final List<bool> _mapping1 = _unmap([0x7fffffff, 0x87ffff]);
  
  // 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '_', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
  static final List<bool> _mapping2 = _unmap([0x43ffffff, 0x7fffffe]);
  
  // '\"', '\'', '?', '\\', 'a', 'b', 'f', 'n', 'r', 't', 'v'
  static final List<bool> _mapping3 = _unmap([0x20000021, 0x8000000, 0x544046]);
  
  // '\t', '\n', '\r', ' '
  static final List<bool> _mapping4 = _unmap([0x800013]);
  
  // '\n', '\r', '\"', '\\'
  static final List<bool> _mapping5 = _unmap([0x1000009, 0x0, 0x100000]);
  
  // '__attribute__'
  static final List<int> _strings0 = <int>[95, 95, 97, 116, 116, 114, 105, 98, 117, 116, 101, 95, 95];
  
  // 'char'
  static final List<int> _strings1 = <int>[99, 104, 97, 114];
  
  // 'union'
  static final List<int> _strings10 = <int>[117, 110, 105, 111, 110];
  
  // 'void'
  static final List<int> _strings11 = <int>[118, 111, 105, 100];
  
  // '//'
  static final List<int> _strings12 = <int>[47, 47];
  
  // 'const'
  static final List<int> _strings13 = <int>[99, 111, 110, 115, 116];
  
  // '...'
  static final List<int> _strings14 = <int>[46, 46, 46];
  
  // '\r\n'
  static final List<int> _strings15 = <int>[13, 10];
  
  // '\x'
  static final List<int> _strings16 = <int>[92, 120];
  
  // 'long'
  static final List<int> _strings17 = <int>[108, 111, 110, 103];
  
  // '_Bool'
  static final List<int> _strings18 = <int>[95, 66, 111, 111, 108];
  
  // '_Complex'
  static final List<int> _strings19 = <int>[95, 67, 111, 109, 112, 108, 101, 120];
  
  // 'double'
  static final List<int> _strings2 = <int>[100, 111, 117, 98, 108, 101];
  
  // '_Imaginary'
  static final List<int> _strings20 = <int>[95, 73, 109, 97, 103, 105, 110, 97, 114, 121];
  
  // 'auto'
  static final List<int> _strings21 = <int>[97, 117, 116, 111];
  
  // 'break'
  static final List<int> _strings22 = <int>[98, 114, 101, 97, 107];
  
  // 'case'
  static final List<int> _strings23 = <int>[99, 97, 115, 101];
  
  // 'continue'
  static final List<int> _strings24 = <int>[99, 111, 110, 116, 105, 110, 117, 101];
  
  // 'default'
  static final List<int> _strings25 = <int>[100, 101, 102, 97, 117, 108, 116];
  
  // 'do'
  static final List<int> _strings26 = <int>[100, 111];
  
  // 'else'
  static final List<int> _strings27 = <int>[101, 108, 115, 101];
  
  // 'extern'
  static final List<int> _strings28 = <int>[101, 120, 116, 101, 114, 110];
  
  // 'for'
  static final List<int> _strings29 = <int>[102, 111, 114];
  
  // 'enum'
  static final List<int> _strings3 = <int>[101, 110, 117, 109];
  
  // 'goto'
  static final List<int> _strings30 = <int>[103, 111, 116, 111];
  
  // 'if'
  static final List<int> _strings31 = <int>[105, 102];
  
  // 'inline'
  static final List<int> _strings32 = <int>[105, 110, 108, 105, 110, 101];
  
  // 'register'
  static final List<int> _strings33 = <int>[114, 101, 103, 105, 115, 116, 101, 114];
  
  // 'restrict'
  static final List<int> _strings34 = <int>[114, 101, 115, 116, 114, 105, 99, 116];
  
  // 'return'
  static final List<int> _strings35 = <int>[114, 101, 116, 117, 114, 110];
  
  // 'signed'
  static final List<int> _strings36 = <int>[115, 105, 103, 110, 101, 100];
  
  // 'sizeof'
  static final List<int> _strings37 = <int>[115, 105, 122, 101, 111, 102];
  
  // 'static'
  static final List<int> _strings38 = <int>[115, 116, 97, 116, 105, 99];
  
  // 'switch'
  static final List<int> _strings39 = <int>[115, 119, 105, 116, 99, 104];
  
  // 'float'
  static final List<int> _strings4 = <int>[102, 108, 111, 97, 116];
  
  // 'unsigned'
  static final List<int> _strings40 = <int>[117, 110, 115, 105, 103, 110, 101, 100];
  
  // 'volatile'
  static final List<int> _strings41 = <int>[118, 111, 108, 97, 116, 105, 108, 101];
  
  // 'while'
  static final List<int> _strings42 = <int>[119, 104, 105, 108, 101];
  
  // '\U'
  static final List<int> _strings43 = <int>[92, 85];
  
  // '\u'
  static final List<int> _strings44 = <int>[92, 117];
  
  // 'int'
  static final List<int> _strings5 = <int>[105, 110, 116];
  
  // 'short'
  static final List<int> _strings6 = <int>[115, 104, 111, 114, 116];
  
  // 'L"'
  static final List<int> _strings7 = <int>[76, 34];
  
  // 'struct'
  static final List<int> _strings8 = <int>[115, 116, 114, 117, 99, 116];
  
  // 'typedef'
  static final List<int> _strings9 = <int>[116, 121, 112, 101, 100, 101, 102];
  
  final List<String> _tokenAliases = ["\'=\'", "\'*\'", "\'__attribute__\'", "\'char\'", "\'}\'", "\']\'", "\')\'", "\':\'", "\',\'", "\'double\'", "\'enum\'", "EOF", "\'float\'", "IDENT", "IDENTIFIER", "\'int\'", "LEADING_SPACES", "\'long\'", "NUMBER", "\'{\'", "\'[\'", "\'(\'", "POSITIVE_NUMBER", "\';\'", "\'short\'", "SIGNEDNESS", "STRING", "\'struct\'", "\'typedef\'", "TYPE_QUALIFIERS", "\'union\'", "\'...\'", "\'void\'", "ZERO_NUMBER"];
  
  final List<int> _tokenFlags = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  
  final List<String> _tokenNames = ["ASSIGN", "ASTERISK", "ATTRIBUTE", "CHAR", "CLOSE_BRACE", "CLOSE_BRACKET", "CLOSE_PAREN", "COLON", "COMMA", "DOUBLE", "ENUM", "EOF", "FLOAT", "IDENT", "IDENTIFIER", "INT", "LEADING_SPACES", "LONG_TYPE", "NUMBER", "OPEN_BRACE", "OPEN_BRACKET", "OPEN_PAREN", "POSITIVE_NUMBER", "SEMICOLON", "SHORT", "SIGNEDNESS", "STRING", "STRUCT", "TYPEDEF", "TYPE_QUALIFIERS", "UNION", "VA_LIST_PARAMETER", "VOID", "ZERO_NUMBER"];
  
  static final List<List<int>> _transitions0 = [[65, 90, 95, 95, 97, 122]];
  
  static final List<List<int>> _transitions1 = [[34, 34, 43, 43, 45, 45, 48, 57, 76, 76]];
  
  static final List<List<int>> _transitions10 = [[34, 34], [76, 76]];
  
  static final List<List<int>> _transitions11 = [[0, 9, 11, 12, 14, 1114111], [10, 10, 13, 13]];
  
  static final List<List<int>> _transitions12 = [[10, 10], [13, 13]];
  
  static final List<List<int>> _transitions13 = [[48, 97, 102, 102]];
  
  static final List<List<int>> _transitions14 = [[0, 47, 98, 101, 103, 1114111], [48, 97, 102, 102]];
  
  static final List<List<int>> _transitions15 = [[48, 57], [65, 90, 95, 95, 97, 122]];
  
  static final List<List<int>> _transitions16 = [[43, 43, 45, 45, 48, 48]];
  
  static final List<List<int>> _transitions17 = [[95, 95, 97, 103, 105, 105, 108, 108, 114, 119]];
  
  static final List<List<int>> _transitions18 = [[95, 95], [97, 97], [98, 98], [99, 99], [100, 100], [101, 101], [102, 102], [103, 103], [105, 105], [108, 108], [114, 114], [115, 115], [116, 116], [117, 117], [118, 118], [119, 119]];
  
  static final List<List<int>> _transitions19 = [[43, 43], [45, 45]];
  
  static final List<List<int>> _transitions2 = [[34, 34, 76, 76], [43, 43, 45, 45, 48, 57]];
  
  static final List<List<int>> _transitions20 = [[9, 10, 13, 13, 32, 32]];
  
  static final List<List<int>> _transitions21 = [[9, 10, 13, 13, 32, 32], [47, 47]];
  
  static final List<List<int>> _transitions3 = [[108, 108], [115, 115]];
  
  static final List<List<int>> _transitions4 = [[99, 99], [105, 105], [108, 108], [115, 115]];
  
  static final List<List<int>> _transitions5 = [[100, 100], [102, 102]];
  
  static final List<List<int>> _transitions6 = [[115, 115], [117, 117]];
  
  static final List<List<int>> _transitions7 = [[43, 43, 45, 45, 48, 57]];
  
  static final List<List<int>> _transitions8 = [[95, 95, 116, 116]];
  
  static final List<List<int>> _transitions9 = [[43, 43, 45, 45, 48, 48], [49, 57]];
  
  List<Map<int, List>> _cache;
  
  List<int> _cachePos;
  
  List<bool> _cacheable;
  
  int _ch;
  
  int _cursor;
  
  List<CParserError> _errors;
  
  List<String> _expected;
  
  int _failurePos;
  
  List<int> _input;
  
  int _inputLen;
  
  int _startPos;
  
  int _testing;
  
  int _token;
  
  int _tokenStart;
  
  bool success;
  
  final String text;
  
  CParser(this.text) {
    if (text == null) {
      throw new ArgumentError('text: $text');
    }    
    _input = _toCodePoints(text);
    _inputLen = _input.length;    
    reset(0);    
  }
  
  void _addToCache(dynamic result, int start, int id) {   
    var map = _cache[id];
    if (map == null) {
      map = <int, List>{};
      _cache[id] = map;
    }
    map[start] = [result, _cursor, success];      
  }
  
  void _failure([List<String> expected]) {  
    if (_failurePos > _cursor) {
      return;
    }
    if (_failurePos < _cursor) {    
      _expected = [];
     _failurePos = _cursor;
    }
    if (_token != null) {
      var alias = _tokenAliases[_token];
      var flag = _tokenFlags[_token];
      var name = _tokenNames[_token];
      if (_failurePos > _tokenStart && _failurePos == _inputLen && (flag & 1) != 0) {             
        var message = "Unterminated '$name'";
        _errors.add(new CParserError(CParserError.UNTERMINATED, _failurePos, _tokenStart, message));
        _expected.addAll(expected);            
      } else if (_failurePos > _tokenStart && (flag & 1) != 0) {             
        var message = "Malformed '$name'";
        _errors.add(new CParserError(CParserError.MALFORMED, _failurePos, _tokenStart, message));
        _expected.addAll(expected);            
      } else {
        _expected.add(alias);
      }            
    } else if (expected == null) {
      _expected.add(null);
    } else {
      _expected.addAll(expected);
    }   
  }
  
  List _flatten(dynamic value) {
    if (value is List) {
      var result = [];
      var length = value.length;
      for (var i = 0; i < length; i++) {
        var element = value[i];
        if (element is Iterable) {
          result.addAll(_flatten(element));
        } else {
          result.add(element);
        }
      }
      return result;
    } else if (value is Iterable) {
      var result = [];
      for (var element in value) {
        if (element is! List) {
          result.add(element);
        } else {
          result.addAll(_flatten(element));
        }
      }
    }
    return [value];
  }
  
  dynamic _getFromCache(int id) {  
    if (!_cacheable[id]) {  
      _cacheable[id] = true;  
      return null;
    }
    var map = _cache[id];
    if (map == null) {
      return null;
    }
    var data = map[_cursor];
    if (data == null) {
      return null;
    }
    _cursor = data[1];
    success = data[2];
    if (_cursor < _inputLen) {
      _ch = _input[_cursor];
    } else {
      _ch = -1;
    }
    return data;  
  }
  
  int _getState(List<List<int>> transitions) {
    var count = transitions.length;
    var state = 0;
    for ( ; state < count; state++) {
      var found = false;
      var ranges = transitions[state];    
      while (true) {
        var right = ranges.length ~/ 2;
        if (right == 0) {
          break;
        }
        var left = 0;
        if (right == 1) {
          if (_ch <= ranges[1] && _ch >= ranges[0]) {
            found = true;          
          }
          break;
        }
        int middle;
        while (left < right) {
          middle = (left + right) >> 1;
          var index = middle << 1;
          if (ranges[index + 1] < _ch) {
            left = middle + 1;
          } else {
            if (_ch >= ranges[index]) {
              found = true;
              break;
            }
            right = middle;
          }
        }
        break;
      }
      if (found) {
        return state; 
      }   
    }
    if (_ch != -1) {
      return state;
    }
    return state + 1;  
  }
  
  List _list(Object first, List next) {
    var length = next.length;
    var list = new List(length + 1);
    list[0] = first;
    for (var i = 0; i < length; i++) {
      list[i + 1] = next[i][1];
    }
    return list;
  }
  
  String _matchAny() {
    success = _cursor < _inputLen;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }    
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return result;
    }    
    return null;  
  }
  
  String _matchChar(int ch, String string) {
    success = _ch == ch;
    if (success) {
      var result = string;  
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return result;
    }  
    return null;  
  }
  
  String _matchMapping(int start, int end, List<bool> mapping) {
    success = _ch >= start && _ch <= end;
    if (success) {    
      if(mapping[_ch - start]) {
        String result;
        if (_ch < 128) {
          result = _ascii[_ch];  
        } else {
          result = new String.fromCharCode(_ch);
        }     
        if (++_cursor < _inputLen) {
          _ch = _input[_cursor];
        } else {
          _ch = -1;
        }      
        return result;
      }
      success = false;
    }  
    return null;  
  }
  
  String _matchRange(int start, int end) {
    success = _ch >= start && _ch <= end;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }        
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }  
      return result;
    }  
    return null;  
  }
  
  String _matchRanges(List<int> ranges) {
    var length = ranges.length;
    for (var i = 0; i < length; i += 2) {    
      if (_ch >= ranges[i]) {
        if (_ch <= ranges[i + 1]) {
          String result;
          if (_ch < 128) {
            result = _ascii[_ch];  
          } else {
            result = new String.fromCharCode(_ch);
          }          
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
             _ch = -1;
          }
          success = true;    
          return result;
        }      
      } else break;  
    }
    success = false;  
    return null;  
  }
  
  String _matchString(List<int> codePoints, String string) {
    var length = codePoints.length;  
    success = _cursor + length <= _inputLen;
    if (success) {
      for (var i = 0; i < length; i++) {
        if (codePoints[i] != _input[_cursor + i]) {
          success = false;
          break;
        }
      }
    } else {
      success = false;
    }  
    if (success) {
      _cursor += length;      
      if (_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return string;      
    }  
    return null; 
  }
  
  void _nextChar() {
    if (++_cursor < _inputLen) {
      _ch = _input[_cursor];
    } else {
      _ch = -1;
    }  
  }
  
  dynamic _parse_ASSIGN() {
    // LEXEME (TOKEN)
    // ASSIGN <- '=' SPACING
    var $$;
    _token = 0;  
    _tokenStart = _cursor;  
    // => '=' SPACING # Choice
    switch (_ch == 61 ? 0 : _ch == -1 ? 2 : 1) {
      // [=]
      case 0:
        // => '=' SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => '='
          $$ = '=';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          // <= '='
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // '='
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= '=' SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '='
      _failure(_expect22);
    }
    // <= '=' SPACING # Choice
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_ASTERISK() {
    // LEXEME (TOKEN)
    // ASTERISK <- '*' SPACING
    var $$;          
    var pos = _cursor;             
    if(_cachePos[57] >= pos) {
      $$ = _getFromCache(57);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[57] = pos;
    }  
    _token = 1;    
    _tokenStart = _cursor;    
    // => '*' SPACING # Choice
    switch (_ch == 42 ? 0 : _ch == -1 ? 2 : 1) {
      // [*]
      case 0:
        // => '*' SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => '*'
          $$ = '*';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          // <= '*'
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // '*'
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= '*' SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '*'
      _failure(_expect21);
    }
    // <= '*' SPACING # Choice
    if (_cacheable[57]) {
      _addToCache($$, pos, 57);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_ATTRIBUTE() {
    // LEXEME (TOKEN)
    // ATTRIBUTE <- '__attribute__' SPACING
    var $$;
    _token = 2;  
    _tokenStart = _cursor;  
    // => '__attribute__' SPACING # Choice
    switch (_ch == 95 ? 0 : _ch == -1 ? 2 : 1) {
      // [_]
      case 0:
        // => '__attribute__' SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => '__attribute__'
          $$ = _matchString(_strings0, '__attribute__');
          // <= '__attribute__'
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // '__attribute__'
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= '__attribute__' SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '__attribute__'
      _failure(_expect4);
    }
    // <= '__attribute__' SPACING # Choice
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_ArrayDimensions() {
    // SENTENCE (NONTERMINAL)
    // ArrayDimensions <- Dimension+
    var $$;          
    var pos = _cursor;             
    if(_cachePos[17] >= pos) {
      $$ = _getFromCache(17);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[17] = pos;
    }  
    // => Dimension+ # Choice
    switch (_ch == 91 ? 0 : _ch == -1 ? 2 : 1) {
      // [[]
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => Dimension+
        var testing0;
        for (var first = true, reps; ;) {  
          // => Dimension  
          $$ = _parse_Dimension();  
          // <= Dimension  
          if (success) {
           if (first) {      
              first = false;
              reps = [$$];
              testing0 = _testing;                  
            } else {
              reps.add($$);
            }
            _testing = _cursor;   
          } else {
            success = !first;
            if (success) {      
              _testing = testing0;
              $$ = reps;      
            } else $$ = null;
            break;
          }  
        }
        // <= Dimension+
        if (success) {    
          // Dimension+
          final $1 = $$;
          final $start = startPos0;
          $$ = new ArrayDimensions(dimensions: $1);
        }
        _startPos = startPos0;
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '['
      _failure(_expect13);
    }
    // <= Dimension+ # Choice
    if (_cacheable[17]) {
      _addToCache($$, pos, 17);
    }    
    return $$;
  }
  
  dynamic _parse_ArrayParameter() {
    // SENTENCE (NONTERMINAL)
    // ArrayParameter <- Metadata? Type Identifier? ArrayDimensions Metadata?
    var $$;          
    var pos = _cursor;             
    if(_cachePos[25] >= pos) {
      $$ = _getFromCache(25);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[25] = pos;
    }  
    // => Metadata? Type Identifier? ArrayDimensions Metadata? # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        // => Metadata? Type Identifier? ArrayDimensions Metadata? # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          var seq = new List(5)..[0] = $$;
          // => Type
          $$ = _parse_Type();
          // <= Type
          if (!success) break;
          seq[1] = $$;
          // => Identifier?
          var testing1 = _testing;
          _testing = _cursor;
          // => Identifier
          $$ = _parse_Identifier();
          // <= Identifier
          success = true; 
          _testing = testing1;
          // <= Identifier?
          if (!success) break;
          seq[2] = $$;
          // => ArrayDimensions
          $$ = _parse_ArrayDimensions();
          // <= ArrayDimensions
          if (!success) break;
          seq[3] = $$;
          // => Metadata?
          var testing2 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing2;
          // <= Metadata?
          if (!success) break;
          seq[4] = $$;
          $$ = seq;
          if (success) {    
            // Metadata?
            final $1 = seq[0];
            // Type
            final $2 = seq[1];
            // Identifier?
            final $3 = seq[2];
            // ArrayDimensions
            final $4 = seq[3];
            // Metadata?
            final $5 = seq[4];
            final $start = startPos0;
            $$ = new ParameterDeclaration(identifier: $3, metadata: $1, type: _createArray($2, $4, $5));
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= Metadata? Type Identifier? ArrayDimensions Metadata? # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum'
      _failure(_expect3);
    }
    // <= Metadata? Type Identifier? ArrayDimensions Metadata? # Choice
    if (_cacheable[25]) {
      _addToCache($$, pos, 25);
    }    
    return $$;
  }
  
  dynamic _parse_ArraySize() {
    // SENTENCE (NONTERMINAL)
    // ArraySize <- !ZERO_NUMBER POSITIVE_NUMBER
    var $$;
    // => !ZERO_NUMBER POSITIVE_NUMBER # Choice
    switch (_getState(_transitions7)) {
      // [+] [-] [0-9]
      // EOF
      case 0:
      case 2:
        // => !ZERO_NUMBER POSITIVE_NUMBER # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => !ZERO_NUMBER
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          // => ZERO_NUMBER
          $$ = _parse_ZERO_NUMBER();
          // <= ZERO_NUMBER
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          // <= !ZERO_NUMBER
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => POSITIVE_NUMBER
          $$ = _parse_POSITIVE_NUMBER();
          // <= POSITIVE_NUMBER
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // !ZERO_NUMBER
            final $1 = seq[0];
            // POSITIVE_NUMBER
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $2;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= !ZERO_NUMBER POSITIVE_NUMBER # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: POSITIVE_NUMBER
      _failure(_expect14);
    }
    // <= !ZERO_NUMBER POSITIVE_NUMBER # Choice
    return $$;
  }
  
  dynamic _parse_ArrayType() {
    // SENTENCE (NONTERMINAL)
    // ArrayType <- TypeName ArrayDimensions Metadata?
    var $$;
    // => TypeName ArrayDimensions Metadata? # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        // => TypeName ArrayDimensions Metadata? # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => TypeName
          $$ = _parse_TypeName();
          // <= TypeName
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => ArrayDimensions
          $$ = _parse_ArrayDimensions();
          // <= ArrayDimensions
          if (!success) break;
          seq[1] = $$;
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // TypeName
            final $1 = seq[0];
            // ArrayDimensions
            final $2 = seq[1];
            // Metadata?
            final $3 = seq[2];
            final $start = startPos0;
            $$ = _createArray($1, $2, $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= TypeName ArrayDimensions Metadata? # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum'
      _failure(_expect3);
    }
    // <= TypeName ArrayDimensions Metadata? # Choice
    return $$;
  }
  
  dynamic _parse_ArrayTypeElementSynonym() {
    // SENTENCE (NONTERMINAL)
    // ArrayTypeElementSynonym <- PointerTypeSynonymNoMetadata / SimpleTypeSynonymNoMetadata
    var $$;
    // => PointerTypeSynonymNoMetadata / SimpleTypeSynonymNoMetadata # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        while (true) {
          var startPos0 = _startPos;
          _startPos = _cursor;
          // => PointerTypeSynonymNoMetadata
          $$ = _parse_PointerTypeSynonymNoMetadata();
          // <= PointerTypeSynonymNoMetadata
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          // => SimpleTypeSynonymNoMetadata
          $$ = _parse_SimpleTypeSynonymNoMetadata();
          // <= SimpleTypeSynonymNoMetadata
          _startPos = startPos1;
          break;
        }
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
      // EOF
      case 2:
        var startPos2 = _startPos;
        _startPos = _cursor;
        // => SimpleTypeSynonymNoMetadata
        $$ = _parse_SimpleTypeSynonymNoMetadata();
        // <= SimpleTypeSynonymNoMetadata
        _startPos = startPos2;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '*', IDENTIFIER
      _failure(_expect20);
    }
    // <= PointerTypeSynonymNoMetadata / SimpleTypeSynonymNoMetadata # Choice
    return $$;
  }
  
  dynamic _parse_ArrayTypeSynonym() {
    // SENTENCE (NONTERMINAL)
    // ArrayTypeSynonym <- ArrayTypeElementSynonym ArrayDimensions Metadata?
    var $$;          
    var pos = _cursor;             
    if(_cachePos[44] >= pos) {
      $$ = _getFromCache(44);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[44] = pos;
    }  
    // => ArrayTypeElementSynonym ArrayDimensions Metadata? # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        // => ArrayTypeElementSynonym ArrayDimensions Metadata? # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => ArrayTypeElementSynonym
          $$ = _parse_ArrayTypeElementSynonym();
          // <= ArrayTypeElementSynonym
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => ArrayDimensions
          $$ = _parse_ArrayDimensions();
          // <= ArrayDimensions
          if (!success) break;
          seq[1] = $$;
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // ArrayTypeElementSynonym
            final $1 = seq[0];
            // ArrayDimensions
            final $2 = seq[1];
            // Metadata?
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new ArrayTypeSpecification(dimensions: $2, metadata: $3, type: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= ArrayTypeElementSynonym ArrayDimensions Metadata? # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '*', IDENTIFIER
      _failure(_expect20);
    }
    // <= ArrayTypeElementSynonym ArrayDimensions Metadata? # Choice
    if (_cacheable[44]) {
      _addToCache($$, pos, 44);
    }    
    return $$;
  }
  
  dynamic _parse_ArrayVariableDeclaration() {
    // SENTENCE (NONTERMINAL)
    // ArrayVariableDeclaration <- Metadata? Type Identifier ArrayDimensions Metadata?
    var $$;
    // => Metadata? Type Identifier ArrayDimensions Metadata? # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        // => Metadata? Type Identifier ArrayDimensions Metadata? # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          var seq = new List(5)..[0] = $$;
          // => Type
          $$ = _parse_Type();
          // <= Type
          if (!success) break;
          seq[1] = $$;
          // => Identifier
          $$ = _parse_Identifier();
          // <= Identifier
          if (!success) break;
          seq[2] = $$;
          // => ArrayDimensions
          $$ = _parse_ArrayDimensions();
          // <= ArrayDimensions
          if (!success) break;
          seq[3] = $$;
          // => Metadata?
          var testing1 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing1;
          // <= Metadata?
          if (!success) break;
          seq[4] = $$;
          $$ = seq;
          if (success) {    
            // Metadata?
            final $1 = seq[0];
            // Type
            final $2 = seq[1];
            // Identifier
            final $3 = seq[2];
            // ArrayDimensions
            final $4 = seq[3];
            // Metadata?
            final $5 = seq[4];
            final $start = startPos0;
            $$ = new VariableDeclaration(identifier: $3, metadata: $1, type: _createArray($2, $4, $5));
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= Metadata? Type Identifier ArrayDimensions Metadata? # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum'
      _failure(_expect3);
    }
    // <= Metadata? Type Identifier ArrayDimensions Metadata? # Choice
    return $$;
  }
  
  dynamic _parse_Attribute() {
    // SENTENCE (NONTERMINAL)
    // Attribute <- IDENT OPEN_PAREN AttributeParameterList? CLOSE_PAREN / IDENT
    var $$;          
    var pos = _cursor;             
    if(_cachePos[7] >= pos) {
      $$ = _getFromCache(7);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[7] = pos;
    }  
    // => IDENT OPEN_PAREN AttributeParameterList? CLOSE_PAREN / IDENT # Choice
    switch (_getState(_transitions0)) {
      // [A-Z] [_] [a-z]
      case 0:
        while (true) {
          // => IDENT OPEN_PAREN AttributeParameterList? CLOSE_PAREN # Sequence
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => IDENT
            $$ = _parse_IDENT();
            // <= IDENT
            if (!success) break;
            var seq = new List(4)..[0] = $$;
            // => OPEN_PAREN
            $$ = _parse_OPEN_PAREN();
            // <= OPEN_PAREN
            if (!success) break;
            seq[1] = $$;
            // => AttributeParameterList?
            var testing0 = _testing;
            _testing = _cursor;
            // => AttributeParameterList
            $$ = _parse_AttributeParameterList();
            // <= AttributeParameterList
            success = true; 
            _testing = testing0;
            // <= AttributeParameterList?
            if (!success) break;
            seq[2] = $$;
            // => CLOSE_PAREN
            $$ = _parse_CLOSE_PAREN();
            // <= CLOSE_PAREN
            if (!success) break;
            seq[3] = $$;
            $$ = seq;
            if (success) {    
              // IDENT
              final $1 = seq[0];
              // OPEN_PAREN
              final $2 = seq[1];
              // AttributeParameterList?
              final $3 = seq[2];
              // CLOSE_PAREN
              final $4 = seq[3];
              final $start = startPos0;
              $$ = new Attribute($1, $3);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          // <= IDENT OPEN_PAREN AttributeParameterList? CLOSE_PAREN # Sequence
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          // => IDENT
          $$ = _parse_IDENT();
          // <= IDENT
          if (success) {    
            // IDENT
            final $1 = $$;
            final $start = startPos1;
            $$ = new Attribute($1);
          }
          _startPos = startPos1;
          break;
        }
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENT
      _failure(_expect5);
    }
    // <= IDENT OPEN_PAREN AttributeParameterList? CLOSE_PAREN / IDENT # Choice
    if (_cacheable[7]) {
      _addToCache($$, pos, 7);
    }    
    return $$;
  }
  
  dynamic _parse_AttributeList() {
    // SENTENCE (NONTERMINAL)
    // AttributeList <- Attribute (COMMA Attribute)*
    var $$;
    // => Attribute (COMMA Attribute)* # Choice
    switch (_getState(_transitions0)) {
      // [A-Z] [_] [a-z]
      case 0:
        // => Attribute (COMMA Attribute)* # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => Attribute
          $$ = _parse_Attribute();
          // <= Attribute
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => (COMMA Attribute)*
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            // => (COMMA Attribute) # Choice
            switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
              // [,]
              case 0:
                // => COMMA Attribute # Sequence
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  // => COMMA
                  $$ = _parse_COMMA();
                  // <= COMMA
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  // => Attribute
                  $$ = _parse_Attribute();
                  // <= Attribute
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                // <= COMMA Attribute # Sequence
                break;
              // No matches
              // EOF
              case 1:
              case 2:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              // Expected: ','
              _failure(_expect6);
            }
            // <= (COMMA Attribute) # Choice
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          // <= (COMMA Attribute)*
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // Attribute
            final $1 = seq[0];
            // (COMMA Attribute)*
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _list($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= Attribute (COMMA Attribute)* # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENT
      _failure(_expect5);
    }
    // <= Attribute (COMMA Attribute)* # Choice
    return $$;
  }
  
  dynamic _parse_AttributeParameter() {
    // SENTENCE (NONTERMINAL)
    // AttributeParameter <- STRING / NUMBER
    var $$;          
    var pos = _cursor;             
    if(_cachePos[9] >= pos) {
      $$ = _getFromCache(9);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[9] = pos;
    }  
    // => STRING / NUMBER # Choice
    switch (_getState(_transitions2)) {
      // [\"] [L]
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => STRING
        $$ = _parse_STRING();
        // <= STRING
        _startPos = startPos0;
        break;
      // [+] [-] [0-9]
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        // => NUMBER
        $$ = _parse_NUMBER();
        // <= NUMBER
        _startPos = startPos1;
        break;
      // No matches
      // EOF
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: STRING, NUMBER
      _failure(_expect7);
    }
    // <= STRING / NUMBER # Choice
    if (_cacheable[9]) {
      _addToCache($$, pos, 9);
    }    
    return $$;
  }
  
  dynamic _parse_AttributeParameterList() {
    // SENTENCE (NONTERMINAL)
    // AttributeParameterList <- AttributeParameter (COMMA AttributeParameter)*
    var $$;
    // => AttributeParameter (COMMA AttributeParameter)* # Choice
    switch (_getState(_transitions1)) {
      // [\"] [+] [-] [0-9] [L]
      case 0:
        // => AttributeParameter (COMMA AttributeParameter)* # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => AttributeParameter
          $$ = _parse_AttributeParameter();
          // <= AttributeParameter
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => (COMMA AttributeParameter)*
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            // => (COMMA AttributeParameter) # Choice
            switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
              // [,]
              case 0:
                // => COMMA AttributeParameter # Sequence
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  // => COMMA
                  $$ = _parse_COMMA();
                  // <= COMMA
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  // => AttributeParameter
                  $$ = _parse_AttributeParameter();
                  // <= AttributeParameter
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                // <= COMMA AttributeParameter # Sequence
                break;
              // No matches
              // EOF
              case 1:
              case 2:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              // Expected: ','
              _failure(_expect6);
            }
            // <= (COMMA AttributeParameter) # Choice
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          // <= (COMMA AttributeParameter)*
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // AttributeParameter
            final $1 = seq[0];
            // (COMMA AttributeParameter)*
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _list($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= AttributeParameter (COMMA AttributeParameter)* # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: STRING, NUMBER
      _failure(_expect7);
    }
    // <= AttributeParameter (COMMA AttributeParameter)* # Choice
    return $$;
  }
  
  dynamic _parse_AttributeSpecifier() {
    // SENTENCE (NONTERMINAL)
    // AttributeSpecifier <- ATTRIBUTE OPEN_PAREN OPEN_PAREN AttributeList? CLOSE_PAREN CLOSE_PAREN
    var $$;
    // => ATTRIBUTE OPEN_PAREN OPEN_PAREN AttributeList? CLOSE_PAREN CLOSE_PAREN # Choice
    switch (_ch == 95 ? 0 : _ch == -1 ? 2 : 1) {
      // [_]
      case 0:
        // => ATTRIBUTE OPEN_PAREN OPEN_PAREN AttributeList? CLOSE_PAREN CLOSE_PAREN # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => ATTRIBUTE
          $$ = _parse_ATTRIBUTE();
          // <= ATTRIBUTE
          if (!success) break;
          var seq = new List(6)..[0] = $$;
          // => OPEN_PAREN
          $$ = _parse_OPEN_PAREN();
          // <= OPEN_PAREN
          if (!success) break;
          seq[1] = $$;
          // => OPEN_PAREN
          $$ = _parse_OPEN_PAREN();
          // <= OPEN_PAREN
          if (!success) break;
          seq[2] = $$;
          // => AttributeList?
          var testing0 = _testing;
          _testing = _cursor;
          // => AttributeList
          $$ = _parse_AttributeList();
          // <= AttributeList
          success = true; 
          _testing = testing0;
          // <= AttributeList?
          if (!success) break;
          seq[3] = $$;
          // => CLOSE_PAREN
          $$ = _parse_CLOSE_PAREN();
          // <= CLOSE_PAREN
          if (!success) break;
          seq[4] = $$;
          // => CLOSE_PAREN
          $$ = _parse_CLOSE_PAREN();
          // <= CLOSE_PAREN
          if (!success) break;
          seq[5] = $$;
          $$ = seq;
          if (success) {    
            // ATTRIBUTE
            final $1 = seq[0];
            // OPEN_PAREN
            final $2 = seq[1];
            // OPEN_PAREN
            final $3 = seq[2];
            // AttributeList?
            final $4 = seq[3];
            // CLOSE_PAREN
            final $5 = seq[4];
            // CLOSE_PAREN
            final $6 = seq[5];
            final $start = startPos0;
            $$ = new AttributeList($4);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= ATTRIBUTE OPEN_PAREN OPEN_PAREN AttributeList? CLOSE_PAREN CLOSE_PAREN # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '__attribute__'
      _failure(_expect4);
    }
    // <= ATTRIBUTE OPEN_PAREN OPEN_PAREN AttributeList? CLOSE_PAREN CLOSE_PAREN # Choice
    return $$;
  }
  
  dynamic _parse_BitFieldParameter() {
    // SENTENCE (NONTERMINAL)
    // BitFieldParameter <- Metadata? Type Identifier? COLON POSITIVE_NUMBER
    var $$;
    // => Metadata? Type Identifier? COLON POSITIVE_NUMBER # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        // => Metadata? Type Identifier? COLON POSITIVE_NUMBER # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          var seq = new List(5)..[0] = $$;
          // => Type
          $$ = _parse_Type();
          // <= Type
          if (!success) break;
          seq[1] = $$;
          // => Identifier?
          var testing1 = _testing;
          _testing = _cursor;
          // => Identifier
          $$ = _parse_Identifier();
          // <= Identifier
          success = true; 
          _testing = testing1;
          // <= Identifier?
          if (!success) break;
          seq[2] = $$;
          // => COLON
          $$ = _parse_COLON();
          // <= COLON
          if (!success) break;
          seq[3] = $$;
          // => POSITIVE_NUMBER
          $$ = _parse_POSITIVE_NUMBER();
          // <= POSITIVE_NUMBER
          if (!success) break;
          seq[4] = $$;
          $$ = seq;
          if (success) {    
            // Metadata?
            final $1 = seq[0];
            // Type
            final $2 = seq[1];
            // Identifier?
            final $3 = seq[2];
            // COLON
            final $4 = seq[3];
            // POSITIVE_NUMBER
            final $5 = seq[4];
            final $start = startPos0;
            $$ = new ParameterDeclaration(identifier: $3, metadata: $1, type: $2, width: $5);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= Metadata? Type Identifier? COLON POSITIVE_NUMBER # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum'
      _failure(_expect3);
    }
    // <= Metadata? Type Identifier? COLON POSITIVE_NUMBER # Choice
    return $$;
  }
  
  dynamic _parse_CHAR() {
    // LEXEME (TOKEN)
    // CHAR <- 'char' !IDENT_PART SPACING
    var $$;
    _token = 3;  
    _tokenStart = _cursor;  
    // => 'char' !IDENT_PART SPACING # Choice
    switch (_ch == 99 ? 0 : _ch == -1 ? 2 : 1) {
      // [c]
      case 0:
        // => 'char' !IDENT_PART SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => 'char'
          $$ = _matchString(_strings1, 'char');
          // <= 'char'
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => !IDENT_PART
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          // => IDENT_PART
          $$ = _parse_IDENT_PART();
          // <= IDENT_PART
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          // <= !IDENT_PART
          if (!success) break;
          seq[1] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // 'char'
            final $1 = seq[0];
            // !IDENT_PART
            final $2 = seq[1];
            // SPACING
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= 'char' !IDENT_PART SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'char'
      _failure(_expect23);
    }
    // <= 'char' !IDENT_PART SPACING # Choice
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_CLOSE_BRACE() {
    // LEXEME (TOKEN)
    // CLOSE_BRACE <- '}' SPACING
    var $$;          
    var pos = _cursor;             
    if(_cachePos[60] >= pos) {
      $$ = _getFromCache(60);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[60] = pos;
    }  
    _token = 4;    
    _tokenStart = _cursor;    
    // => '}' SPACING # Choice
    switch (_ch == 125 ? 0 : _ch == -1 ? 2 : 1) {
      // [}]
      case 0:
        // => '}' SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => '}'
          $$ = '}';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          // <= '}'
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // '}'
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= '}' SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '}'
      _failure(_expect24);
    }
    // <= '}' SPACING # Choice
    if (_cacheable[60]) {
      _addToCache($$, pos, 60);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_CLOSE_BRACKET() {
    // LEXEME (TOKEN)
    // CLOSE_BRACKET <- ']' SPACING
    var $$;
    _token = 5;  
    _tokenStart = _cursor;  
    // => ']' SPACING # Choice
    switch (_ch == 93 ? 0 : _ch == -1 ? 2 : 1) {
      // []]
      case 0:
        // => ']' SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => ']'
          $$ = ']';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          // <= ']'
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // ']'
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= ']' SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: ']'
      _failure(_expect25);
    }
    // <= ']' SPACING # Choice
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_CLOSE_PAREN() {
    // LEXEME (TOKEN)
    // CLOSE_PAREN <- ')' SPACING
    var $$;          
    var pos = _cursor;             
    if(_cachePos[62] >= pos) {
      $$ = _getFromCache(62);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[62] = pos;
    }  
    _token = 6;    
    _tokenStart = _cursor;    
    // => ')' SPACING # Choice
    switch (_ch == 41 ? 0 : _ch == -1 ? 2 : 1) {
      // [)]
      case 0:
        // => ')' SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => ')'
          $$ = ')';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          // <= ')'
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // ')'
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= ')' SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: ')'
      _failure(_expect26);
    }
    // <= ')' SPACING # Choice
    if (_cacheable[62]) {
      _addToCache($$, pos, 62);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_COLON() {
    // LEXEME (TOKEN)
    // COLON <- ':' SPACING
    var $$;
    _token = 7;  
    _tokenStart = _cursor;  
    // => ':' SPACING # Choice
    switch (_ch == 58 ? 0 : _ch == -1 ? 2 : 1) {
      // [:]
      case 0:
        // => ':' SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => ':'
          $$ = ':';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          // <= ':'
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // ':'
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= ':' SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: ':'
      _failure(_expect27);
    }
    // <= ':' SPACING # Choice
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_COMMA() {
    // LEXEME (TOKEN)
    // COMMA <- ',' SPACING
    var $$;          
    var pos = _cursor;             
    if(_cachePos[64] >= pos) {
      $$ = _getFromCache(64);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[64] = pos;
    }  
    _token = 8;    
    _tokenStart = _cursor;    
    // => ',' SPACING # Choice
    switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
      // [,]
      case 0:
        // => ',' SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => ','
          $$ = ',';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          // <= ','
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // ','
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= ',' SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: ','
      _failure(_expect6);
    }
    // <= ',' SPACING # Choice
    if (_cacheable[64]) {
      _addToCache($$, pos, 64);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_COMMENT() {
    // MORHEME
    // COMMENT <- '//' (!EOL .)* (EOL / !.)
    var $$;
    // => '//' (!EOL .)* (EOL / !.) # Choice
    switch (_ch == 47 ? 0 : _ch == -1 ? 2 : 1) {
      // [/]
      case 0:
        // => '//' (!EOL .)* (EOL / !.) # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => '//'
          $$ = _matchString(_strings12, '//');
          // <= '//'
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => (!EOL .)*
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            // => (!EOL .) # Choice
            switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
              // [\u0000-\u0010ffff]
              // EOF
              case 0:
              case 2:
                // => !EOL . # Sequence
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  // => !EOL
                  var ch2 = _ch, pos2 = _cursor, testing1 = _testing; 
                  _testing = _inputLen + 1;
                  // => EOL
                  $$ = _parse_EOL();
                  // <= EOL
                  _ch = ch2;
                  _cursor = pos2; 
                  _testing = testing1;
                  $$ = null;
                  success = !success;
                  // <= !EOL
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  // => .
                  $$ = _matchAny();
                  // <= .
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                // <= !EOL . # Sequence
                break;
              // No matches
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              // Expected: 
              _failure(const [null]);
            }
            // <= (!EOL .) # Choice
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          // <= (!EOL .)*
          if (!success) break;
          seq[1] = $$;
          // => (EOL / !.) # Choice
          switch (_getState(_transitions11)) {
            // [\u0000-\t] [\u000b-\u000c] [\u000e-\u0010ffff]
            // EOF
            case 0:
            case 3:
              var startPos2 = _startPos;
              _startPos = _cursor;
              // => !.
              var ch3 = _ch, pos3 = _cursor, testing2 = _testing; 
              _testing = _inputLen + 1;
              // => .
              $$ = _matchAny();
              // <= .
              _ch = ch3;
              _cursor = pos3; 
              _testing = testing2;
              $$ = null;
              success = !success;
              // <= !.
              _startPos = startPos2;
              break;
            // [\n] [\r]
            case 1:
              while (true) {
                var startPos3 = _startPos;
                _startPos = _cursor;
                // => EOL
                $$ = _parse_EOL();
                // <= EOL
                _startPos = startPos3;
                if (success) break;
                var startPos4 = _startPos;
                _startPos = _cursor;
                // => !.
                var ch4 = _ch, pos4 = _cursor, testing3 = _testing; 
                _testing = _inputLen + 1;
                // => .
                $$ = _matchAny();
                // <= .
                _ch = ch4;
                _cursor = pos4; 
                _testing = testing3;
                $$ = null;
                success = !success;
                // <= !.
                _startPos = startPos4;
                break;
              }
              break;
            // No matches
            case 2:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            // Expected: 
            _failure(const [null]);
          }
          // <= (EOL / !.) # Choice
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= '//' (!EOL .)* (EOL / !.) # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: //
      _failure(_expect45);
    }
    // <= '//' (!EOL .)* (EOL / !.) # Choice
    return $$;
  }
  
  dynamic _parse_CONST() {
    // MORHEME
    // CONST <- 'const' SPACING
    var $$;
    // => 'const' SPACING # Choice
    switch (_ch == 99 ? 0 : _ch == -1 ? 2 : 1) {
      // [c]
      case 0:
        // => 'const' SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => 'const'
          $$ = _matchString(_strings13, 'const');
          // <= 'const'
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // 'const'
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= 'const' SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: const
      _failure(_expect46);
    }
    // <= 'const' SPACING # Choice
    return $$;
  }
  
  dynamic _parse_DOUBLE() {
    // LEXEME (TOKEN)
    // DOUBLE <- 'double' !IDENT_PART SPACING
    var $$;
    _token = 9;  
    _tokenStart = _cursor;  
    // => 'double' !IDENT_PART SPACING # Choice
    switch (_ch == 100 ? 0 : _ch == -1 ? 2 : 1) {
      // [d]
      case 0:
        // => 'double' !IDENT_PART SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => 'double'
          $$ = _matchString(_strings2, 'double');
          // <= 'double'
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => !IDENT_PART
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          // => IDENT_PART
          $$ = _parse_IDENT_PART();
          // <= IDENT_PART
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          // <= !IDENT_PART
          if (!success) break;
          seq[1] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // 'double'
            final $1 = seq[0];
            // !IDENT_PART
            final $2 = seq[1];
            // SPACING
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= 'double' !IDENT_PART SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'double'
      _failure(_expect28);
    }
    // <= 'double' !IDENT_PART SPACING # Choice
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_Declaration() {
    // SENTENCE (NONTERMINAL)
    // Declaration <- FunctionDeclartion SEMICOLON+ / StructDeclaration SEMICOLON+ / EnumDeclaration SEMICOLON+ / TypedefDeclaration SEMICOLON+ / VariableDeclaration SEMICOLON+ / SEMICOLON+
    var $$;
    // => FunctionDeclartion SEMICOLON+ / StructDeclaration SEMICOLON+ / EnumDeclaration SEMICOLON+ / TypedefDeclaration SEMICOLON+ / VariableDeclaration SEMICOLON+ / SEMICOLON+ # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        while (true) {
          // => FunctionDeclartion SEMICOLON+ # Sequence
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => FunctionDeclartion
            $$ = _parse_FunctionDeclartion();
            // <= FunctionDeclartion
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => SEMICOLON+
            var testing0;
            for (var first = true, reps; ;) {  
              // => SEMICOLON  
              $$ = _parse_SEMICOLON();  
              // <= SEMICOLON  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing0 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing0;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            // <= SEMICOLON+
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // FunctionDeclartion
              final $1 = seq[0];
              // SEMICOLON+
              final $2 = seq[1];
              final $start = startPos0;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          // <= FunctionDeclartion SEMICOLON+ # Sequence
          if (success) break;
          // => StructDeclaration SEMICOLON+ # Sequence
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => StructDeclaration
            $$ = _parse_StructDeclaration();
            // <= StructDeclaration
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => SEMICOLON+
            var testing1;
            for (var first = true, reps; ;) {  
              // => SEMICOLON  
              $$ = _parse_SEMICOLON();  
              // <= SEMICOLON  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing1 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing1;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            // <= SEMICOLON+
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // StructDeclaration
              final $1 = seq[0];
              // SEMICOLON+
              final $2 = seq[1];
              final $start = startPos1;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          // <= StructDeclaration SEMICOLON+ # Sequence
          if (success) break;
          // => EnumDeclaration SEMICOLON+ # Sequence
          var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => EnumDeclaration
            $$ = _parse_EnumDeclaration();
            // <= EnumDeclaration
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => SEMICOLON+
            var testing2;
            for (var first = true, reps; ;) {  
              // => SEMICOLON  
              $$ = _parse_SEMICOLON();  
              // <= SEMICOLON  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing2 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing2;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            // <= SEMICOLON+
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // EnumDeclaration
              final $1 = seq[0];
              // SEMICOLON+
              final $2 = seq[1];
              final $start = startPos2;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos2;
          // <= EnumDeclaration SEMICOLON+ # Sequence
          if (success) break;
          // => TypedefDeclaration SEMICOLON+ # Sequence
          var ch3 = _ch, pos3 = _cursor, startPos3 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => TypedefDeclaration
            $$ = _parse_TypedefDeclaration();
            // <= TypedefDeclaration
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => SEMICOLON+
            var testing3;
            for (var first = true, reps; ;) {  
              // => SEMICOLON  
              $$ = _parse_SEMICOLON();  
              // <= SEMICOLON  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing3 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing3;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            // <= SEMICOLON+
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // TypedefDeclaration
              final $1 = seq[0];
              // SEMICOLON+
              final $2 = seq[1];
              final $start = startPos3;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch3;
            _cursor = pos3;
          }
          _startPos = startPos3;
          // <= TypedefDeclaration SEMICOLON+ # Sequence
          if (success) break;
          // => VariableDeclaration SEMICOLON+ # Sequence
          var ch4 = _ch, pos4 = _cursor, startPos4 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => VariableDeclaration
            $$ = _parse_VariableDeclaration();
            // <= VariableDeclaration
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => SEMICOLON+
            var testing4;
            for (var first = true, reps; ;) {  
              // => SEMICOLON  
              $$ = _parse_SEMICOLON();  
              // <= SEMICOLON  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing4 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing4;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            // <= SEMICOLON+
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // VariableDeclaration
              final $1 = seq[0];
              // SEMICOLON+
              final $2 = seq[1];
              final $start = startPos4;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch4;
            _cursor = pos4;
          }
          _startPos = startPos4;
          // <= VariableDeclaration SEMICOLON+ # Sequence
          if (success) break;
          var startPos5 = _startPos;
          _startPos = _cursor;
          // => SEMICOLON+
          var testing5;
          for (var first = true, reps; ;) {  
            // => SEMICOLON  
            $$ = _parse_SEMICOLON();  
            // <= SEMICOLON  
            if (success) {
             if (first) {      
                first = false;
                reps = [$$];
                testing5 = _testing;                  
              } else {
                reps.add($$);
              }
              _testing = _cursor;   
            } else {
              success = !first;
              if (success) {      
                _testing = testing5;
                $$ = reps;      
              } else $$ = null;
              break;
            }  
          }
          // <= SEMICOLON+
          if (success) {    
            // SEMICOLON+
            final $1 = $$;
            final $start = startPos5;
            $$ = new EmptyDeclaration();
          }
          _startPos = startPos5;
          break;
        }
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
      // EOF
      case 2:
        while (true) {
          // => FunctionDeclartion SEMICOLON+ # Sequence
          var ch5 = _ch, pos5 = _cursor, startPos6 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => FunctionDeclartion
            $$ = _parse_FunctionDeclartion();
            // <= FunctionDeclartion
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => SEMICOLON+
            var testing6;
            for (var first = true, reps; ;) {  
              // => SEMICOLON  
              $$ = _parse_SEMICOLON();  
              // <= SEMICOLON  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing6 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing6;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            // <= SEMICOLON+
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // FunctionDeclartion
              final $1 = seq[0];
              // SEMICOLON+
              final $2 = seq[1];
              final $start = startPos6;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch5;
            _cursor = pos5;
          }
          _startPos = startPos6;
          // <= FunctionDeclartion SEMICOLON+ # Sequence
          if (success) break;
          // => VariableDeclaration SEMICOLON+ # Sequence
          var ch6 = _ch, pos6 = _cursor, startPos7 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => VariableDeclaration
            $$ = _parse_VariableDeclaration();
            // <= VariableDeclaration
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => SEMICOLON+
            var testing7;
            for (var first = true, reps; ;) {  
              // => SEMICOLON  
              $$ = _parse_SEMICOLON();  
              // <= SEMICOLON  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing7 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing7;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            // <= SEMICOLON+
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // VariableDeclaration
              final $1 = seq[0];
              // SEMICOLON+
              final $2 = seq[1];
              final $start = startPos7;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch6;
            _cursor = pos6;
          }
          _startPos = startPos7;
          // <= VariableDeclaration SEMICOLON+ # Sequence
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum', 'typedef', ';'
      _failure(_expect2);
    }
    // <= FunctionDeclartion SEMICOLON+ / StructDeclaration SEMICOLON+ / EnumDeclaration SEMICOLON+ / TypedefDeclaration SEMICOLON+ / VariableDeclaration SEMICOLON+ / SEMICOLON+ # Choice
    return $$;
  }
  
  dynamic _parse_DeclarationList() {
    // SENTENCE (NONTERMINAL)
    // DeclarationList <- Declaration*
    var $$;
    // => Declaration* # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => Declaration*
        var testing0 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          // => Declaration
          $$ = _parse_Declaration();
          // <= Declaration
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing0;
            $$ = reps;
            break; 
          }
        }
        // <= Declaration*
        _startPos = startPos0;
        break;
      // No matches
      case 1:
        $$ = null;
        success = true;
        break;
      // EOF
      case 2:
        while (true) {
          var startPos1 = _startPos;
          _startPos = _cursor;
          // => Declaration*
          var testing1 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            // => Declaration
            $$ = _parse_Declaration();
            // <= Declaration
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing1;
              $$ = reps;
              break; 
            }
          }
          // <= Declaration*
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          // => Declaration*
          var testing2 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            // => Declaration
            $$ = _parse_Declaration();
            // <= Declaration
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing2;
              $$ = reps;
              break; 
            }
          }
          // <= Declaration*
          _startPos = startPos2;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(_expect1);
    }
    // <= Declaration* # Choice
    return $$;
  }
  
  dynamic _parse_Dimension() {
    // SENTENCE (NONTERMINAL)
    // Dimension <- OPEN_BRACKET ArraySize? CLOSE_BRACKET
    var $$;
    // => OPEN_BRACKET ArraySize? CLOSE_BRACKET # Choice
    switch (_ch == 91 ? 0 : _ch == -1 ? 2 : 1) {
      // [[]
      case 0:
        // => OPEN_BRACKET ArraySize? CLOSE_BRACKET # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => OPEN_BRACKET
          $$ = _parse_OPEN_BRACKET();
          // <= OPEN_BRACKET
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => ArraySize?
          var testing0 = _testing;
          _testing = _cursor;
          // => ArraySize
          $$ = _parse_ArraySize();
          // <= ArraySize
          success = true; 
          _testing = testing0;
          // <= ArraySize?
          if (!success) break;
          seq[1] = $$;
          // => CLOSE_BRACKET
          $$ = _parse_CLOSE_BRACKET();
          // <= CLOSE_BRACKET
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // OPEN_BRACKET
            final $1 = seq[0];
            // ArraySize?
            final $2 = seq[1];
            // CLOSE_BRACKET
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $2;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= OPEN_BRACKET ArraySize? CLOSE_BRACKET # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '['
      _failure(_expect13);
    }
    // <= OPEN_BRACKET ArraySize? CLOSE_BRACKET # Choice
    return $$;
  }
  
  dynamic _parse_ELLIPSIS() {
    // MORHEME
    // ELLIPSIS <- '...' SPACING
    var $$;
    // => '...' SPACING # Choice
    switch (_ch == 46 ? 0 : _ch == -1 ? 2 : 1) {
      // [.]
      case 0:
        // => '...' SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => '...'
          $$ = _matchString(_strings14, '...');
          // <= '...'
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // '...'
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= '...' SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: ...
      _failure(_expect47);
    }
    // <= '...' SPACING # Choice
    return $$;
  }
  
  dynamic _parse_ENUM() {
    // LEXEME (TOKEN)
    // ENUM <- 'enum' !IDENT_PART SPACING
    var $$;
    _token = 10;  
    _tokenStart = _cursor;  
    // => 'enum' !IDENT_PART SPACING # Choice
    switch (_ch == 101 ? 0 : _ch == -1 ? 2 : 1) {
      // [e]
      case 0:
        // => 'enum' !IDENT_PART SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => 'enum'
          $$ = _matchString(_strings3, 'enum');
          // <= 'enum'
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => !IDENT_PART
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          // => IDENT_PART
          $$ = _parse_IDENT_PART();
          // <= IDENT_PART
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          // <= !IDENT_PART
          if (!success) break;
          seq[1] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // 'enum'
            final $1 = seq[0];
            // !IDENT_PART
            final $2 = seq[1];
            // SPACING
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= 'enum' !IDENT_PART SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'enum'
      _failure(_expect12);
    }
    // <= 'enum' !IDENT_PART SPACING # Choice
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_EOF() {
    // LEXEME (TOKEN)
    // EOF <- !.
    var $$;
    _token = 11;  
    _tokenStart = _cursor;  
    // => !. # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => !.
        var ch0 = _ch, pos0 = _cursor, testing0 = _testing; 
        _testing = _inputLen + 1;
        // => .
        $$ = _matchAny();
        // <= .
        _ch = ch0;
        _cursor = pos0; 
        _testing = testing0;
        $$ = null;
        success = !success;
        // <= !.
        _startPos = startPos0;
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: EOF
      _failure(_expect0);
    }
    // <= !. # Choice
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_EOL() {
    // MORHEME
    // EOL <- '\r\n' / [\n\r]
    var $$;
    // => '\r\n' / [\n\r] # Choice
    switch (_getState(_transitions12)) {
      // [\n]
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => [\n\r]
        $$ = _matchMapping(10, 13, _mapping0);
        // <= [\n\r]
        _startPos = startPos0;
        break;
      // [\r]
      case 1:
        while (true) {
          var startPos1 = _startPos;
          _startPos = _cursor;
          // => '\r\n'
          $$ = _matchString(_strings15, '\r\n');
          // <= '\r\n'
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          // => [\n\r]
          $$ = _matchMapping(10, 13, _mapping0);
          // <= [\n\r]
          _startPos = startPos2;
          break;
        }
        break;
      // No matches
      // EOF
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(const [null]);
    }
    // <= '\r\n' / [\n\r] # Choice
    return $$;
  }
  
  dynamic _parse_ESCAPE_SEQUENCE() {
    // MORHEME
    // ESCAPE_SEQUENCE <- SIMPLE_ESCAPE_SEQUENCE / OCTAL_ESCAPE_SEQUENCE / HEXADECIMAL_ESCAPE_SEQUENCE / UNIVERSAL_CHARCTER_NAME
    var $$;
    // => SIMPLE_ESCAPE_SEQUENCE / OCTAL_ESCAPE_SEQUENCE / HEXADECIMAL_ESCAPE_SEQUENCE / UNIVERSAL_CHARCTER_NAME # Choice
    switch (_ch == 92 ? 0 : _ch == -1 ? 2 : 1) {
      // [\\]
      case 0:
        while (true) {
          var startPos0 = _startPos;
          _startPos = _cursor;
          // => SIMPLE_ESCAPE_SEQUENCE
          $$ = _parse_SIMPLE_ESCAPE_SEQUENCE();
          // <= SIMPLE_ESCAPE_SEQUENCE
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          // => OCTAL_ESCAPE_SEQUENCE
          $$ = _parse_OCTAL_ESCAPE_SEQUENCE();
          // <= OCTAL_ESCAPE_SEQUENCE
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          // => HEXADECIMAL_ESCAPE_SEQUENCE
          $$ = _parse_HEXADECIMAL_ESCAPE_SEQUENCE();
          // <= HEXADECIMAL_ESCAPE_SEQUENCE
          _startPos = startPos2;
          if (success) break;
          var startPos3 = _startPos;
          _startPos = _cursor;
          // => UNIVERSAL_CHARCTER_NAME
          $$ = _parse_UNIVERSAL_CHARCTER_NAME();
          // <= UNIVERSAL_CHARCTER_NAME
          _startPos = startPos3;
          break;
        }
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(const [null]);
    }
    // <= SIMPLE_ESCAPE_SEQUENCE / OCTAL_ESCAPE_SEQUENCE / HEXADECIMAL_ESCAPE_SEQUENCE / UNIVERSAL_CHARCTER_NAME # Choice
    return $$;
  }
  
  dynamic _parse_EnumDeclaration() {
    // SENTENCE (NONTERMINAL)
    // EnumDeclaration <- Metadata? EnumType
    var $$;          
    var pos = _cursor;             
    if(_cachePos[38] >= pos) {
      $$ = _getFromCache(38);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[38] = pos;
    }  
    // => Metadata? EnumType # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        // => Metadata? EnumType # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => EnumType
          $$ = _parse_EnumType();
          // <= EnumType
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // Metadata?
            final $1 = seq[0];
            // EnumType
            final $2 = seq[1];
            final $start = startPos0;
            $$ = new EnumDeclaration(metadata: $1, type: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= Metadata? EnumType # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'enum'
      _failure(_expect12);
    }
    // <= Metadata? EnumType # Choice
    if (_cacheable[38]) {
      _addToCache($$, pos, 38);
    }    
    return $$;
  }
  
  dynamic _parse_EnumType() {
    // SENTENCE (NONTERMINAL)
    // EnumType <- EnumTypeName OPEN_BRACE EnumValueList CLOSE_BRACE Metadata?
    var $$;          
    var pos = _cursor;             
    if(_cachePos[39] >= pos) {
      $$ = _getFromCache(39);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[39] = pos;
    }  
    // => EnumTypeName OPEN_BRACE EnumValueList CLOSE_BRACE Metadata? # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        // => EnumTypeName OPEN_BRACE EnumValueList CLOSE_BRACE Metadata? # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => EnumTypeName
          $$ = _parse_EnumTypeName();
          // <= EnumTypeName
          if (!success) break;
          var seq = new List(5)..[0] = $$;
          // => OPEN_BRACE
          $$ = _parse_OPEN_BRACE();
          // <= OPEN_BRACE
          if (!success) break;
          seq[1] = $$;
          // => EnumValueList
          $$ = _parse_EnumValueList();
          // <= EnumValueList
          if (!success) break;
          seq[2] = $$;
          // => CLOSE_BRACE
          $$ = _parse_CLOSE_BRACE();
          // <= CLOSE_BRACE
          if (!success) break;
          seq[3] = $$;
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          seq[4] = $$;
          $$ = seq;
          if (success) {    
            // EnumTypeName
            final $1 = seq[0];
            // OPEN_BRACE
            final $2 = seq[1];
            // EnumValueList
            final $3 = seq[2];
            // CLOSE_BRACE
            final $4 = seq[3];
            // Metadata?
            final $5 = seq[4];
            final $start = startPos0;
            $$ = new EnumTypeSpecification(metadata: $5, taggedType: $1, values: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= EnumTypeName OPEN_BRACE EnumValueList CLOSE_BRACE Metadata? # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'enum'
      _failure(_expect12);
    }
    // <= EnumTypeName OPEN_BRACE EnumValueList CLOSE_BRACE Metadata? # Choice
    if (_cacheable[39]) {
      _addToCache($$, pos, 39);
    }    
    return $$;
  }
  
  dynamic _parse_EnumTypeName() {
    // SENTENCE (NONTERMINAL)
    // EnumTypeName <- TYPE_QUALIFIERS? ENUM Metadata? IDENTIFIER?
    var $$;          
    var pos = _cursor;             
    if(_cachePos[15] >= pos) {
      $$ = _getFromCache(15);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[15] = pos;
    }  
    // => TYPE_QUALIFIERS? ENUM Metadata? IDENTIFIER? # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        // => TYPE_QUALIFIERS? ENUM Metadata? IDENTIFIER? # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => TYPE_QUALIFIERS?
          var testing0 = _testing;
          _testing = _cursor;
          // => TYPE_QUALIFIERS
          $$ = _parse_TYPE_QUALIFIERS();
          // <= TYPE_QUALIFIERS
          success = true; 
          _testing = testing0;
          // <= TYPE_QUALIFIERS?
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          // => ENUM
          $$ = _parse_ENUM();
          // <= ENUM
          if (!success) break;
          seq[1] = $$;
          // => Metadata?
          var testing1 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing1;
          // <= Metadata?
          if (!success) break;
          seq[2] = $$;
          // => IDENTIFIER?
          var testing2 = _testing;
          _testing = _cursor;
          // => IDENTIFIER
          $$ = _parse_IDENTIFIER();
          // <= IDENTIFIER
          success = true; 
          _testing = testing2;
          // <= IDENTIFIER?
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            // TYPE_QUALIFIERS?
            final $1 = seq[0];
            // ENUM
            final $2 = seq[1];
            // Metadata?
            final $3 = seq[2];
            // IDENTIFIER?
            final $4 = seq[3];
            final $start = startPos0;
            $$ = new TaggedTypeSpecification(kind: $2, metadata: $3, qualifiers: $1, tag: $4);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= TYPE_QUALIFIERS? ENUM Metadata? IDENTIFIER? # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'enum'
      _failure(_expect12);
    }
    // <= TYPE_QUALIFIERS? ENUM Metadata? IDENTIFIER? # Choice
    if (_cacheable[15]) {
      _addToCache($$, pos, 15);
    }    
    return $$;
  }
  
  dynamic _parse_EnumValue() {
    // SENTENCE (NONTERMINAL)
    // EnumValue <- IDENTIFIER ASSIGN NUMBER / IDENTIFIER
    var $$;          
    var pos = _cursor;             
    if(_cachePos[41] >= pos) {
      $$ = _getFromCache(41);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[41] = pos;
    }  
    // => IDENTIFIER ASSIGN NUMBER / IDENTIFIER # Choice
    switch (_getState(_transitions0)) {
      // [A-Z] [_] [a-z]
      // EOF
      case 0:
      case 2:
        while (true) {
          // => IDENTIFIER ASSIGN NUMBER # Sequence
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => IDENTIFIER
            $$ = _parse_IDENTIFIER();
            // <= IDENTIFIER
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            // => ASSIGN
            $$ = _parse_ASSIGN();
            // <= ASSIGN
            if (!success) break;
            seq[1] = $$;
            // => NUMBER
            $$ = _parse_NUMBER();
            // <= NUMBER
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              // IDENTIFIER
              final $1 = seq[0];
              // ASSIGN
              final $2 = seq[1];
              // NUMBER
              final $3 = seq[2];
              final $start = startPos0;
              $$ = new EnumValueDeclaration(name: $1, value: $3);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          // <= IDENTIFIER ASSIGN NUMBER # Sequence
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          // => IDENTIFIER
          $$ = _parse_IDENTIFIER();
          // <= IDENTIFIER
          if (success) {    
            // IDENTIFIER
            final $1 = $$;
            final $start = startPos1;
            $$ = new EnumValueDeclaration(name: $1);
          }
          _startPos = startPos1;
          break;
        }
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER
      _failure(_expect15);
    }
    // <= IDENTIFIER ASSIGN NUMBER / IDENTIFIER # Choice
    if (_cacheable[41]) {
      _addToCache($$, pos, 41);
    }    
    return $$;
  }
  
  dynamic _parse_EnumValueList() {
    // SENTENCE (NONTERMINAL)
    // EnumValueList <- EnumValue (COMMA EnumValue)* COMMA?
    var $$;
    // => EnumValue (COMMA EnumValue)* COMMA? # Choice
    switch (_getState(_transitions0)) {
      // [A-Z] [_] [a-z]
      // EOF
      case 0:
      case 2:
        // => EnumValue (COMMA EnumValue)* COMMA? # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => EnumValue
          $$ = _parse_EnumValue();
          // <= EnumValue
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => (COMMA EnumValue)*
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            // => (COMMA EnumValue) # Choice
            switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
              // [,]
              case 0:
                // => COMMA EnumValue # Sequence
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  // => COMMA
                  $$ = _parse_COMMA();
                  // <= COMMA
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  // => EnumValue
                  $$ = _parse_EnumValue();
                  // <= EnumValue
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                // <= COMMA EnumValue # Sequence
                break;
              // No matches
              // EOF
              case 1:
              case 2:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              // Expected: ','
              _failure(_expect6);
            }
            // <= (COMMA EnumValue) # Choice
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          // <= (COMMA EnumValue)*
          if (!success) break;
          seq[1] = $$;
          // => COMMA?
          var testing1 = _testing;
          _testing = _cursor;
          // => COMMA
          $$ = _parse_COMMA();
          // <= COMMA
          success = true; 
          _testing = testing1;
          // <= COMMA?
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // EnumValue
            final $1 = seq[0];
            // (COMMA EnumValue)*
            final $2 = seq[1];
            // COMMA?
            final $3 = seq[2];
            final $start = startPos0;
            $$ = _list($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= EnumValue (COMMA EnumValue)* COMMA? # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER
      _failure(_expect15);
    }
    // <= EnumValue (COMMA EnumValue)* COMMA? # Choice
    return $$;
  }
  
  dynamic _parse_FLOAT() {
    // LEXEME (TOKEN)
    // FLOAT <- 'float' !IDENT_PART SPACING
    var $$;
    _token = 12;  
    _tokenStart = _cursor;  
    // => 'float' !IDENT_PART SPACING # Choice
    switch (_ch == 102 ? 0 : _ch == -1 ? 2 : 1) {
      // [f]
      case 0:
        // => 'float' !IDENT_PART SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => 'float'
          $$ = _matchString(_strings4, 'float');
          // <= 'float'
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => !IDENT_PART
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          // => IDENT_PART
          $$ = _parse_IDENT_PART();
          // <= IDENT_PART
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          // <= !IDENT_PART
          if (!success) break;
          seq[1] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // 'float'
            final $1 = seq[0];
            // !IDENT_PART
            final $2 = seq[1];
            // SPACING
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= 'float' !IDENT_PART SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'float'
      _failure(_expect29);
    }
    // <= 'float' !IDENT_PART SPACING # Choice
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_FunctionDeclartion() {
    // SENTENCE (NONTERMINAL)
    // FunctionDeclartion <- Metadata? Type Identifier FunctionParameters
    var $$;
    // => Metadata? Type Identifier FunctionParameters # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        // => Metadata? Type Identifier FunctionParameters # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          // => Type
          $$ = _parse_Type();
          // <= Type
          if (!success) break;
          seq[1] = $$;
          // => Identifier
          $$ = _parse_Identifier();
          // <= Identifier
          if (!success) break;
          seq[2] = $$;
          // => FunctionParameters
          $$ = _parse_FunctionParameters();
          // <= FunctionParameters
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            // Metadata?
            final $1 = seq[0];
            // Type
            final $2 = seq[1];
            // Identifier
            final $3 = seq[2];
            // FunctionParameters
            final $4 = seq[3];
            final $start = startPos0;
            $$ = new FunctionDeclaration(metadata: $1, identifier: $3, parameters: $4, returnType: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= Metadata? Type Identifier FunctionParameters # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum'
      _failure(_expect3);
    }
    // <= Metadata? Type Identifier FunctionParameters # Choice
    return $$;
  }
  
  dynamic _parse_FunctionParameter() {
    // SENTENCE (NONTERMINAL)
    // FunctionParameter <- ArrayParameter / PointerParameter / SimpleParameter
    var $$;          
    var pos = _cursor;             
    if(_cachePos[24] >= pos) {
      $$ = _getFromCache(24);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[24] = pos;
    }  
    // => ArrayParameter / PointerParameter / SimpleParameter # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        while (true) {
          var startPos0 = _startPos;
          _startPos = _cursor;
          // => ArrayParameter
          $$ = _parse_ArrayParameter();
          // <= ArrayParameter
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          // => PointerParameter
          $$ = _parse_PointerParameter();
          // <= PointerParameter
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          // => SimpleParameter
          $$ = _parse_SimpleParameter();
          // <= SimpleParameter
          _startPos = startPos2;
          break;
        }
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum'
      _failure(_expect3);
    }
    // <= ArrayParameter / PointerParameter / SimpleParameter # Choice
    if (_cacheable[24]) {
      _addToCache($$, pos, 24);
    }    
    return $$;
  }
  
  dynamic _parse_FunctionParameterList() {
    // SENTENCE (NONTERMINAL)
    // FunctionParameterList <- FunctionParameterListNoVaList (COMMA VA_LIST_PARAMETER)?
    var $$;
    // => FunctionParameterListNoVaList (COMMA VA_LIST_PARAMETER)? # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        // => FunctionParameterListNoVaList (COMMA VA_LIST_PARAMETER)? # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => FunctionParameterListNoVaList
          $$ = _parse_FunctionParameterListNoVaList();
          // <= FunctionParameterListNoVaList
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => (COMMA VA_LIST_PARAMETER)?
          var testing0 = _testing;
          _testing = _cursor;
          // => (COMMA VA_LIST_PARAMETER) # Choice
          switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
            // [,]
            case 0:
              // => COMMA VA_LIST_PARAMETER # Sequence
              var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
              _startPos = _cursor;
              while (true) {  
                // => COMMA
                $$ = _parse_COMMA();
                // <= COMMA
                if (!success) break;
                var seq = new List(2)..[0] = $$;
                // => VA_LIST_PARAMETER
                $$ = _parse_VA_LIST_PARAMETER();
                // <= VA_LIST_PARAMETER
                if (!success) break;
                seq[1] = $$;
                $$ = seq;
                if (success) {    
                  // COMMA
                  final $1 = seq[0];
                  // VA_LIST_PARAMETER
                  final $2 = seq[1];
                  final $start = startPos1;
                  $$ = $2;
                }
                break;
              }
              if (!success) {
                _ch = ch1;
                _cursor = pos1;
              }
              _startPos = startPos1;
              // <= COMMA VA_LIST_PARAMETER # Sequence
              break;
            // No matches
            // EOF
            case 1:
            case 2:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            // Expected: ','
            _failure(_expect6);
          }
          // <= (COMMA VA_LIST_PARAMETER) # Choice
          success = true; 
          _testing = testing0;
          // <= (COMMA VA_LIST_PARAMETER)?
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // FunctionParameterListNoVaList
            final $1 = seq[0];
            // (COMMA VA_LIST_PARAMETER)?
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _createParameters($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= FunctionParameterListNoVaList (COMMA VA_LIST_PARAMETER)? # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum'
      _failure(_expect3);
    }
    // <= FunctionParameterListNoVaList (COMMA VA_LIST_PARAMETER)? # Choice
    return $$;
  }
  
  dynamic _parse_FunctionParameterListNoVaList() {
    // SENTENCE (NONTERMINAL)
    // FunctionParameterListNoVaList <- FunctionParameter (COMMA FunctionParameter)*
    var $$;
    // => FunctionParameter (COMMA FunctionParameter)* # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        // => FunctionParameter (COMMA FunctionParameter)* # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => FunctionParameter
          $$ = _parse_FunctionParameter();
          // <= FunctionParameter
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => (COMMA FunctionParameter)*
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            // => (COMMA FunctionParameter) # Choice
            switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
              // [,]
              case 0:
                // => COMMA FunctionParameter # Sequence
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  // => COMMA
                  $$ = _parse_COMMA();
                  // <= COMMA
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  // => FunctionParameter
                  $$ = _parse_FunctionParameter();
                  // <= FunctionParameter
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                // <= COMMA FunctionParameter # Sequence
                break;
              // No matches
              // EOF
              case 1:
              case 2:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              // Expected: ','
              _failure(_expect6);
            }
            // <= (COMMA FunctionParameter) # Choice
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          // <= (COMMA FunctionParameter)*
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // FunctionParameter
            final $1 = seq[0];
            // (COMMA FunctionParameter)*
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _list($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= FunctionParameter (COMMA FunctionParameter)* # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum'
      _failure(_expect3);
    }
    // <= FunctionParameter (COMMA FunctionParameter)* # Choice
    return $$;
  }
  
  dynamic _parse_FunctionParameters() {
    // SENTENCE (NONTERMINAL)
    // FunctionParameters <- OPEN_PAREN FunctionParameterList? CLOSE_PAREN Metadata?
    var $$;
    // => OPEN_PAREN FunctionParameterList? CLOSE_PAREN Metadata? # Choice
    switch (_ch == 40 ? 0 : _ch == -1 ? 2 : 1) {
      // [(]
      case 0:
        // => OPEN_PAREN FunctionParameterList? CLOSE_PAREN Metadata? # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => OPEN_PAREN
          $$ = _parse_OPEN_PAREN();
          // <= OPEN_PAREN
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          // => FunctionParameterList?
          var testing0 = _testing;
          _testing = _cursor;
          // => FunctionParameterList
          $$ = _parse_FunctionParameterList();
          // <= FunctionParameterList
          success = true; 
          _testing = testing0;
          // <= FunctionParameterList?
          if (!success) break;
          seq[1] = $$;
          // => CLOSE_PAREN
          $$ = _parse_CLOSE_PAREN();
          // <= CLOSE_PAREN
          if (!success) break;
          seq[2] = $$;
          // => Metadata?
          var testing1 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing1;
          // <= Metadata?
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            // OPEN_PAREN
            final $1 = seq[0];
            // FunctionParameterList?
            final $2 = seq[1];
            // CLOSE_PAREN
            final $3 = seq[2];
            // Metadata?
            final $4 = seq[3];
            final $start = startPos0;
            $$ = new FunctionParameters(metadata: $4, parameters: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= OPEN_PAREN FunctionParameterList? CLOSE_PAREN Metadata? # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '('
      _failure(_expect16);
    }
    // <= OPEN_PAREN FunctionParameterList? CLOSE_PAREN Metadata? # Choice
    return $$;
  }
  
  dynamic _parse_HEXADECIMAL_DIGIT() {
    // MORHEME
    // HEXADECIMAL_DIGIT <- [0-af]
    var $$;
    // => [0-af] # Choice
    switch (_getState(_transitions13)) {
      // [0-a] [f]
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => [0-af]
        $$ = _matchMapping(48, 102, _mapping1);
        // <= [0-af]
        _startPos = startPos0;
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(const [null]);
    }
    // <= [0-af] # Choice
    return $$;
  }
  
  dynamic _parse_HEXADECIMAL_ESCAPE_SEQUENCE() {
    // MORHEME
    // HEXADECIMAL_ESCAPE_SEQUENCE <- '\\x' HEXADECIMAL_DIGIT HEXADECIMAL_ESCAPE_SEQUENCE1
    var $$;
    // => '\\x' HEXADECIMAL_DIGIT HEXADECIMAL_ESCAPE_SEQUENCE1 # Choice
    switch (_ch == 92 ? 0 : _ch == -1 ? 2 : 1) {
      // [\\]
      case 0:
        // => '\\x' HEXADECIMAL_DIGIT HEXADECIMAL_ESCAPE_SEQUENCE1 # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => '\\x'
          $$ = _matchString(_strings16, '\\x');
          // <= '\\x'
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => HEXADECIMAL_DIGIT
          $$ = _parse_HEXADECIMAL_DIGIT();
          // <= HEXADECIMAL_DIGIT
          if (!success) break;
          seq[1] = $$;
          // => HEXADECIMAL_ESCAPE_SEQUENCE1
          $$ = _parse_HEXADECIMAL_ESCAPE_SEQUENCE1();
          // <= HEXADECIMAL_ESCAPE_SEQUENCE1
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // '\\x'
            final $1 = seq[0];
            // HEXADECIMAL_DIGIT
            final $2 = seq[1];
            // HEXADECIMAL_ESCAPE_SEQUENCE1
            final $3 = seq[2];
            final $start = startPos0;
            $$ = int.parse(_text(2), radix: 16);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= '\\x' HEXADECIMAL_DIGIT HEXADECIMAL_ESCAPE_SEQUENCE1 # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: \x
      _failure(_expect48);
    }
    // <= '\\x' HEXADECIMAL_DIGIT HEXADECIMAL_ESCAPE_SEQUENCE1 # Choice
    return $$;
  }
  
  dynamic _parse_HEXADECIMAL_ESCAPE_SEQUENCE1() {
    // MORHEME
    // HEXADECIMAL_ESCAPE_SEQUENCE1 <- HEXADECIMAL_DIGIT HEXADECIMAL_ESCAPE_SEQUENCE1 / ''
    var $$;
    // => HEXADECIMAL_DIGIT HEXADECIMAL_ESCAPE_SEQUENCE1 / '' # Choice
    switch (_getState(_transitions14)) {
      // [\u0000-/] [b-e] [g-\u0010ffff]
      // EOF
      case 0:
      case 3:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => ''
        success = true;
        $$ = '';
        // <= ''
        _startPos = startPos0;
        break;
      // [0-a] [f]
      case 1:
        while (true) {
          // => HEXADECIMAL_DIGIT HEXADECIMAL_ESCAPE_SEQUENCE1 # Sequence
          var ch0 = _ch, pos0 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => HEXADECIMAL_DIGIT
            $$ = _parse_HEXADECIMAL_DIGIT();
            // <= HEXADECIMAL_DIGIT
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => HEXADECIMAL_ESCAPE_SEQUENCE1
            $$ = _parse_HEXADECIMAL_ESCAPE_SEQUENCE1();
            // <= HEXADECIMAL_ESCAPE_SEQUENCE1
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // HEXADECIMAL_DIGIT
              final $1 = seq[0];
              // HEXADECIMAL_ESCAPE_SEQUENCE1
              final $2 = seq[1];
              final $start = startPos1;
              $$ = _text();
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos1;
          // <= HEXADECIMAL_DIGIT HEXADECIMAL_ESCAPE_SEQUENCE1 # Sequence
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          // => ''
          success = true;
          $$ = '';
          // <= ''
          _startPos = startPos2;
          break;
        }
        break;
      // No matches
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(const [null]);
    }
    // <= HEXADECIMAL_DIGIT HEXADECIMAL_ESCAPE_SEQUENCE1 / '' # Choice
    return $$;
  }
  
  dynamic _parse_HEX_QUAD() {
    // MORHEME
    // HEX_QUAD <- HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT
    var $$;
    // => HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT # Choice
    switch (_getState(_transitions13)) {
      // [0-a] [f]
      case 0:
        // => HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => HEXADECIMAL_DIGIT
          $$ = _parse_HEXADECIMAL_DIGIT();
          // <= HEXADECIMAL_DIGIT
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          // => HEXADECIMAL_DIGIT
          $$ = _parse_HEXADECIMAL_DIGIT();
          // <= HEXADECIMAL_DIGIT
          if (!success) break;
          seq[1] = $$;
          // => HEXADECIMAL_DIGIT
          $$ = _parse_HEXADECIMAL_DIGIT();
          // <= HEXADECIMAL_DIGIT
          if (!success) break;
          seq[2] = $$;
          // => HEXADECIMAL_DIGIT
          $$ = _parse_HEXADECIMAL_DIGIT();
          // <= HEXADECIMAL_DIGIT
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            // HEXADECIMAL_DIGIT
            final $1 = seq[0];
            // HEXADECIMAL_DIGIT
            final $2 = seq[1];
            // HEXADECIMAL_DIGIT
            final $3 = seq[2];
            // HEXADECIMAL_DIGIT
            final $4 = seq[3];
            final $start = startPos0;
            $$ = _text();
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(const [null]);
    }
    // <= HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT # Choice
    return $$;
  }
  
  dynamic _parse_IDENT() {
    // LEXEME (TOKEN)
    // IDENT <- IDENT_START IDENT_CONT* SPACING
    var $$;          
    var pos = _cursor;             
    if(_cachePos[69] >= pos) {
      $$ = _getFromCache(69);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[69] = pos;
    }  
    _token = 13;    
    _tokenStart = _cursor;    
    // => IDENT_START IDENT_CONT* SPACING # Choice
    switch (_getState(_transitions0)) {
      // [A-Z] [_] [a-z]
      case 0:
        // => IDENT_START IDENT_CONT* SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => IDENT_START
          $$ = _parse_IDENT_START();
          // <= IDENT_START
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => IDENT_CONT*
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            // => IDENT_CONT
            $$ = _parse_IDENT_CONT();
            // <= IDENT_CONT
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          // <= IDENT_CONT*
          if (!success) break;
          seq[1] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // IDENT_START
            final $1 = seq[0];
            // IDENT_CONT*
            final $2 = seq[1];
            // SPACING
            final $3 = seq[2];
            final $start = startPos0;
            $$ = _flatten([$1, $2]).join();
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= IDENT_START IDENT_CONT* SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENT
      _failure(_expect5);
    }
    // <= IDENT_START IDENT_CONT* SPACING # Choice
    if (_cacheable[69]) {
      _addToCache($$, pos, 69);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_IDENTIFIER() {
    // LEXEME (TOKEN)
    // IDENTIFIER <- !RESERVED_WORD IDENT_START IDENT_CONT* SPACING
    var $$;          
    var pos = _cursor;             
    if(_cachePos[70] >= pos) {
      $$ = _getFromCache(70);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[70] = pos;
    }  
    _token = 14;    
    _tokenStart = _cursor;    
    // => !RESERVED_WORD IDENT_START IDENT_CONT* SPACING # Choice
    switch (_getState(_transitions0)) {
      // [A-Z] [_] [a-z]
      // EOF
      case 0:
      case 2:
        // => !RESERVED_WORD IDENT_START IDENT_CONT* SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => !RESERVED_WORD
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          // => RESERVED_WORD
          $$ = _parse_RESERVED_WORD();
          // <= RESERVED_WORD
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          // <= !RESERVED_WORD
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          // => IDENT_START
          $$ = _parse_IDENT_START();
          // <= IDENT_START
          if (!success) break;
          seq[1] = $$;
          // => IDENT_CONT*
          var testing1 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            // => IDENT_CONT
            $$ = _parse_IDENT_CONT();
            // <= IDENT_CONT
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing1;
              $$ = reps;
              break; 
            }
          }
          // <= IDENT_CONT*
          if (!success) break;
          seq[2] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            // !RESERVED_WORD
            final $1 = seq[0];
            // IDENT_START
            final $2 = seq[1];
            // IDENT_CONT*
            final $3 = seq[2];
            // SPACING
            final $4 = seq[3];
            final $start = startPos0;
            $$ = _flatten([$2, $3]).join();
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= !RESERVED_WORD IDENT_START IDENT_CONT* SPACING # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER
      _failure(_expect15);
    }
    // <= !RESERVED_WORD IDENT_START IDENT_CONT* SPACING # Choice
    if (_cacheable[70]) {
      _addToCache($$, pos, 70);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_IDENT_CONT() {
    // MORHEME
    // IDENT_CONT <- IDENT_START / [0-9]
    var $$;
    // => IDENT_START / [0-9] # Choice
    switch (_getState(_transitions15)) {
      // [0-9]
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => [0-9]
        $$ = _matchRange(48, 57);
        // <= [0-9]
        _startPos = startPos0;
        break;
      // [A-Z] [_] [a-z]
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        // => IDENT_START
        $$ = _parse_IDENT_START();
        // <= IDENT_START
        _startPos = startPos1;
        break;
      // No matches
      // EOF
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(const [null]);
    }
    // <= IDENT_START / [0-9] # Choice
    return $$;
  }
  
  dynamic _parse_IDENT_PART() {
    // MORHEME
    // IDENT_PART <- IDENT_START / IDENT_CONT
    var $$;
    // => IDENT_START / IDENT_CONT # Choice
    switch (_getState(_transitions15)) {
      // [0-9]
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => IDENT_CONT
        $$ = _parse_IDENT_CONT();
        // <= IDENT_CONT
        _startPos = startPos0;
        break;
      // [A-Z] [_] [a-z]
      case 1:
        while (true) {
          var startPos1 = _startPos;
          _startPos = _cursor;
          // => IDENT_START
          $$ = _parse_IDENT_START();
          // <= IDENT_START
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          // => IDENT_CONT
          $$ = _parse_IDENT_CONT();
          // <= IDENT_CONT
          _startPos = startPos2;
          break;
        }
        break;
      // No matches
      // EOF
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(const [null]);
    }
    // <= IDENT_START / IDENT_CONT # Choice
    return $$;
  }
  
  dynamic _parse_IDENT_START() {
    // MORHEME
    // IDENT_START <- [A-Z_a-z]
    var $$;
    // => [A-Z_a-z] # Choice
    switch (_getState(_transitions0)) {
      // [A-Z] [_] [a-z]
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => [A-Z_a-z]
        $$ = _matchMapping(65, 122, _mapping2);
        // <= [A-Z_a-z]
        _startPos = startPos0;
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(const [null]);
    }
    // <= [A-Z_a-z] # Choice
    return $$;
  }
  
  dynamic _parse_INT() {
    // LEXEME (TOKEN)
    // INT <- 'int' !IDENT_PART SPACING
    var $$;          
    var pos = _cursor;             
    if(_cachePos[71] >= pos) {
      $$ = _getFromCache(71);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[71] = pos;
    }  
    _token = 15;    
    _tokenStart = _cursor;    
    // => 'int' !IDENT_PART SPACING # Choice
    switch (_ch == 105 ? 0 : _ch == -1 ? 2 : 1) {
      // [i]
      case 0:
        // => 'int' !IDENT_PART SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => 'int'
          $$ = _matchString(_strings5, 'int');
          // <= 'int'
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => !IDENT_PART
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          // => IDENT_PART
          $$ = _parse_IDENT_PART();
          // <= IDENT_PART
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          // <= !IDENT_PART
          if (!success) break;
          seq[1] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // 'int'
            final $1 = seq[0];
            // !IDENT_PART
            final $2 = seq[1];
            // SPACING
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= 'int' !IDENT_PART SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'int'
      _failure(_expect30);
    }
    // <= 'int' !IDENT_PART SPACING # Choice
    if (_cacheable[71]) {
      _addToCache($$, pos, 71);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_INTEGER() {
    // MORHEME
    // INTEGER <- SIGN? [0-9]+ SPACING
    var $$;
    // => SIGN? [0-9]+ SPACING # Choice
    switch (_getState(_transitions7)) {
      // [+] [-] [0-9]
      case 0:
        // => SIGN? [0-9]+ SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => SIGN?
          var testing0 = _testing;
          _testing = _cursor;
          // => SIGN
          $$ = _parse_SIGN();
          // <= SIGN
          success = true; 
          _testing = testing0;
          // <= SIGN?
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => [0-9]+
          var testing1;
          for (var first = true, reps; ;) {  
            // => [0-9]  
            $$ = _matchRange(48, 57);  
            // <= [0-9]  
            if (success) {
             if (first) {      
                first = false;
                reps = [$$];
                testing1 = _testing;                  
              } else {
                reps.add($$);
              }
              _testing = _cursor;   
            } else {
              success = !first;
              if (success) {      
                _testing = testing1;
                $$ = reps;      
              } else $$ = null;
              break;
            }  
          }
          // <= [0-9]+
          if (!success) break;
          seq[1] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // SIGN?
            final $1 = seq[0];
            // [0-9]+
            final $2 = seq[1];
            // SPACING
            final $3 = seq[2];
            final $start = startPos0;
            $$ = _parseInt($1, $2.join(), 10);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= SIGN? [0-9]+ SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(const [null]);
    }
    // <= SIGN? [0-9]+ SPACING # Choice
    return $$;
  }
  
  dynamic _parse_Identifier() {
    // SENTENCE (NONTERMINAL)
    // Identifier <- IDENTIFIER
    var $$;          
    var pos = _cursor;             
    if(_cachePos[20] >= pos) {
      $$ = _getFromCache(20);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[20] = pos;
    }  
    // => IDENTIFIER # Choice
    switch (_getState(_transitions0)) {
      // [A-Z] [_] [a-z]
      // EOF
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => IDENTIFIER
        $$ = _parse_IDENTIFIER();
        // <= IDENTIFIER
        if (success) {    
          // IDENTIFIER
          final $1 = $$;
          final $start = startPos0;
          $$ = new Identifier(name: $1);
        }
        _startPos = startPos0;
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER
      _failure(_expect15);
    }
    // <= IDENTIFIER # Choice
    if (_cacheable[20]) {
      _addToCache($$, pos, 20);
    }    
    return $$;
  }
  
  dynamic _parse_IdentifierMD() {
    // SENTENCE (NONTERMINAL)
    // IdentifierMD <- IDENTIFIER Metadata?
    var $$;          
    var pos = _cursor;             
    if(_cachePos[27] >= pos) {
      $$ = _getFromCache(27);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[27] = pos;
    }  
    // => IDENTIFIER Metadata? # Choice
    switch (_getState(_transitions0)) {
      // [A-Z] [_] [a-z]
      // EOF
      case 0:
      case 2:
        // => IDENTIFIER Metadata? # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => IDENTIFIER
          $$ = _parse_IDENTIFIER();
          // <= IDENTIFIER
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // IDENTIFIER
            final $1 = seq[0];
            // Metadata?
            final $2 = seq[1];
            final $start = startPos0;
            $$ = new Identifier(metadata: $2, name: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= IDENTIFIER Metadata? # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER
      _failure(_expect15);
    }
    // <= IDENTIFIER Metadata? # Choice
    if (_cacheable[27]) {
      _addToCache($$, pos, 27);
    }    
    return $$;
  }
  
  dynamic _parse_LEADING_SPACES() {
    // LEXEME (TOKEN)
    // LEADING_SPACES <- SPACING
    var $$;
    _token = 16;  
    _tokenStart = _cursor;  
    // => SPACING # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => SPACING
        $$ = _parse_SPACING();
        // <= SPACING
        _startPos = startPos0;
        break;
      // No matches
      case 1:
        $$ = null;
        success = true;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: LEADING_SPACES
      _failure(_expect31);
    }
    // <= SPACING # Choice
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_LONG() {
    // MORHEME
    // LONG <- 'long' !IDENT_PART SPACING
    var $$;
    // => 'long' !IDENT_PART SPACING # Choice
    switch (_ch == 108 ? 0 : _ch == -1 ? 2 : 1) {
      // [l]
      case 0:
        // => 'long' !IDENT_PART SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => 'long'
          $$ = _matchString(_strings17, 'long');
          // <= 'long'
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => !IDENT_PART
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          // => IDENT_PART
          $$ = _parse_IDENT_PART();
          // <= IDENT_PART
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          // <= !IDENT_PART
          if (!success) break;
          seq[1] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // 'long'
            final $1 = seq[0];
            // !IDENT_PART
            final $2 = seq[1];
            // SPACING
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= 'long' !IDENT_PART SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: long
      _failure(_expect49);
    }
    // <= 'long' !IDENT_PART SPACING # Choice
    return $$;
  }
  
  dynamic _parse_LONG_TYPE() {
    // LEXEME (TOKEN)
    // LONG_TYPE <- LONG LONG / LONG
    var $$;          
    var pos = _cursor;             
    if(_cachePos[73] >= pos) {
      $$ = _getFromCache(73);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[73] = pos;
    }  
    _token = 17;    
    _tokenStart = _cursor;    
    // => LONG LONG / LONG # Choice
    switch (_ch == 108 ? 0 : _ch == -1 ? 2 : 1) {
      // [l]
      case 0:
        while (true) {
          // => LONG LONG # Sequence
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => LONG
            $$ = _parse_LONG();
            // <= LONG
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => LONG
            $$ = _parse_LONG();
            // <= LONG
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // LONG
              final $1 = seq[0];
              // LONG
              final $2 = seq[1];
              final $start = startPos0;
              $$ = _createInt([$1, $2]);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          // <= LONG LONG # Sequence
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          // => LONG
          $$ = _parse_LONG();
          // <= LONG
          _startPos = startPos1;
          break;
        }
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'long'
      _failure(_expect32);
    }
    // <= LONG LONG / LONG # Choice
    if (_cacheable[73]) {
      _addToCache($$, pos, 73);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_MINUS() {
    // MORHEME
    // MINUS <- '-' SPACING
    var $$;
    // => '-' SPACING # Choice
    switch (_ch == 45 ? 0 : _ch == -1 ? 2 : 1) {
      // [-]
      case 0:
        // => '-' SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => '-'
          $$ = '-';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          // <= '-'
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // '-'
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= '-' SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: -
      _failure(_expect34);
    }
    // <= '-' SPACING # Choice
    return $$;
  }
  
  dynamic _parse_Metadata() {
    // SENTENCE (NONTERMINAL)
    // Metadata <- AttributeSpecifier+
    var $$;          
    var pos = _cursor;             
    if(_cachePos[4] >= pos) {
      $$ = _getFromCache(4);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[4] = pos;
    }  
    // => AttributeSpecifier+ # Choice
    switch (_ch == 95 ? 0 : _ch == -1 ? 2 : 1) {
      // [_]
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => AttributeSpecifier+
        var testing0;
        for (var first = true, reps; ;) {  
          // => AttributeSpecifier  
          $$ = _parse_AttributeSpecifier();  
          // <= AttributeSpecifier  
          if (success) {
           if (first) {      
              first = false;
              reps = [$$];
              testing0 = _testing;                  
            } else {
              reps.add($$);
            }
            _testing = _cursor;   
          } else {
            success = !first;
            if (success) {      
              _testing = testing0;
              $$ = reps;      
            } else $$ = null;
            break;
          }  
        }
        // <= AttributeSpecifier+
        if (success) {    
          // AttributeSpecifier+
          final $1 = $$;
          final $start = startPos0;
          $$ = new Metadata($1);
        }
        _startPos = startPos0;
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '__attribute__'
      _failure(_expect4);
    }
    // <= AttributeSpecifier+ # Choice
    if (_cacheable[4]) {
      _addToCache($$, pos, 4);
    }    
    return $$;
  }
  
  dynamic _parse_NUMBER() {
    // LEXEME (TOKEN)
    // NUMBER <- OCTAL_NUMBER / INTEGER
    var $$;          
    var pos = _cursor;             
    if(_cachePos[74] >= pos) {
      $$ = _getFromCache(74);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[74] = pos;
    }  
    _token = 18;    
    _tokenStart = _cursor;    
    // => OCTAL_NUMBER / INTEGER # Choice
    switch (_getState(_transitions9)) {
      // [+] [-] [0]
      case 0:
        while (true) {
          var startPos0 = _startPos;
          _startPos = _cursor;
          // => OCTAL_NUMBER
          $$ = _parse_OCTAL_NUMBER();
          // <= OCTAL_NUMBER
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          // => INTEGER
          $$ = _parse_INTEGER();
          // <= INTEGER
          _startPos = startPos1;
          break;
        }
        break;
      // [1-9]
      case 1:
        var startPos2 = _startPos;
        _startPos = _cursor;
        // => INTEGER
        $$ = _parse_INTEGER();
        // <= INTEGER
        _startPos = startPos2;
        break;
      // No matches
      // EOF
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: NUMBER
      _failure(_expect33);
    }
    // <= OCTAL_NUMBER / INTEGER # Choice
    if (_cacheable[74]) {
      _addToCache($$, pos, 74);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_OCTAL_DIGIT() {
    // MORHEME
    // OCTAL_DIGIT <- [0-7]
    var $$;
    // => [0-7] # Choice
    switch (_ch >= 48 && _ch <= 55 ? 0 : _ch == -1 ? 2 : 1) {
      // [0-7]
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => [0-7]
        $$ = _matchRange(48, 55);
        // <= [0-7]
        _startPos = startPos0;
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(const [null]);
    }
    // <= [0-7] # Choice
    return $$;
  }
  
  dynamic _parse_OCTAL_ESCAPE_SEQUENCE() {
    // MORHEME
    // OCTAL_ESCAPE_SEQUENCE <- '\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT / '\\' OCTAL_DIGIT OCTAL_DIGIT / '\\' OCTAL_DIGIT
    var $$;
    // => '\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT / '\\' OCTAL_DIGIT OCTAL_DIGIT / '\\' OCTAL_DIGIT # Choice
    switch (_ch == 92 ? 0 : _ch == -1 ? 2 : 1) {
      // [\\]
      case 0:
        while (true) {
          // => '\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT # Sequence
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => '\\'
            $$ = '\\';
            success = true;
            if (++_cursor < _inputLen) {
              _ch = _input[_cursor];
            } else {
              _ch = -1;
            }
            // <= '\\'
            if (!success) break;
            var seq = new List(4)..[0] = $$;
            // => OCTAL_DIGIT
            $$ = _parse_OCTAL_DIGIT();
            // <= OCTAL_DIGIT
            if (!success) break;
            seq[1] = $$;
            // => OCTAL_DIGIT
            $$ = _parse_OCTAL_DIGIT();
            // <= OCTAL_DIGIT
            if (!success) break;
            seq[2] = $$;
            // => OCTAL_DIGIT
            $$ = _parse_OCTAL_DIGIT();
            // <= OCTAL_DIGIT
            if (!success) break;
            seq[3] = $$;
            $$ = seq;
            if (success) {    
              // '\\'
              final $1 = seq[0];
              // OCTAL_DIGIT
              final $2 = seq[1];
              // OCTAL_DIGIT
              final $3 = seq[2];
              // OCTAL_DIGIT
              final $4 = seq[3];
              final $start = startPos0;
              $$ = int.parse(_text(1), radix: 8);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          // <= '\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT # Sequence
          if (success) break;
          // => '\\' OCTAL_DIGIT OCTAL_DIGIT # Sequence
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => '\\'
            $$ = '\\';
            success = true;
            if (++_cursor < _inputLen) {
              _ch = _input[_cursor];
            } else {
              _ch = -1;
            }
            // <= '\\'
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            // => OCTAL_DIGIT
            $$ = _parse_OCTAL_DIGIT();
            // <= OCTAL_DIGIT
            if (!success) break;
            seq[1] = $$;
            // => OCTAL_DIGIT
            $$ = _parse_OCTAL_DIGIT();
            // <= OCTAL_DIGIT
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              // '\\'
              final $1 = seq[0];
              // OCTAL_DIGIT
              final $2 = seq[1];
              // OCTAL_DIGIT
              final $3 = seq[2];
              final $start = startPos1;
              $$ = int.parse(_text(1), radix: 8);
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          // <= '\\' OCTAL_DIGIT OCTAL_DIGIT # Sequence
          if (success) break;
          // => '\\' OCTAL_DIGIT # Sequence
          var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => '\\'
            $$ = '\\';
            success = true;
            if (++_cursor < _inputLen) {
              _ch = _input[_cursor];
            } else {
              _ch = -1;
            }
            // <= '\\'
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => OCTAL_DIGIT
            $$ = _parse_OCTAL_DIGIT();
            // <= OCTAL_DIGIT
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // '\\'
              final $1 = seq[0];
              // OCTAL_DIGIT
              final $2 = seq[1];
              final $start = startPos2;
              $$ = int.parse($2, radix: 8);
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos2;
          // <= '\\' OCTAL_DIGIT # Sequence
          break;
        }
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: \
      _failure(_expect50);
    }
    // <= '\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT / '\\' OCTAL_DIGIT OCTAL_DIGIT / '\\' OCTAL_DIGIT # Choice
    return $$;
  }
  
  dynamic _parse_OCTAL_NUMBER() {
    // MORHEME
    // OCTAL_NUMBER <- SIGN? [0] [0-9]+
    var $$;
    // => SIGN? [0] [0-9]+ # Choice
    switch (_getState(_transitions16)) {
      // [+] [-] [0]
      case 0:
        // => SIGN? [0] [0-9]+ # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => SIGN?
          var testing0 = _testing;
          _testing = _cursor;
          // => SIGN
          $$ = _parse_SIGN();
          // <= SIGN
          success = true; 
          _testing = testing0;
          // <= SIGN?
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => [0]
          $$ = _matchChar(48, '0');
          // <= [0]
          if (!success) break;
          seq[1] = $$;
          // => [0-9]+
          var testing1;
          for (var first = true, reps; ;) {  
            // => [0-9]  
            $$ = _matchRange(48, 57);  
            // <= [0-9]  
            if (success) {
             if (first) {      
                first = false;
                reps = [$$];
                testing1 = _testing;                  
              } else {
                reps.add($$);
              }
              _testing = _cursor;   
            } else {
              success = !first;
              if (success) {      
                _testing = testing1;
                $$ = reps;      
              } else $$ = null;
              break;
            }  
          }
          // <= [0-9]+
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // SIGN?
            final $1 = seq[0];
            // [0]
            final $2 = seq[1];
            // [0-9]+
            final $3 = seq[2];
            final $start = startPos0;
            $$ = _parseInt($1, _flatten([$2, $3]).join(), 8);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= SIGN? [0] [0-9]+ # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(const [null]);
    }
    // <= SIGN? [0] [0-9]+ # Choice
    return $$;
  }
  
  dynamic _parse_OPEN_BRACE() {
    // LEXEME (TOKEN)
    // OPEN_BRACE <- '{' SPACING
    var $$;          
    var pos = _cursor;             
    if(_cachePos[75] >= pos) {
      $$ = _getFromCache(75);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[75] = pos;
    }  
    _token = 19;    
    _tokenStart = _cursor;    
    // => '{' SPACING # Choice
    switch (_ch == 123 ? 0 : _ch == -1 ? 2 : 1) {
      // [{]
      case 0:
        // => '{' SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => '{'
          $$ = '{';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          // <= '{'
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // '{'
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= '{' SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '{'
      _failure(_expect18);
    }
    // <= '{' SPACING # Choice
    if (_cacheable[75]) {
      _addToCache($$, pos, 75);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_OPEN_BRACKET() {
    // LEXEME (TOKEN)
    // OPEN_BRACKET <- '[' SPACING
    var $$;
    _token = 20;  
    _tokenStart = _cursor;  
    // => '[' SPACING # Choice
    switch (_ch == 91 ? 0 : _ch == -1 ? 2 : 1) {
      // [[]
      case 0:
        // => '[' SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => '['
          $$ = '[';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          // <= '['
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // '['
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= '[' SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '['
      _failure(_expect13);
    }
    // <= '[' SPACING # Choice
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_OPEN_PAREN() {
    // LEXEME (TOKEN)
    // OPEN_PAREN <- '(' SPACING
    var $$;          
    var pos = _cursor;             
    if(_cachePos[77] >= pos) {
      $$ = _getFromCache(77);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[77] = pos;
    }  
    _token = 21;    
    _tokenStart = _cursor;    
    // => '(' SPACING # Choice
    switch (_ch == 40 ? 0 : _ch == -1 ? 2 : 1) {
      // [(]
      case 0:
        // => '(' SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => '('
          $$ = '(';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          // <= '('
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // '('
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= '(' SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '('
      _failure(_expect16);
    }
    // <= '(' SPACING # Choice
    if (_cacheable[77]) {
      _addToCache($$, pos, 77);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_PLUS() {
    // MORHEME
    // PLUS <- '+' SPACING
    var $$;
    // => '+' SPACING # Choice
    switch (_ch == 43 ? 0 : _ch == -1 ? 2 : 1) {
      // [+]
      case 0:
        // => '+' SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => '+'
          $$ = '+';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          // <= '+'
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // '+'
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= '+' SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: +
      _failure(_expect51);
    }
    // <= '+' SPACING # Choice
    return $$;
  }
  
  dynamic _parse_POSITIVE_NUMBER() {
    // LEXEME (TOKEN)
    // POSITIVE_NUMBER <- !('-' SPACING) (OCTAL_NUMBER / INTEGER)
    var $$;          
    var pos = _cursor;             
    if(_cachePos[78] >= pos) {
      $$ = _getFromCache(78);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[78] = pos;
    }  
    _token = 22;    
    _tokenStart = _cursor;    
    // => !('-' SPACING) (OCTAL_NUMBER / INTEGER) # Choice
    switch (_getState(_transitions7)) {
      // [+] [-] [0-9]
      // EOF
      case 0:
      case 2:
        // => !('-' SPACING) (OCTAL_NUMBER / INTEGER) # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => !('-' SPACING)
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          // => ('-' SPACING) # Choice
          switch (_ch == 45 ? 0 : _ch == -1 ? 2 : 1) {
            // [-]
            case 0:
              // => '-' SPACING # Sequence
              var ch2 = _ch, pos2 = _cursor, startPos1 = _startPos;
              _startPos = _cursor;
              while (true) {  
                // => '-'
                $$ = '-';
                success = true;
                if (++_cursor < _inputLen) {
                  _ch = _input[_cursor];
                } else {
                  _ch = -1;
                }
                // <= '-'
                if (!success) break;
                var seq = new List(2)..[0] = $$;
                // => SPACING
                $$ = _parse_SPACING();
                // <= SPACING
                if (!success) break;
                seq[1] = $$;
                $$ = seq;
                break;
              }
              if (!success) {
                _ch = ch2;
                _cursor = pos2;
              }
              _startPos = startPos1;
              // <= '-' SPACING # Sequence
              break;
            // No matches
            // EOF
            case 1:
            case 2:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            // Expected: -
            _failure(_expect34);
          }
          // <= ('-' SPACING) # Choice
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          // <= !('-' SPACING)
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => (OCTAL_NUMBER / INTEGER) # Choice
          switch (_getState(_transitions9)) {
            // [+] [-] [0]
            case 0:
              while (true) {
                var startPos2 = _startPos;
                _startPos = _cursor;
                // => OCTAL_NUMBER
                $$ = _parse_OCTAL_NUMBER();
                // <= OCTAL_NUMBER
                _startPos = startPos2;
                if (success) break;
                var startPos3 = _startPos;
                _startPos = _cursor;
                // => INTEGER
                $$ = _parse_INTEGER();
                // <= INTEGER
                _startPos = startPos3;
                break;
              }
              break;
            // [1-9]
            case 1:
              var startPos4 = _startPos;
              _startPos = _cursor;
              // => INTEGER
              $$ = _parse_INTEGER();
              // <= INTEGER
              _startPos = startPos4;
              break;
            // No matches
            // EOF
            case 2:
            case 3:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            // Expected: 
            _failure(const [null]);
          }
          // <= (OCTAL_NUMBER / INTEGER) # Choice
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // !('-' SPACING)
            final $1 = seq[0];
            // (OCTAL_NUMBER / INTEGER)
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $2;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= !('-' SPACING) (OCTAL_NUMBER / INTEGER) # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: POSITIVE_NUMBER
      _failure(_expect14);
    }
    // <= !('-' SPACING) (OCTAL_NUMBER / INTEGER) # Choice
    if (_cacheable[78]) {
      _addToCache($$, pos, 78);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_PointerParameter() {
    // SENTENCE (NONTERMINAL)
    // PointerParameter <- Metadata? PointerType IdentifierMD?
    var $$;          
    var pos = _cursor;             
    if(_cachePos[26] >= pos) {
      $$ = _getFromCache(26);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[26] = pos;
    }  
    // => Metadata? PointerType IdentifierMD? # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        // => Metadata? PointerType IdentifierMD? # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => PointerType
          $$ = _parse_PointerType();
          // <= PointerType
          if (!success) break;
          seq[1] = $$;
          // => IdentifierMD?
          var testing1 = _testing;
          _testing = _cursor;
          // => IdentifierMD
          $$ = _parse_IdentifierMD();
          // <= IdentifierMD
          success = true; 
          _testing = testing1;
          // <= IdentifierMD?
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // Metadata?
            final $1 = seq[0];
            // PointerType
            final $2 = seq[1];
            // IdentifierMD?
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new ParameterDeclaration(identifier: $3, metadata: $1, type: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= Metadata? PointerType IdentifierMD? # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum'
      _failure(_expect3);
    }
    // <= Metadata? PointerType IdentifierMD? # Choice
    if (_cacheable[26]) {
      _addToCache($$, pos, 26);
    }    
    return $$;
  }
  
  dynamic _parse_PointerType() {
    // SENTENCE (NONTERMINAL)
    // PointerType <- TypeName ASTERISK+ Metadata?
    var $$;          
    var pos = _cursor;             
    if(_cachePos[11] >= pos) {
      $$ = _getFromCache(11);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[11] = pos;
    }  
    // => TypeName ASTERISK+ Metadata? # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        // => TypeName ASTERISK+ Metadata? # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => TypeName
          $$ = _parse_TypeName();
          // <= TypeName
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => ASTERISK+
          var testing0;
          for (var first = true, reps; ;) {  
            // => ASTERISK  
            $$ = _parse_ASTERISK();  
            // <= ASTERISK  
            if (success) {
             if (first) {      
                first = false;
                reps = [$$];
                testing0 = _testing;                  
              } else {
                reps.add($$);
              }
              _testing = _cursor;   
            } else {
              success = !first;
              if (success) {      
                _testing = testing0;
                $$ = reps;      
              } else $$ = null;
              break;
            }  
          }
          // <= ASTERISK+
          if (!success) break;
          seq[1] = $$;
          // => Metadata?
          var testing1 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing1;
          // <= Metadata?
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // TypeName
            final $1 = seq[0];
            // ASTERISK+
            final $2 = seq[1];
            // Metadata?
            final $3 = seq[2];
            final $start = startPos0;
            $$ = _createPointerType($1, $2, $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= TypeName ASTERISK+ Metadata? # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum'
      _failure(_expect3);
    }
    // <= TypeName ASTERISK+ Metadata? # Choice
    if (_cacheable[11]) {
      _addToCache($$, pos, 11);
    }    
    return $$;
  }
  
  dynamic _parse_PointerTypeSynonym() {
    // SENTENCE (NONTERMINAL)
    // PointerTypeSynonym <- TYPE_QUALIFIERS? ASTERISK Metadata? TypeSynonym
    var $$;
    // => TYPE_QUALIFIERS? ASTERISK Metadata? TypeSynonym # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        // => TYPE_QUALIFIERS? ASTERISK Metadata? TypeSynonym # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => TYPE_QUALIFIERS?
          var testing0 = _testing;
          _testing = _cursor;
          // => TYPE_QUALIFIERS
          $$ = _parse_TYPE_QUALIFIERS();
          // <= TYPE_QUALIFIERS
          success = true; 
          _testing = testing0;
          // <= TYPE_QUALIFIERS?
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          // => ASTERISK
          $$ = _parse_ASTERISK();
          // <= ASTERISK
          if (!success) break;
          seq[1] = $$;
          // => Metadata?
          var testing1 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing1;
          // <= Metadata?
          if (!success) break;
          seq[2] = $$;
          // => TypeSynonym
          $$ = _parse_TypeSynonym();
          // <= TypeSynonym
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            // TYPE_QUALIFIERS?
            final $1 = seq[0];
            // ASTERISK
            final $2 = seq[1];
            // Metadata?
            final $3 = seq[2];
            // TypeSynonym
            final $4 = seq[3];
            final $start = startPos0;
            $$ = new PointerTypeSpecification(metadata: $3, qualifiers: $1, type: $4);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= TYPE_QUALIFIERS? ASTERISK Metadata? TypeSynonym # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '*'
      _failure(_expect21);
    }
    // <= TYPE_QUALIFIERS? ASTERISK Metadata? TypeSynonym # Choice
    return $$;
  }
  
  dynamic _parse_PointerTypeSynonymNoMetadata() {
    // SENTENCE (NONTERMINAL)
    // PointerTypeSynonymNoMetadata <- TYPE_QUALIFIERS? ASTERISK Metadata? TypeSynonymNoMetadata
    var $$;          
    var pos = _cursor;             
    if(_cachePos[46] >= pos) {
      $$ = _getFromCache(46);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[46] = pos;
    }  
    // => TYPE_QUALIFIERS? ASTERISK Metadata? TypeSynonymNoMetadata # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        // => TYPE_QUALIFIERS? ASTERISK Metadata? TypeSynonymNoMetadata # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => TYPE_QUALIFIERS?
          var testing0 = _testing;
          _testing = _cursor;
          // => TYPE_QUALIFIERS
          $$ = _parse_TYPE_QUALIFIERS();
          // <= TYPE_QUALIFIERS
          success = true; 
          _testing = testing0;
          // <= TYPE_QUALIFIERS?
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          // => ASTERISK
          $$ = _parse_ASTERISK();
          // <= ASTERISK
          if (!success) break;
          seq[1] = $$;
          // => Metadata?
          var testing1 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing1;
          // <= Metadata?
          if (!success) break;
          seq[2] = $$;
          // => TypeSynonymNoMetadata
          $$ = _parse_TypeSynonymNoMetadata();
          // <= TypeSynonymNoMetadata
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            // TYPE_QUALIFIERS?
            final $1 = seq[0];
            // ASTERISK
            final $2 = seq[1];
            // Metadata?
            final $3 = seq[2];
            // TypeSynonymNoMetadata
            final $4 = seq[3];
            final $start = startPos0;
            $$ = new PointerTypeSpecification(metadata: $3, qualifiers: $1, type: $4);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= TYPE_QUALIFIERS? ASTERISK Metadata? TypeSynonymNoMetadata # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '*'
      _failure(_expect21);
    }
    // <= TYPE_QUALIFIERS? ASTERISK Metadata? TypeSynonymNoMetadata # Choice
    if (_cacheable[46]) {
      _addToCache($$, pos, 46);
    }    
    return $$;
  }
  
  dynamic _parse_PointerVariableDeclaration() {
    // SENTENCE (NONTERMINAL)
    // PointerVariableDeclaration <- Metadata? PointerType IdentifierMD
    var $$;
    // => Metadata? PointerType IdentifierMD # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        // => Metadata? PointerType IdentifierMD # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => PointerType
          $$ = _parse_PointerType();
          // <= PointerType
          if (!success) break;
          seq[1] = $$;
          // => IdentifierMD
          $$ = _parse_IdentifierMD();
          // <= IdentifierMD
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // Metadata?
            final $1 = seq[0];
            // PointerType
            final $2 = seq[1];
            // IdentifierMD
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new VariableDeclaration(identifier: $3, metadata: $1, type: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= Metadata? PointerType IdentifierMD # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum'
      _failure(_expect3);
    }
    // <= Metadata? PointerType IdentifierMD # Choice
    return $$;
  }
  
  dynamic _parse_RESERVED_WORD() {
    // MORHEME
    // RESERVED_WORD <- ('auto' / 'break' / 'case' / 'char' / 'const' / 'continue' / 'default' / 'do' / 'double' / 'else' / 'enum' / 'extern' / 'float' / 'for' / 'goto' / 'if' / 'inline' / 'int' / 'long' / 'register' / 'restrict' / 'return' / 'short' / 'signed' / 'sizeof' / 'static' / 'struct' / 'switch' / 'typedef' / 'union' / 'unsigned' / 'void' / 'volatile' / 'while' / '_Bool' / '_Complex' / '_Imaginary') !(IDENT_START / IDENT_CONT)
    var $$;
    // => ('auto' / 'break' / 'case' / 'char' / 'const' / 'continue' / 'default' / 'do' / 'double' / 'else' / 'enum' / 'extern' / 'float' / 'for' / 'goto' / 'if' / 'inline' / 'int' / 'long' / 'register' / 'restrict' / 'return' / 'short' / 'signed' / 'sizeof' / 'static' / 'struct' / 'switch' / 'typedef' / 'union' / 'unsigned' / 'void' / 'volatile' / 'while' / '_Bool' / '_Complex' / '_Imaginary') !(IDENT_START / IDENT_CONT) # Choice
    switch (_getState(_transitions17)) {
      // [_] [a-g] [i] [l] [r-w]
      case 0:
        // => ('auto' / 'break' / 'case' / 'char' / 'const' / 'continue' / 'default' / 'do' / 'double' / 'else' / 'enum' / 'extern' / 'float' / 'for' / 'goto' / 'if' / 'inline' / 'int' / 'long' / 'register' / 'restrict' / 'return' / 'short' / 'signed' / 'sizeof' / 'static' / 'struct' / 'switch' / 'typedef' / 'union' / 'unsigned' / 'void' / 'volatile' / 'while' / '_Bool' / '_Complex' / '_Imaginary') !(IDENT_START / IDENT_CONT) # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => ('auto' / 'break' / 'case' / 'char' / 'const' / 'continue' / 'default' / 'do' / 'double' / 'else' / 'enum' / 'extern' / 'float' / 'for' / 'goto' / 'if' / 'inline' / 'int' / 'long' / 'register' / 'restrict' / 'return' / 'short' / 'signed' / 'sizeof' / 'static' / 'struct' / 'switch' / 'typedef' / 'union' / 'unsigned' / 'void' / 'volatile' / 'while' / '_Bool' / '_Complex' / '_Imaginary') # Choice
          switch (_getState(_transitions18)) {
            // [_]
            case 0:
              while (true) {
                var startPos1 = _startPos;
                _startPos = _cursor;
                // => '_Bool'
                $$ = _matchString(_strings18, '_Bool');
                // <= '_Bool'
                _startPos = startPos1;
                if (success) break;
                var startPos2 = _startPos;
                _startPos = _cursor;
                // => '_Complex'
                $$ = _matchString(_strings19, '_Complex');
                // <= '_Complex'
                _startPos = startPos2;
                if (success) break;
                var startPos3 = _startPos;
                _startPos = _cursor;
                // => '_Imaginary'
                $$ = _matchString(_strings20, '_Imaginary');
                // <= '_Imaginary'
                _startPos = startPos3;
                break;
              }
              break;
            // [a]
            case 1:
              var startPos4 = _startPos;
              _startPos = _cursor;
              // => 'auto'
              $$ = _matchString(_strings21, 'auto');
              // <= 'auto'
              _startPos = startPos4;
              break;
            // [b]
            case 2:
              var startPos5 = _startPos;
              _startPos = _cursor;
              // => 'break'
              $$ = _matchString(_strings22, 'break');
              // <= 'break'
              _startPos = startPos5;
              break;
            // [c]
            case 3:
              while (true) {
                var startPos6 = _startPos;
                _startPos = _cursor;
                // => 'case'
                $$ = _matchString(_strings23, 'case');
                // <= 'case'
                _startPos = startPos6;
                if (success) break;
                var startPos7 = _startPos;
                _startPos = _cursor;
                // => 'char'
                $$ = _matchString(_strings1, 'char');
                // <= 'char'
                _startPos = startPos7;
                if (success) break;
                var startPos8 = _startPos;
                _startPos = _cursor;
                // => 'const'
                $$ = _matchString(_strings13, 'const');
                // <= 'const'
                _startPos = startPos8;
                if (success) break;
                var startPos9 = _startPos;
                _startPos = _cursor;
                // => 'continue'
                $$ = _matchString(_strings24, 'continue');
                // <= 'continue'
                _startPos = startPos9;
                break;
              }
              break;
            // [d]
            case 4:
              while (true) {
                var startPos10 = _startPos;
                _startPos = _cursor;
                // => 'default'
                $$ = _matchString(_strings25, 'default');
                // <= 'default'
                _startPos = startPos10;
                if (success) break;
                var startPos11 = _startPos;
                _startPos = _cursor;
                // => 'do'
                $$ = _matchString(_strings26, 'do');
                // <= 'do'
                _startPos = startPos11;
                if (success) break;
                var startPos12 = _startPos;
                _startPos = _cursor;
                // => 'double'
                $$ = _matchString(_strings2, 'double');
                // <= 'double'
                _startPos = startPos12;
                break;
              }
              break;
            // [e]
            case 5:
              while (true) {
                var startPos13 = _startPos;
                _startPos = _cursor;
                // => 'else'
                $$ = _matchString(_strings27, 'else');
                // <= 'else'
                _startPos = startPos13;
                if (success) break;
                var startPos14 = _startPos;
                _startPos = _cursor;
                // => 'enum'
                $$ = _matchString(_strings3, 'enum');
                // <= 'enum'
                _startPos = startPos14;
                if (success) break;
                var startPos15 = _startPos;
                _startPos = _cursor;
                // => 'extern'
                $$ = _matchString(_strings28, 'extern');
                // <= 'extern'
                _startPos = startPos15;
                break;
              }
              break;
            // [f]
            case 6:
              while (true) {
                var startPos16 = _startPos;
                _startPos = _cursor;
                // => 'float'
                $$ = _matchString(_strings4, 'float');
                // <= 'float'
                _startPos = startPos16;
                if (success) break;
                var startPos17 = _startPos;
                _startPos = _cursor;
                // => 'for'
                $$ = _matchString(_strings29, 'for');
                // <= 'for'
                _startPos = startPos17;
                break;
              }
              break;
            // [g]
            case 7:
              var startPos18 = _startPos;
              _startPos = _cursor;
              // => 'goto'
              $$ = _matchString(_strings30, 'goto');
              // <= 'goto'
              _startPos = startPos18;
              break;
            // [i]
            case 8:
              while (true) {
                var startPos19 = _startPos;
                _startPos = _cursor;
                // => 'if'
                $$ = _matchString(_strings31, 'if');
                // <= 'if'
                _startPos = startPos19;
                if (success) break;
                var startPos20 = _startPos;
                _startPos = _cursor;
                // => 'inline'
                $$ = _matchString(_strings32, 'inline');
                // <= 'inline'
                _startPos = startPos20;
                if (success) break;
                var startPos21 = _startPos;
                _startPos = _cursor;
                // => 'int'
                $$ = _matchString(_strings5, 'int');
                // <= 'int'
                _startPos = startPos21;
                break;
              }
              break;
            // [l]
            case 9:
              var startPos22 = _startPos;
              _startPos = _cursor;
              // => 'long'
              $$ = _matchString(_strings17, 'long');
              // <= 'long'
              _startPos = startPos22;
              break;
            // [r]
            case 10:
              while (true) {
                var startPos23 = _startPos;
                _startPos = _cursor;
                // => 'register'
                $$ = _matchString(_strings33, 'register');
                // <= 'register'
                _startPos = startPos23;
                if (success) break;
                var startPos24 = _startPos;
                _startPos = _cursor;
                // => 'restrict'
                $$ = _matchString(_strings34, 'restrict');
                // <= 'restrict'
                _startPos = startPos24;
                if (success) break;
                var startPos25 = _startPos;
                _startPos = _cursor;
                // => 'return'
                $$ = _matchString(_strings35, 'return');
                // <= 'return'
                _startPos = startPos25;
                break;
              }
              break;
            // [s]
            case 11:
              while (true) {
                var startPos26 = _startPos;
                _startPos = _cursor;
                // => 'short'
                $$ = _matchString(_strings6, 'short');
                // <= 'short'
                _startPos = startPos26;
                if (success) break;
                var startPos27 = _startPos;
                _startPos = _cursor;
                // => 'signed'
                $$ = _matchString(_strings36, 'signed');
                // <= 'signed'
                _startPos = startPos27;
                if (success) break;
                var startPos28 = _startPos;
                _startPos = _cursor;
                // => 'sizeof'
                $$ = _matchString(_strings37, 'sizeof');
                // <= 'sizeof'
                _startPos = startPos28;
                if (success) break;
                var startPos29 = _startPos;
                _startPos = _cursor;
                // => 'static'
                $$ = _matchString(_strings38, 'static');
                // <= 'static'
                _startPos = startPos29;
                if (success) break;
                var startPos30 = _startPos;
                _startPos = _cursor;
                // => 'struct'
                $$ = _matchString(_strings8, 'struct');
                // <= 'struct'
                _startPos = startPos30;
                if (success) break;
                var startPos31 = _startPos;
                _startPos = _cursor;
                // => 'switch'
                $$ = _matchString(_strings39, 'switch');
                // <= 'switch'
                _startPos = startPos31;
                break;
              }
              break;
            // [t]
            case 12:
              var startPos32 = _startPos;
              _startPos = _cursor;
              // => 'typedef'
              $$ = _matchString(_strings9, 'typedef');
              // <= 'typedef'
              _startPos = startPos32;
              break;
            // [u]
            case 13:
              while (true) {
                var startPos33 = _startPos;
                _startPos = _cursor;
                // => 'union'
                $$ = _matchString(_strings10, 'union');
                // <= 'union'
                _startPos = startPos33;
                if (success) break;
                var startPos34 = _startPos;
                _startPos = _cursor;
                // => 'unsigned'
                $$ = _matchString(_strings40, 'unsigned');
                // <= 'unsigned'
                _startPos = startPos34;
                break;
              }
              break;
            // [v]
            case 14:
              while (true) {
                var startPos35 = _startPos;
                _startPos = _cursor;
                // => 'void'
                $$ = _matchString(_strings11, 'void');
                // <= 'void'
                _startPos = startPos35;
                if (success) break;
                var startPos36 = _startPos;
                _startPos = _cursor;
                // => 'volatile'
                $$ = _matchString(_strings41, 'volatile');
                // <= 'volatile'
                _startPos = startPos36;
                break;
              }
              break;
            // [w]
            case 15:
              var startPos37 = _startPos;
              _startPos = _cursor;
              // => 'while'
              $$ = _matchString(_strings42, 'while');
              // <= 'while'
              _startPos = startPos37;
              break;
            // No matches
            // EOF
            case 16:
            case 17:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            // Expected: auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for, goto, if, inline, int, long, register, restrict, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while, _Bool, _Complex, _Imaginary
            _failure(_expect52);
          }
          // <= ('auto' / 'break' / 'case' / 'char' / 'const' / 'continue' / 'default' / 'do' / 'double' / 'else' / 'enum' / 'extern' / 'float' / 'for' / 'goto' / 'if' / 'inline' / 'int' / 'long' / 'register' / 'restrict' / 'return' / 'short' / 'signed' / 'sizeof' / 'static' / 'struct' / 'switch' / 'typedef' / 'union' / 'unsigned' / 'void' / 'volatile' / 'while' / '_Bool' / '_Complex' / '_Imaginary') # Choice
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => !(IDENT_START / IDENT_CONT)
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          // => (IDENT_START / IDENT_CONT) # Choice
          switch (_getState(_transitions15)) {
            // [0-9]
            case 0:
              var startPos38 = _startPos;
              _startPos = _cursor;
              // => IDENT_CONT
              $$ = _parse_IDENT_CONT();
              // <= IDENT_CONT
              _startPos = startPos38;
              break;
            // [A-Z] [_] [a-z]
            case 1:
              while (true) {
                var startPos39 = _startPos;
                _startPos = _cursor;
                // => IDENT_START
                $$ = _parse_IDENT_START();
                // <= IDENT_START
                _startPos = startPos39;
                if (success) break;
                var startPos40 = _startPos;
                _startPos = _cursor;
                // => IDENT_CONT
                $$ = _parse_IDENT_CONT();
                // <= IDENT_CONT
                _startPos = startPos40;
                break;
              }
              break;
            // No matches
            // EOF
            case 2:
            case 3:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            // Expected: 
            _failure(const [null]);
          }
          // <= (IDENT_START / IDENT_CONT) # Choice
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          // <= !(IDENT_START / IDENT_CONT)
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // ('auto' / 'break' / 'case' / 'char' / 'const' / 'continue' / 'default' / 'do' / 'double' / 'else' / 'enum' / 'extern' / 'float' / 'for' / 'goto' / 'if' / 'inline' / 'int' / 'long' / 'register' / 'restrict' / 'return' / 'short' / 'signed' / 'sizeof' / 'static' / 'struct' / 'switch' / 'typedef' / 'union' / 'unsigned' / 'void' / 'volatile' / 'while' / '_Bool' / '_Complex' / '_Imaginary')
            final $1 = seq[0];
            // !(IDENT_START / IDENT_CONT)
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= ('auto' / 'break' / 'case' / 'char' / 'const' / 'continue' / 'default' / 'do' / 'double' / 'else' / 'enum' / 'extern' / 'float' / 'for' / 'goto' / 'if' / 'inline' / 'int' / 'long' / 'register' / 'restrict' / 'return' / 'short' / 'signed' / 'sizeof' / 'static' / 'struct' / 'switch' / 'typedef' / 'union' / 'unsigned' / 'void' / 'volatile' / 'while' / '_Bool' / '_Complex' / '_Imaginary') !(IDENT_START / IDENT_CONT) # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for, goto, if, inline, int, long, register, restrict, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while, _Bool, _Complex, _Imaginary
      _failure(_expect52);
    }
    // <= ('auto' / 'break' / 'case' / 'char' / 'const' / 'continue' / 'default' / 'do' / 'double' / 'else' / 'enum' / 'extern' / 'float' / 'for' / 'goto' / 'if' / 'inline' / 'int' / 'long' / 'register' / 'restrict' / 'return' / 'short' / 'signed' / 'sizeof' / 'static' / 'struct' / 'switch' / 'typedef' / 'union' / 'unsigned' / 'void' / 'volatile' / 'while' / '_Bool' / '_Complex' / '_Imaginary') !(IDENT_START / IDENT_CONT) # Choice
    return $$;
  }
  
  dynamic _parse_SEMICOLON() {
    // LEXEME (TOKEN)
    // SEMICOLON <- ';' SPACING
    var $$;          
    var pos = _cursor;             
    if(_cachePos[79] >= pos) {
      $$ = _getFromCache(79);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[79] = pos;
    }  
    _token = 23;    
    _tokenStart = _cursor;    
    // => ';' SPACING # Choice
    switch (_ch == 59 ? 0 : _ch == -1 ? 2 : 1) {
      // [;]
      case 0:
        // => ';' SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => ';'
          $$ = ';';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          // <= ';'
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // ';'
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= ';' SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: ';'
      _failure(_expect35);
    }
    // <= ';' SPACING # Choice
    if (_cacheable[79]) {
      _addToCache($$, pos, 79);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_SHORT() {
    // LEXEME (TOKEN)
    // SHORT <- 'short' !IDENT_PART SPACING
    var $$;          
    var pos = _cursor;             
    if(_cachePos[80] >= pos) {
      $$ = _getFromCache(80);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[80] = pos;
    }  
    _token = 24;    
    _tokenStart = _cursor;    
    // => 'short' !IDENT_PART SPACING # Choice
    switch (_ch == 115 ? 0 : _ch == -1 ? 2 : 1) {
      // [s]
      case 0:
        // => 'short' !IDENT_PART SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => 'short'
          $$ = _matchString(_strings6, 'short');
          // <= 'short'
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => !IDENT_PART
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          // => IDENT_PART
          $$ = _parse_IDENT_PART();
          // <= IDENT_PART
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          // <= !IDENT_PART
          if (!success) break;
          seq[1] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // 'short'
            final $1 = seq[0];
            // !IDENT_PART
            final $2 = seq[1];
            // SPACING
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= 'short' !IDENT_PART SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'short'
      _failure(_expect36);
    }
    // <= 'short' !IDENT_PART SPACING # Choice
    if (_cacheable[80]) {
      _addToCache($$, pos, 80);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_SIGN() {
    // MORHEME
    // SIGN <- PLUS / MINUS
    var $$;
    // => PLUS / MINUS # Choice
    switch (_getState(_transitions19)) {
      // [+]
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => PLUS
        $$ = _parse_PLUS();
        // <= PLUS
        _startPos = startPos0;
        break;
      // [-]
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        // => MINUS
        $$ = _parse_MINUS();
        // <= MINUS
        _startPos = startPos1;
        break;
      // No matches
      // EOF
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: +, -
      _failure(_expect53);
    }
    // <= PLUS / MINUS # Choice
    return $$;
  }
  
  dynamic _parse_SIGNED() {
    // MORHEME
    // SIGNED <- 'signed' !IDENT_PART SPACING
    var $$;
    // => 'signed' !IDENT_PART SPACING # Choice
    switch (_ch == 115 ? 0 : _ch == -1 ? 2 : 1) {
      // [s]
      case 0:
        // => 'signed' !IDENT_PART SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => 'signed'
          $$ = _matchString(_strings36, 'signed');
          // <= 'signed'
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => !IDENT_PART
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          // => IDENT_PART
          $$ = _parse_IDENT_PART();
          // <= IDENT_PART
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          // <= !IDENT_PART
          if (!success) break;
          seq[1] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // 'signed'
            final $1 = seq[0];
            // !IDENT_PART
            final $2 = seq[1];
            // SPACING
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= 'signed' !IDENT_PART SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: signed
      _failure(_expect54);
    }
    // <= 'signed' !IDENT_PART SPACING # Choice
    return $$;
  }
  
  dynamic _parse_SIGNEDNESS() {
    // LEXEME (TOKEN)
    // SIGNEDNESS <- SIGNED / UNSIGNED
    var $$;          
    var pos = _cursor;             
    if(_cachePos[81] >= pos) {
      $$ = _getFromCache(81);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[81] = pos;
    }  
    _token = 25;    
    _tokenStart = _cursor;    
    // => SIGNED / UNSIGNED # Choice
    switch (_getState(_transitions6)) {
      // [s]
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => SIGNED
        $$ = _parse_SIGNED();
        // <= SIGNED
        _startPos = startPos0;
        break;
      // [u]
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        // => UNSIGNED
        $$ = _parse_UNSIGNED();
        // <= UNSIGNED
        _startPos = startPos1;
        break;
      // No matches
      // EOF
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: SIGNEDNESS
      _failure(_expect37);
    }
    // <= SIGNED / UNSIGNED # Choice
    if (_cacheable[81]) {
      _addToCache($$, pos, 81);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_SIMPLE_ESCAPE_SEQUENCE() {
    // MORHEME
    // SIMPLE_ESCAPE_SEQUENCE <- [\\] ["'?\\a-bfnrtv]
    var $$;
    // => [\\] ["'?\\a-bfnrtv] # Choice
    switch (_ch == 92 ? 0 : _ch == -1 ? 2 : 1) {
      // [\\]
      case 0:
        // => [\\] ["'?\\a-bfnrtv] # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => [\\]
          $$ = '\\';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          // <= [\\]
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => ["'?\\a-bfnrtv]
          $$ = _matchMapping(34, 118, _mapping3);
          // <= ["'?\\a-bfnrtv]
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // [\\]
            final $1 = seq[0];
            // ["'?\\a-bfnrtv]
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _escape($1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= [\\] ["'?\\a-bfnrtv] # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(const [null]);
    }
    // <= [\\] ["'?\\a-bfnrtv] # Choice
    return $$;
  }
  
  dynamic _parse_SPACE() {
    // MORHEME
    // SPACE <- [\t-\n\r ]
    var $$;
    // => [\t-\n\r ] # Choice
    switch (_getState(_transitions20)) {
      // [\t-\n] [\r] [ ]
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => [\t-\n\r ]
        $$ = _matchMapping(9, 32, _mapping4);
        // <= [\t-\n\r ]
        _startPos = startPos0;
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(const [null]);
    }
    // <= [\t-\n\r ] # Choice
    return $$;
  }
  
  dynamic _parse_SPACING() {
    // MORHEME
    // SPACING <- (SPACE / COMMENT)*
    var $$;
    // => (SPACE / COMMENT)* # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => (SPACE / COMMENT)*
        var testing0 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          // => (SPACE / COMMENT) # Choice
          switch (_getState(_transitions21)) {
            // [\t-\n] [\r] [ ]
            case 0:
              var startPos1 = _startPos;
              _startPos = _cursor;
              // => SPACE
              $$ = _parse_SPACE();
              // <= SPACE
              _startPos = startPos1;
              break;
            // [/]
            case 1:
              var startPos2 = _startPos;
              _startPos = _cursor;
              // => COMMENT
              $$ = _parse_COMMENT();
              // <= COMMENT
              _startPos = startPos2;
              break;
            // No matches
            // EOF
            case 2:
            case 3:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            // Expected: 
            _failure(const [null]);
          }
          // <= (SPACE / COMMENT) # Choice
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing0;
            $$ = reps;
            break; 
          }
        }
        // <= (SPACE / COMMENT)*
        _startPos = startPos0;
        break;
      // No matches
      case 1:
        $$ = null;
        success = true;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(_expect1);
    }
    // <= (SPACE / COMMENT)* # Choice
    return $$;
  }
  
  dynamic _parse_STRING() {
    // LEXEME (TOKEN)
    // STRING <- '"' STRING_CHAR_SEQUENCE? '"' / 'L"' STRING_CHAR_SEQUENCE? '"'
    var $$;
    _token = 26;  
    _tokenStart = _cursor;  
    // => '"' STRING_CHAR_SEQUENCE? '"' / 'L"' STRING_CHAR_SEQUENCE? '"' # Choice
    switch (_getState(_transitions10)) {
      // [\"]
      case 0:
        // => '"' STRING_CHAR_SEQUENCE? '"' # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => '"'
          $$ = '\"';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          // <= '"'
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => STRING_CHAR_SEQUENCE?
          var testing0 = _testing;
          _testing = _cursor;
          // => STRING_CHAR_SEQUENCE
          $$ = _parse_STRING_CHAR_SEQUENCE();
          // <= STRING_CHAR_SEQUENCE
          success = true; 
          _testing = testing0;
          // <= STRING_CHAR_SEQUENCE?
          if (!success) break;
          seq[1] = $$;
          // => '"'
          $$ = _matchChar(34, '\"');
          // <= '"'
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // '"'
            final $1 = seq[0];
            // STRING_CHAR_SEQUENCE?
            final $2 = seq[1];
            // '"'
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $2 == null ? "" : new String.fromCharCodes($2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= '"' STRING_CHAR_SEQUENCE? '"' # Sequence
        break;
      // [L]
      case 1:
        // => 'L"' STRING_CHAR_SEQUENCE? '"' # Sequence
        var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => 'L"'
          $$ = _matchString(_strings7, 'L\"');
          // <= 'L"'
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => STRING_CHAR_SEQUENCE?
          var testing1 = _testing;
          _testing = _cursor;
          // => STRING_CHAR_SEQUENCE
          $$ = _parse_STRING_CHAR_SEQUENCE();
          // <= STRING_CHAR_SEQUENCE
          success = true; 
          _testing = testing1;
          // <= STRING_CHAR_SEQUENCE?
          if (!success) break;
          seq[1] = $$;
          // => '"'
          $$ = _matchChar(34, '\"');
          // <= '"'
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // 'L"'
            final $1 = seq[0];
            // STRING_CHAR_SEQUENCE?
            final $2 = seq[1];
            // '"'
            final $3 = seq[2];
            final $start = startPos1;
            $$ = $2 == null ? "" : new String.fromCharCodes($2);
          }
          break;
        }
        if (!success) {
          _ch = ch1;
          _cursor = pos1;
        }
        _startPos = startPos1;
        // <= 'L"' STRING_CHAR_SEQUENCE? '"' # Sequence
        break;
      // No matches
      // EOF
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: STRING
      _failure(_expect38);
    }
    // <= '"' STRING_CHAR_SEQUENCE? '"' / 'L"' STRING_CHAR_SEQUENCE? '"' # Choice
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_STRING_CHAR() {
    // MORHEME
    // STRING_CHAR <- ![\n\r"\\] . / ESCAPE_SEQUENCE
    var $$;
    // => ![\n\r"\\] . / ESCAPE_SEQUENCE # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        while (true) {
          // => ![\n\r"\\] . # Sequence
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => ![\n\r"\\]
            var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
            _testing = _inputLen + 1;
            // => [\n\r"\\]
            $$ = _matchMapping(10, 92, _mapping5);
            // <= [\n\r"\\]
            _ch = ch1;
            _cursor = pos1; 
            _testing = testing0;
            $$ = null;
            success = !success;
            // <= ![\n\r"\\]
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => .
            $$ = _matchAny();
            // <= .
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // ![\n\r"\\]
              final $1 = seq[0];
              // .
              final $2 = seq[1];
              final $start = startPos0;
              $$ = $2.codeUnitAt(0);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          // <= ![\n\r"\\] . # Sequence
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          // => ESCAPE_SEQUENCE
          $$ = _parse_ESCAPE_SEQUENCE();
          // <= ESCAPE_SEQUENCE
          _startPos = startPos1;
          break;
        }
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
      // EOF
      case 2:
        // => ![\n\r"\\] . # Sequence
        var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => ![\n\r"\\]
          var ch3 = _ch, pos3 = _cursor, testing1 = _testing; 
          _testing = _inputLen + 1;
          // => [\n\r"\\]
          $$ = _matchMapping(10, 92, _mapping5);
          // <= [\n\r"\\]
          _ch = ch3;
          _cursor = pos3; 
          _testing = testing1;
          $$ = null;
          success = !success;
          // <= ![\n\r"\\]
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => .
          $$ = _matchAny();
          // <= .
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // ![\n\r"\\]
            final $1 = seq[0];
            // .
            final $2 = seq[1];
            final $start = startPos2;
            $$ = $2.codeUnitAt(0);
          }
          break;
        }
        if (!success) {
          _ch = ch2;
          _cursor = pos2;
        }
        _startPos = startPos2;
        // <= ![\n\r"\\] . # Sequence
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(const [null]);
    }
    // <= ![\n\r"\\] . / ESCAPE_SEQUENCE # Choice
    return $$;
  }
  
  dynamic _parse_STRING_CHAR_SEQUENCE() {
    // MORHEME
    // STRING_CHAR_SEQUENCE <- STRING_CHAR+
    var $$;
    // => STRING_CHAR+ # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => STRING_CHAR+
        var testing0;
        for (var first = true, reps; ;) {  
          // => STRING_CHAR  
          $$ = _parse_STRING_CHAR();  
          // <= STRING_CHAR  
          if (success) {
           if (first) {      
              first = false;
              reps = [$$];
              testing0 = _testing;                  
            } else {
              reps.add($$);
            }
            _testing = _cursor;   
          } else {
            success = !first;
            if (success) {      
              _testing = testing0;
              $$ = reps;      
            } else $$ = null;
            break;
          }  
        }
        // <= STRING_CHAR+
        _startPos = startPos0;
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(const [null]);
    }
    // <= STRING_CHAR+ # Choice
    return $$;
  }
  
  dynamic _parse_STRUCT() {
    // LEXEME (TOKEN)
    // STRUCT <- 'struct' !IDENT_PART SPACING
    var $$;          
    var pos = _cursor;             
    if(_cachePos[83] >= pos) {
      $$ = _getFromCache(83);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[83] = pos;
    }  
    _token = 27;    
    _tokenStart = _cursor;    
    // => 'struct' !IDENT_PART SPACING # Choice
    switch (_ch == 115 ? 0 : _ch == -1 ? 2 : 1) {
      // [s]
      case 0:
        // => 'struct' !IDENT_PART SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => 'struct'
          $$ = _matchString(_strings8, 'struct');
          // <= 'struct'
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => !IDENT_PART
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          // => IDENT_PART
          $$ = _parse_IDENT_PART();
          // <= IDENT_PART
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          // <= !IDENT_PART
          if (!success) break;
          seq[1] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // 'struct'
            final $1 = seq[0];
            // !IDENT_PART
            final $2 = seq[1];
            // SPACING
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= 'struct' !IDENT_PART SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'struct'
      _failure(_expect39);
    }
    // <= 'struct' !IDENT_PART SPACING # Choice
    if (_cacheable[83]) {
      _addToCache($$, pos, 83);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_SimpleParameter() {
    // SENTENCE (NONTERMINAL)
    // SimpleParameter <- Metadata? Type IdentifierMD?
    var $$;          
    var pos = _cursor;             
    if(_cachePos[28] >= pos) {
      $$ = _getFromCache(28);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[28] = pos;
    }  
    // => Metadata? Type IdentifierMD? # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        // => Metadata? Type IdentifierMD? # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => Type
          $$ = _parse_Type();
          // <= Type
          if (!success) break;
          seq[1] = $$;
          // => IdentifierMD?
          var testing1 = _testing;
          _testing = _cursor;
          // => IdentifierMD
          $$ = _parse_IdentifierMD();
          // <= IdentifierMD
          success = true; 
          _testing = testing1;
          // <= IdentifierMD?
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // Metadata?
            final $1 = seq[0];
            // Type
            final $2 = seq[1];
            // IdentifierMD?
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new ParameterDeclaration(identifier: $3, metadata: $1, type: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= Metadata? Type IdentifierMD? # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum'
      _failure(_expect3);
    }
    // <= Metadata? Type IdentifierMD? # Choice
    if (_cacheable[28]) {
      _addToCache($$, pos, 28);
    }    
    return $$;
  }
  
  dynamic _parse_SimpleTypeSynonym() {
    // SENTENCE (NONTERMINAL)
    // SimpleTypeSynonym <- TYPE_QUALIFIERS? IDENTIFIER Metadata?
    var $$;
    // => TYPE_QUALIFIERS? IDENTIFIER Metadata? # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        // => TYPE_QUALIFIERS? IDENTIFIER Metadata? # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => TYPE_QUALIFIERS?
          var testing0 = _testing;
          _testing = _cursor;
          // => TYPE_QUALIFIERS
          $$ = _parse_TYPE_QUALIFIERS();
          // <= TYPE_QUALIFIERS
          success = true; 
          _testing = testing0;
          // <= TYPE_QUALIFIERS?
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => IDENTIFIER
          $$ = _parse_IDENTIFIER();
          // <= IDENTIFIER
          if (!success) break;
          seq[1] = $$;
          // => Metadata?
          var testing1 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing1;
          // <= Metadata?
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // TYPE_QUALIFIERS?
            final $1 = seq[0];
            // IDENTIFIER
            final $2 = seq[1];
            // Metadata?
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new DefinedTypeSpecification(metadata: $3, qualifiers: $1, name: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= TYPE_QUALIFIERS? IDENTIFIER Metadata? # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER
      _failure(_expect15);
    }
    // <= TYPE_QUALIFIERS? IDENTIFIER Metadata? # Choice
    return $$;
  }
  
  dynamic _parse_SimpleTypeSynonymNoMetadata() {
    // SENTENCE (NONTERMINAL)
    // SimpleTypeSynonymNoMetadata <- TYPE_QUALIFIERS? IDENTIFIER
    var $$;          
    var pos = _cursor;             
    if(_cachePos[48] >= pos) {
      $$ = _getFromCache(48);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[48] = pos;
    }  
    // => TYPE_QUALIFIERS? IDENTIFIER # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        // => TYPE_QUALIFIERS? IDENTIFIER # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => TYPE_QUALIFIERS?
          var testing0 = _testing;
          _testing = _cursor;
          // => TYPE_QUALIFIERS
          $$ = _parse_TYPE_QUALIFIERS();
          // <= TYPE_QUALIFIERS
          success = true; 
          _testing = testing0;
          // <= TYPE_QUALIFIERS?
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => IDENTIFIER
          $$ = _parse_IDENTIFIER();
          // <= IDENTIFIER
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // TYPE_QUALIFIERS?
            final $1 = seq[0];
            // IDENTIFIER
            final $2 = seq[1];
            final $start = startPos0;
            $$ = new DefinedTypeSpecification(qualifiers: $1, name: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= TYPE_QUALIFIERS? IDENTIFIER # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER
      _failure(_expect15);
    }
    // <= TYPE_QUALIFIERS? IDENTIFIER # Choice
    if (_cacheable[48]) {
      _addToCache($$, pos, 48);
    }    
    return $$;
  }
  
  dynamic _parse_SimpleVariableDeclaration() {
    // SENTENCE (NONTERMINAL)
    // SimpleVariableDeclaration <- Metadata? Type IdentifierMD
    var $$;
    // => Metadata? Type IdentifierMD # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        // => Metadata? Type IdentifierMD # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => Type
          $$ = _parse_Type();
          // <= Type
          if (!success) break;
          seq[1] = $$;
          // => IdentifierMD
          $$ = _parse_IdentifierMD();
          // <= IdentifierMD
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // Metadata?
            final $1 = seq[0];
            // Type
            final $2 = seq[1];
            // IdentifierMD
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new VariableDeclaration(identifier: $3, metadata: $1, type: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= Metadata? Type IdentifierMD # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum'
      _failure(_expect3);
    }
    // <= Metadata? Type IdentifierMD # Choice
    return $$;
  }
  
  dynamic _parse_StructDeclaration() {
    // SENTENCE (NONTERMINAL)
    // StructDeclaration <- Metadata? StructType / Metadata? StructTypeNameWithTag
    var $$;          
    var pos = _cursor;             
    if(_cachePos[37] >= pos) {
      $$ = _getFromCache(37);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[37] = pos;
    }  
    // => Metadata? StructType / Metadata? StructTypeNameWithTag # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        while (true) {
          // => Metadata? StructType # Sequence
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => Metadata?
            var testing0 = _testing;
            _testing = _cursor;
            // => Metadata
            $$ = _parse_Metadata();
            // <= Metadata
            success = true; 
            _testing = testing0;
            // <= Metadata?
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => StructType
            $$ = _parse_StructType();
            // <= StructType
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // Metadata?
              final $1 = seq[0];
              // StructType
              final $2 = seq[1];
              final $start = startPos0;
              $$ = new StructureDeclaration(metadata: $1, type: $2);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          // <= Metadata? StructType # Sequence
          if (success) break;
          // => Metadata? StructTypeNameWithTag # Sequence
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => Metadata?
            var testing1 = _testing;
            _testing = _cursor;
            // => Metadata
            $$ = _parse_Metadata();
            // <= Metadata
            success = true; 
            _testing = testing1;
            // <= Metadata?
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => StructTypeNameWithTag
            $$ = _parse_StructTypeNameWithTag();
            // <= StructTypeNameWithTag
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // Metadata?
              final $1 = seq[0];
              // StructTypeNameWithTag
              final $2 = seq[1];
              final $start = startPos1;
              $$ = new StructureDeclaration(metadata: $1, type: new StructureTypeSpecification(taggedType: $2));
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          // <= Metadata? StructTypeNameWithTag # Sequence
          break;
        }
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'struct', 'union'
      _failure(_expect11);
    }
    // <= Metadata? StructType / Metadata? StructTypeNameWithTag # Choice
    if (_cacheable[37]) {
      _addToCache($$, pos, 37);
    }    
    return $$;
  }
  
  dynamic _parse_StructMember() {
    // SENTENCE (NONTERMINAL)
    // StructMember <- BitFieldParameter SEMICOLON / ArrayParameter SEMICOLON / TaggedTypeParameter SEMICOLON / PointerParameter SEMICOLON / SimpleParameter SEMICOLON
    var $$;
    // => BitFieldParameter SEMICOLON / ArrayParameter SEMICOLON / TaggedTypeParameter SEMICOLON / PointerParameter SEMICOLON / SimpleParameter SEMICOLON # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        while (true) {
          // => BitFieldParameter SEMICOLON # Sequence
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => BitFieldParameter
            $$ = _parse_BitFieldParameter();
            // <= BitFieldParameter
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => SEMICOLON
            $$ = _parse_SEMICOLON();
            // <= SEMICOLON
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // BitFieldParameter
              final $1 = seq[0];
              // SEMICOLON
              final $2 = seq[1];
              final $start = startPos0;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          // <= BitFieldParameter SEMICOLON # Sequence
          if (success) break;
          // => ArrayParameter SEMICOLON # Sequence
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => ArrayParameter
            $$ = _parse_ArrayParameter();
            // <= ArrayParameter
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => SEMICOLON
            $$ = _parse_SEMICOLON();
            // <= SEMICOLON
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // ArrayParameter
              final $1 = seq[0];
              // SEMICOLON
              final $2 = seq[1];
              final $start = startPos1;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          // <= ArrayParameter SEMICOLON # Sequence
          if (success) break;
          // => TaggedTypeParameter SEMICOLON # Sequence
          var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => TaggedTypeParameter
            $$ = _parse_TaggedTypeParameter();
            // <= TaggedTypeParameter
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => SEMICOLON
            $$ = _parse_SEMICOLON();
            // <= SEMICOLON
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // TaggedTypeParameter
              final $1 = seq[0];
              // SEMICOLON
              final $2 = seq[1];
              final $start = startPos2;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos2;
          // <= TaggedTypeParameter SEMICOLON # Sequence
          if (success) break;
          // => PointerParameter SEMICOLON # Sequence
          var ch3 = _ch, pos3 = _cursor, startPos3 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => PointerParameter
            $$ = _parse_PointerParameter();
            // <= PointerParameter
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => SEMICOLON
            $$ = _parse_SEMICOLON();
            // <= SEMICOLON
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // PointerParameter
              final $1 = seq[0];
              // SEMICOLON
              final $2 = seq[1];
              final $start = startPos3;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch3;
            _cursor = pos3;
          }
          _startPos = startPos3;
          // <= PointerParameter SEMICOLON # Sequence
          if (success) break;
          // => SimpleParameter SEMICOLON # Sequence
          var ch4 = _ch, pos4 = _cursor, startPos4 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => SimpleParameter
            $$ = _parse_SimpleParameter();
            // <= SimpleParameter
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => SEMICOLON
            $$ = _parse_SEMICOLON();
            // <= SEMICOLON
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // SimpleParameter
              final $1 = seq[0];
              // SEMICOLON
              final $2 = seq[1];
              final $start = startPos4;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch4;
            _cursor = pos4;
          }
          _startPos = startPos4;
          // <= SimpleParameter SEMICOLON # Sequence
          break;
        }
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
      // EOF
      case 2:
        while (true) {
          // => BitFieldParameter SEMICOLON # Sequence
          var ch5 = _ch, pos5 = _cursor, startPos5 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => BitFieldParameter
            $$ = _parse_BitFieldParameter();
            // <= BitFieldParameter
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => SEMICOLON
            $$ = _parse_SEMICOLON();
            // <= SEMICOLON
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // BitFieldParameter
              final $1 = seq[0];
              // SEMICOLON
              final $2 = seq[1];
              final $start = startPos5;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch5;
            _cursor = pos5;
          }
          _startPos = startPos5;
          // <= BitFieldParameter SEMICOLON # Sequence
          if (success) break;
          // => ArrayParameter SEMICOLON # Sequence
          var ch6 = _ch, pos6 = _cursor, startPos6 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => ArrayParameter
            $$ = _parse_ArrayParameter();
            // <= ArrayParameter
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => SEMICOLON
            $$ = _parse_SEMICOLON();
            // <= SEMICOLON
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // ArrayParameter
              final $1 = seq[0];
              // SEMICOLON
              final $2 = seq[1];
              final $start = startPos6;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch6;
            _cursor = pos6;
          }
          _startPos = startPos6;
          // <= ArrayParameter SEMICOLON # Sequence
          if (success) break;
          // => PointerParameter SEMICOLON # Sequence
          var ch7 = _ch, pos7 = _cursor, startPos7 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => PointerParameter
            $$ = _parse_PointerParameter();
            // <= PointerParameter
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => SEMICOLON
            $$ = _parse_SEMICOLON();
            // <= SEMICOLON
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // PointerParameter
              final $1 = seq[0];
              // SEMICOLON
              final $2 = seq[1];
              final $start = startPos7;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch7;
            _cursor = pos7;
          }
          _startPos = startPos7;
          // <= PointerParameter SEMICOLON # Sequence
          if (success) break;
          // => SimpleParameter SEMICOLON # Sequence
          var ch8 = _ch, pos8 = _cursor, startPos8 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => SimpleParameter
            $$ = _parse_SimpleParameter();
            // <= SimpleParameter
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => SEMICOLON
            $$ = _parse_SEMICOLON();
            // <= SEMICOLON
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // SimpleParameter
              final $1 = seq[0];
              // SEMICOLON
              final $2 = seq[1];
              final $start = startPos8;
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch8;
            _cursor = pos8;
          }
          _startPos = startPos8;
          // <= SimpleParameter SEMICOLON # Sequence
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum'
      _failure(_expect3);
    }
    // <= BitFieldParameter SEMICOLON / ArrayParameter SEMICOLON / TaggedTypeParameter SEMICOLON / PointerParameter SEMICOLON / SimpleParameter SEMICOLON # Choice
    return $$;
  }
  
  dynamic _parse_StructMemberList() {
    // SENTENCE (NONTERMINAL)
    // StructMemberList <- OPEN_BRACE StructMember* CLOSE_BRACE
    var $$;
    // => OPEN_BRACE StructMember* CLOSE_BRACE # Choice
    switch (_ch == 123 ? 0 : _ch == -1 ? 2 : 1) {
      // [{]
      case 0:
        // => OPEN_BRACE StructMember* CLOSE_BRACE # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => OPEN_BRACE
          $$ = _parse_OPEN_BRACE();
          // <= OPEN_BRACE
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => StructMember*
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            // => StructMember
            $$ = _parse_StructMember();
            // <= StructMember
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          // <= StructMember*
          if (!success) break;
          seq[1] = $$;
          // => CLOSE_BRACE
          $$ = _parse_CLOSE_BRACE();
          // <= CLOSE_BRACE
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // OPEN_BRACE
            final $1 = seq[0];
            // StructMember*
            final $2 = seq[1];
            // CLOSE_BRACE
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $2;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= OPEN_BRACE StructMember* CLOSE_BRACE # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '{'
      _failure(_expect18);
    }
    // <= OPEN_BRACE StructMember* CLOSE_BRACE # Choice
    return $$;
  }
  
  dynamic _parse_StructType() {
    // SENTENCE (NONTERMINAL)
    // StructType <- StructTypeName StructMemberList Metadata?
    var $$;          
    var pos = _cursor;             
    if(_cachePos[32] >= pos) {
      $$ = _getFromCache(32);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[32] = pos;
    }  
    // => StructTypeName StructMemberList Metadata? # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        // => StructTypeName StructMemberList Metadata? # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => StructTypeName
          $$ = _parse_StructTypeName();
          // <= StructTypeName
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => StructMemberList
          $$ = _parse_StructMemberList();
          // <= StructMemberList
          if (!success) break;
          seq[1] = $$;
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // StructTypeName
            final $1 = seq[0];
            // StructMemberList
            final $2 = seq[1];
            // Metadata?
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new StructureTypeSpecification(metadata: $3, taggedType: $1, members: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= StructTypeName StructMemberList Metadata? # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'struct', 'union'
      _failure(_expect11);
    }
    // <= StructTypeName StructMemberList Metadata? # Choice
    if (_cacheable[32]) {
      _addToCache($$, pos, 32);
    }    
    return $$;
  }
  
  dynamic _parse_StructTypeName() {
    // SENTENCE (NONTERMINAL)
    // StructTypeName <- TYPE_QUALIFIERS? (STRUCT / UNION) Metadata? IDENTIFIER?
    var $$;          
    var pos = _cursor;             
    if(_cachePos[13] >= pos) {
      $$ = _getFromCache(13);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[13] = pos;
    }  
    // => TYPE_QUALIFIERS? (STRUCT / UNION) Metadata? IDENTIFIER? # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        // => TYPE_QUALIFIERS? (STRUCT / UNION) Metadata? IDENTIFIER? # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => TYPE_QUALIFIERS?
          var testing0 = _testing;
          _testing = _cursor;
          // => TYPE_QUALIFIERS
          $$ = _parse_TYPE_QUALIFIERS();
          // <= TYPE_QUALIFIERS
          success = true; 
          _testing = testing0;
          // <= TYPE_QUALIFIERS?
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          // => (STRUCT / UNION) # Choice
          switch (_getState(_transitions6)) {
            // [s]
            case 0:
              var startPos1 = _startPos;
              _startPos = _cursor;
              // => STRUCT
              $$ = _parse_STRUCT();
              // <= STRUCT
              _startPos = startPos1;
              break;
            // [u]
            case 1:
              var startPos2 = _startPos;
              _startPos = _cursor;
              // => UNION
              $$ = _parse_UNION();
              // <= UNION
              _startPos = startPos2;
              break;
            // No matches
            // EOF
            case 2:
            case 3:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            // Expected: 'struct', 'union'
            _failure(_expect11);
          }
          // <= (STRUCT / UNION) # Choice
          if (!success) break;
          seq[1] = $$;
          // => Metadata?
          var testing1 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing1;
          // <= Metadata?
          if (!success) break;
          seq[2] = $$;
          // => IDENTIFIER?
          var testing2 = _testing;
          _testing = _cursor;
          // => IDENTIFIER
          $$ = _parse_IDENTIFIER();
          // <= IDENTIFIER
          success = true; 
          _testing = testing2;
          // <= IDENTIFIER?
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            // TYPE_QUALIFIERS?
            final $1 = seq[0];
            // (STRUCT / UNION)
            final $2 = seq[1];
            // Metadata?
            final $3 = seq[2];
            // IDENTIFIER?
            final $4 = seq[3];
            final $start = startPos0;
            $$ = new TaggedTypeSpecification(kind: $2, metadata: $3, qualifiers: $1, tag: $4);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= TYPE_QUALIFIERS? (STRUCT / UNION) Metadata? IDENTIFIER? # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'struct', 'union'
      _failure(_expect11);
    }
    // <= TYPE_QUALIFIERS? (STRUCT / UNION) Metadata? IDENTIFIER? # Choice
    if (_cacheable[13]) {
      _addToCache($$, pos, 13);
    }    
    return $$;
  }
  
  dynamic _parse_StructTypeNameWithTag() {
    // SENTENCE (NONTERMINAL)
    // StructTypeNameWithTag <- TYPE_QUALIFIERS? (STRUCT / UNION) Metadata? IDENTIFIER
    var $$;
    // => TYPE_QUALIFIERS? (STRUCT / UNION) Metadata? IDENTIFIER # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        // => TYPE_QUALIFIERS? (STRUCT / UNION) Metadata? IDENTIFIER # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => TYPE_QUALIFIERS?
          var testing0 = _testing;
          _testing = _cursor;
          // => TYPE_QUALIFIERS
          $$ = _parse_TYPE_QUALIFIERS();
          // <= TYPE_QUALIFIERS
          success = true; 
          _testing = testing0;
          // <= TYPE_QUALIFIERS?
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          // => (STRUCT / UNION) # Choice
          switch (_getState(_transitions6)) {
            // [s]
            case 0:
              var startPos1 = _startPos;
              _startPos = _cursor;
              // => STRUCT
              $$ = _parse_STRUCT();
              // <= STRUCT
              _startPos = startPos1;
              break;
            // [u]
            case 1:
              var startPos2 = _startPos;
              _startPos = _cursor;
              // => UNION
              $$ = _parse_UNION();
              // <= UNION
              _startPos = startPos2;
              break;
            // No matches
            // EOF
            case 2:
            case 3:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            // Expected: 'struct', 'union'
            _failure(_expect11);
          }
          // <= (STRUCT / UNION) # Choice
          if (!success) break;
          seq[1] = $$;
          // => Metadata?
          var testing1 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing1;
          // <= Metadata?
          if (!success) break;
          seq[2] = $$;
          // => IDENTIFIER
          $$ = _parse_IDENTIFIER();
          // <= IDENTIFIER
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            // TYPE_QUALIFIERS?
            final $1 = seq[0];
            // (STRUCT / UNION)
            final $2 = seq[1];
            // Metadata?
            final $3 = seq[2];
            // IDENTIFIER
            final $4 = seq[3];
            final $start = startPos0;
            $$ = new TaggedTypeSpecification(kind: $2, metadata: $3, qualifiers: $1, tag: $4);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= TYPE_QUALIFIERS? (STRUCT / UNION) Metadata? IDENTIFIER # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'struct', 'union'
      _failure(_expect11);
    }
    // <= TYPE_QUALIFIERS? (STRUCT / UNION) Metadata? IDENTIFIER # Choice
    return $$;
  }
  
  dynamic _parse_TYPEDEF() {
    // LEXEME (TOKEN)
    // TYPEDEF <- 'typedef' SPACING
    var $$;
    _token = 28;  
    _tokenStart = _cursor;  
    // => 'typedef' SPACING # Choice
    switch (_ch == 116 ? 0 : _ch == -1 ? 2 : 1) {
      // [t]
      case 0:
        // => 'typedef' SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => 'typedef'
          $$ = _matchString(_strings9, 'typedef');
          // <= 'typedef'
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // 'typedef'
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= 'typedef' SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'typedef'
      _failure(_expect17);
    }
    // <= 'typedef' SPACING # Choice
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_TYPE_QUALIFIER() {
    // MORHEME
    // TYPE_QUALIFIER <- CONST
    var $$;
    // => CONST # Choice
    switch (_ch == 99 ? 0 : _ch == -1 ? 2 : 1) {
      // [c]
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => CONST
        $$ = _parse_CONST();
        // <= CONST
        _startPos = startPos0;
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: const
      _failure(_expect46);
    }
    // <= CONST # Choice
    return $$;
  }
  
  dynamic _parse_TYPE_QUALIFIERS() {
    // LEXEME (TOKEN)
    // TYPE_QUALIFIERS <- TYPE_QUALIFIER*
    var $$;
    _token = 29;  
    _tokenStart = _cursor;  
    // => TYPE_QUALIFIER* # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => TYPE_QUALIFIER*
        var testing0 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          // => TYPE_QUALIFIER
          $$ = _parse_TYPE_QUALIFIER();
          // <= TYPE_QUALIFIER
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing0;
            $$ = reps;
            break; 
          }
        }
        // <= TYPE_QUALIFIER*
        if (success) {    
          // TYPE_QUALIFIER*
          final $1 = $$;
          final $start = startPos0;
          $$ = new TypeQualifierList($1);
        }
        _startPos = startPos0;
        break;
      // No matches
      case 1:
        $$ = null;
        success = true;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: TYPE_QUALIFIERS
      _failure(_expect40);
    }
    // <= TYPE_QUALIFIER* # Choice
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_TaggedTypeParameter() {
    // SENTENCE (NONTERMINAL)
    // TaggedTypeParameter <- Metadata? (StructDeclaration / EnumDeclaration) IdentifierMD
    var $$;
    // => Metadata? (StructDeclaration / EnumDeclaration) IdentifierMD # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        // => Metadata? (StructDeclaration / EnumDeclaration) IdentifierMD # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => (StructDeclaration / EnumDeclaration) # Choice
          switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
            // [\u0000-\u0010ffff]
            case 0:
              while (true) {
                var startPos1 = _startPos;
                _startPos = _cursor;
                // => StructDeclaration
                $$ = _parse_StructDeclaration();
                // <= StructDeclaration
                _startPos = startPos1;
                if (success) break;
                var startPos2 = _startPos;
                _startPos = _cursor;
                // => EnumDeclaration
                $$ = _parse_EnumDeclaration();
                // <= EnumDeclaration
                _startPos = startPos2;
                break;
              }
              break;
            // No matches
            // EOF
            case 1:
            case 2:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            // Expected: 'enum', 'struct', 'union'
            _failure(_expect19);
          }
          // <= (StructDeclaration / EnumDeclaration) # Choice
          if (!success) break;
          seq[1] = $$;
          // => IdentifierMD
          $$ = _parse_IdentifierMD();
          // <= IdentifierMD
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // Metadata?
            final $1 = seq[0];
            // (StructDeclaration / EnumDeclaration)
            final $2 = seq[1];
            // IdentifierMD
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new ParameterDeclaration(identifier: $3, metadata: $1, type: $2.type);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= Metadata? (StructDeclaration / EnumDeclaration) IdentifierMD # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'enum', 'struct', 'union'
      _failure(_expect19);
    }
    // <= Metadata? (StructDeclaration / EnumDeclaration) IdentifierMD # Choice
    return $$;
  }
  
  dynamic _parse_TaggedTypeVariableDeclaration() {
    // SENTENCE (NONTERMINAL)
    // TaggedTypeVariableDeclaration <- Metadata? (StructDeclaration / EnumDeclaration) IdentifierMD
    var $$;
    // => Metadata? (StructDeclaration / EnumDeclaration) IdentifierMD # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        // => Metadata? (StructDeclaration / EnumDeclaration) IdentifierMD # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => (StructDeclaration / EnumDeclaration) # Choice
          switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
            // [\u0000-\u0010ffff]
            case 0:
              while (true) {
                var startPos1 = _startPos;
                _startPos = _cursor;
                // => StructDeclaration
                $$ = _parse_StructDeclaration();
                // <= StructDeclaration
                _startPos = startPos1;
                if (success) break;
                var startPos2 = _startPos;
                _startPos = _cursor;
                // => EnumDeclaration
                $$ = _parse_EnumDeclaration();
                // <= EnumDeclaration
                _startPos = startPos2;
                break;
              }
              break;
            // No matches
            // EOF
            case 1:
            case 2:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            // Expected: 'struct', 'union', 'enum'
            _failure(_expect19);
          }
          // <= (StructDeclaration / EnumDeclaration) # Choice
          if (!success) break;
          seq[1] = $$;
          // => IdentifierMD
          $$ = _parse_IdentifierMD();
          // <= IdentifierMD
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // Metadata?
            final $1 = seq[0];
            // (StructDeclaration / EnumDeclaration)
            final $2 = seq[1];
            // IdentifierMD
            final $3 = seq[2];
            final $start = startPos0;
            $$ = new VariableDeclaration(identifier: $3, metadata: $1, type: $2.type);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= Metadata? (StructDeclaration / EnumDeclaration) IdentifierMD # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'struct', 'union', 'enum'
      _failure(_expect19);
    }
    // <= Metadata? (StructDeclaration / EnumDeclaration) IdentifierMD # Choice
    return $$;
  }
  
  dynamic _parse_Type() {
    // SENTENCE (NONTERMINAL)
    // Type <- PointerType / ArrayType / TypeName
    var $$;          
    var pos = _cursor;             
    if(_cachePos[10] >= pos) {
      $$ = _getFromCache(10);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[10] = pos;
    }  
    // => PointerType / ArrayType / TypeName # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        while (true) {
          var startPos0 = _startPos;
          _startPos = _cursor;
          // => PointerType
          $$ = _parse_PointerType();
          // <= PointerType
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          // => ArrayType
          $$ = _parse_ArrayType();
          // <= ArrayType
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          // => TypeName
          $$ = _parse_TypeName();
          // <= TypeName
          _startPos = startPos2;
          break;
        }
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum'
      _failure(_expect3);
    }
    // <= PointerType / ArrayType / TypeName # Choice
    if (_cacheable[10]) {
      _addToCache($$, pos, 10);
    }    
    return $$;
  }
  
  dynamic _parse_TypeName() {
    // SENTENCE (NONTERMINAL)
    // TypeName <- TYPE_QUALIFIERS? IDENTIFIER Metadata? / TYPE_QUALIFIERS? SIGNEDNESS? (SHORT / LONG_TYPE) INT? Metadata? / TYPE_QUALIFIERS? SIGNEDNESS? (CHAR / INT / SHORT / LONG_TYPE) Metadata? / TYPE_QUALIFIERS? SIGNEDNESS Metadata? / TYPE_QUALIFIERS? (FLOAT / DOUBLE) Metadata? / TYPE_QUALIFIERS? VOID Metadata? / StructTypeName / EnumTypeName
    var $$;          
    var pos = _cursor;             
    if(_cachePos[12] >= pos) {
      $$ = _getFromCache(12);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[12] = pos;
    }  
    // => TYPE_QUALIFIERS? IDENTIFIER Metadata? / TYPE_QUALIFIERS? SIGNEDNESS? (SHORT / LONG_TYPE) INT? Metadata? / TYPE_QUALIFIERS? SIGNEDNESS? (CHAR / INT / SHORT / LONG_TYPE) Metadata? / TYPE_QUALIFIERS? SIGNEDNESS Metadata? / TYPE_QUALIFIERS? (FLOAT / DOUBLE) Metadata? / TYPE_QUALIFIERS? VOID Metadata? / StructTypeName / EnumTypeName # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        while (true) {
          // => TYPE_QUALIFIERS? IDENTIFIER Metadata? # Sequence
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => TYPE_QUALIFIERS?
            var testing0 = _testing;
            _testing = _cursor;
            // => TYPE_QUALIFIERS
            $$ = _parse_TYPE_QUALIFIERS();
            // <= TYPE_QUALIFIERS
            success = true; 
            _testing = testing0;
            // <= TYPE_QUALIFIERS?
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            // => IDENTIFIER
            $$ = _parse_IDENTIFIER();
            // <= IDENTIFIER
            if (!success) break;
            seq[1] = $$;
            // => Metadata?
            var testing1 = _testing;
            _testing = _cursor;
            // => Metadata
            $$ = _parse_Metadata();
            // <= Metadata
            success = true; 
            _testing = testing1;
            // <= Metadata?
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              // TYPE_QUALIFIERS?
              final $1 = seq[0];
              // IDENTIFIER
              final $2 = seq[1];
              // Metadata?
              final $3 = seq[2];
              final $start = startPos0;
              $$ = new DefinedTypeSpecification(metadata: $3, name: $2, qualifiers: $1);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          // <= TYPE_QUALIFIERS? IDENTIFIER Metadata? # Sequence
          if (success) break;
          // => TYPE_QUALIFIERS? SIGNEDNESS? (SHORT / LONG_TYPE) INT? Metadata? # Sequence
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => TYPE_QUALIFIERS?
            var testing2 = _testing;
            _testing = _cursor;
            // => TYPE_QUALIFIERS
            $$ = _parse_TYPE_QUALIFIERS();
            // <= TYPE_QUALIFIERS
            success = true; 
            _testing = testing2;
            // <= TYPE_QUALIFIERS?
            if (!success) break;
            var seq = new List(5)..[0] = $$;
            // => SIGNEDNESS?
            var testing3 = _testing;
            _testing = _cursor;
            // => SIGNEDNESS
            $$ = _parse_SIGNEDNESS();
            // <= SIGNEDNESS
            success = true; 
            _testing = testing3;
            // <= SIGNEDNESS?
            if (!success) break;
            seq[1] = $$;
            // => (SHORT / LONG_TYPE) # Choice
            switch (_getState(_transitions3)) {
              // [l]
              case 0:
                var startPos2 = _startPos;
                _startPos = _cursor;
                // => LONG_TYPE
                $$ = _parse_LONG_TYPE();
                // <= LONG_TYPE
                _startPos = startPos2;
                break;
              // [s]
              case 1:
                var startPos3 = _startPos;
                _startPos = _cursor;
                // => SHORT
                $$ = _parse_SHORT();
                // <= SHORT
                _startPos = startPos3;
                break;
              // No matches
              // EOF
              case 2:
              case 3:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              // Expected: 'short', 'long'
              _failure(_expect8);
            }
            // <= (SHORT / LONG_TYPE) # Choice
            if (!success) break;
            seq[2] = $$;
            // => INT?
            var testing4 = _testing;
            _testing = _cursor;
            // => INT
            $$ = _parse_INT();
            // <= INT
            success = true; 
            _testing = testing4;
            // <= INT?
            if (!success) break;
            seq[3] = $$;
            // => Metadata?
            var testing5 = _testing;
            _testing = _cursor;
            // => Metadata
            $$ = _parse_Metadata();
            // <= Metadata
            success = true; 
            _testing = testing5;
            // <= Metadata?
            if (!success) break;
            seq[4] = $$;
            $$ = seq;
            if (success) {    
              // TYPE_QUALIFIERS?
              final $1 = seq[0];
              // SIGNEDNESS?
              final $2 = seq[1];
              // (SHORT / LONG_TYPE)
              final $3 = seq[2];
              // INT?
              final $4 = seq[3];
              // Metadata?
              final $5 = seq[4];
              final $start = startPos1;
              $$ = new IntegerTypeSpecification(metadata: $5, name: _createInt([$2, $3, $4]), qualifiers: $1);
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          // <= TYPE_QUALIFIERS? SIGNEDNESS? (SHORT / LONG_TYPE) INT? Metadata? # Sequence
          if (success) break;
          // => TYPE_QUALIFIERS? SIGNEDNESS? (CHAR / INT / SHORT / LONG_TYPE) Metadata? # Sequence
          var ch2 = _ch, pos2 = _cursor, startPos4 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => TYPE_QUALIFIERS?
            var testing6 = _testing;
            _testing = _cursor;
            // => TYPE_QUALIFIERS
            $$ = _parse_TYPE_QUALIFIERS();
            // <= TYPE_QUALIFIERS
            success = true; 
            _testing = testing6;
            // <= TYPE_QUALIFIERS?
            if (!success) break;
            var seq = new List(4)..[0] = $$;
            // => SIGNEDNESS?
            var testing7 = _testing;
            _testing = _cursor;
            // => SIGNEDNESS
            $$ = _parse_SIGNEDNESS();
            // <= SIGNEDNESS
            success = true; 
            _testing = testing7;
            // <= SIGNEDNESS?
            if (!success) break;
            seq[1] = $$;
            // => (CHAR / INT / SHORT / LONG_TYPE) # Choice
            switch (_getState(_transitions4)) {
              // [c]
              case 0:
                var startPos5 = _startPos;
                _startPos = _cursor;
                // => CHAR
                $$ = _parse_CHAR();
                // <= CHAR
                _startPos = startPos5;
                break;
              // [i]
              case 1:
                var startPos6 = _startPos;
                _startPos = _cursor;
                // => INT
                $$ = _parse_INT();
                // <= INT
                _startPos = startPos6;
                break;
              // [l]
              case 2:
                var startPos7 = _startPos;
                _startPos = _cursor;
                // => LONG_TYPE
                $$ = _parse_LONG_TYPE();
                // <= LONG_TYPE
                _startPos = startPos7;
                break;
              // [s]
              case 3:
                var startPos8 = _startPos;
                _startPos = _cursor;
                // => SHORT
                $$ = _parse_SHORT();
                // <= SHORT
                _startPos = startPos8;
                break;
              // No matches
              // EOF
              case 4:
              case 5:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              // Expected: 'char', 'int', 'short', 'long'
              _failure(_expect9);
            }
            // <= (CHAR / INT / SHORT / LONG_TYPE) # Choice
            if (!success) break;
            seq[2] = $$;
            // => Metadata?
            var testing8 = _testing;
            _testing = _cursor;
            // => Metadata
            $$ = _parse_Metadata();
            // <= Metadata
            success = true; 
            _testing = testing8;
            // <= Metadata?
            if (!success) break;
            seq[3] = $$;
            $$ = seq;
            if (success) {    
              // TYPE_QUALIFIERS?
              final $1 = seq[0];
              // SIGNEDNESS?
              final $2 = seq[1];
              // (CHAR / INT / SHORT / LONG_TYPE)
              final $3 = seq[2];
              // Metadata?
              final $4 = seq[3];
              final $start = startPos4;
              $$ = new IntegerTypeSpecification(metadata: $4, name: _createInt([$2, $3]), qualifiers: $1);
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos4;
          // <= TYPE_QUALIFIERS? SIGNEDNESS? (CHAR / INT / SHORT / LONG_TYPE) Metadata? # Sequence
          if (success) break;
          // => TYPE_QUALIFIERS? SIGNEDNESS Metadata? # Sequence
          var ch3 = _ch, pos3 = _cursor, startPos9 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => TYPE_QUALIFIERS?
            var testing9 = _testing;
            _testing = _cursor;
            // => TYPE_QUALIFIERS
            $$ = _parse_TYPE_QUALIFIERS();
            // <= TYPE_QUALIFIERS
            success = true; 
            _testing = testing9;
            // <= TYPE_QUALIFIERS?
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            // => SIGNEDNESS
            $$ = _parse_SIGNEDNESS();
            // <= SIGNEDNESS
            if (!success) break;
            seq[1] = $$;
            // => Metadata?
            var testing10 = _testing;
            _testing = _cursor;
            // => Metadata
            $$ = _parse_Metadata();
            // <= Metadata
            success = true; 
            _testing = testing10;
            // <= Metadata?
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              // TYPE_QUALIFIERS?
              final $1 = seq[0];
              // SIGNEDNESS
              final $2 = seq[1];
              // Metadata?
              final $3 = seq[2];
              final $start = startPos9;
              $$ = new IntegerTypeSpecification(metadata: $3, name: $2, qualifiers: $1);
            }
            break;
          }
          if (!success) {
            _ch = ch3;
            _cursor = pos3;
          }
          _startPos = startPos9;
          // <= TYPE_QUALIFIERS? SIGNEDNESS Metadata? # Sequence
          if (success) break;
          // => TYPE_QUALIFIERS? (FLOAT / DOUBLE) Metadata? # Sequence
          var ch4 = _ch, pos4 = _cursor, startPos10 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => TYPE_QUALIFIERS?
            var testing11 = _testing;
            _testing = _cursor;
            // => TYPE_QUALIFIERS
            $$ = _parse_TYPE_QUALIFIERS();
            // <= TYPE_QUALIFIERS
            success = true; 
            _testing = testing11;
            // <= TYPE_QUALIFIERS?
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            // => (FLOAT / DOUBLE) # Choice
            switch (_getState(_transitions5)) {
              // [d]
              case 0:
                var startPos11 = _startPos;
                _startPos = _cursor;
                // => DOUBLE
                $$ = _parse_DOUBLE();
                // <= DOUBLE
                _startPos = startPos11;
                break;
              // [f]
              case 1:
                var startPos12 = _startPos;
                _startPos = _cursor;
                // => FLOAT
                $$ = _parse_FLOAT();
                // <= FLOAT
                _startPos = startPos12;
                break;
              // No matches
              // EOF
              case 2:
              case 3:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              // Expected: 'float', 'double'
              _failure(_expect10);
            }
            // <= (FLOAT / DOUBLE) # Choice
            if (!success) break;
            seq[1] = $$;
            // => Metadata?
            var testing12 = _testing;
            _testing = _cursor;
            // => Metadata
            $$ = _parse_Metadata();
            // <= Metadata
            success = true; 
            _testing = testing12;
            // <= Metadata?
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              // TYPE_QUALIFIERS?
              final $1 = seq[0];
              // (FLOAT / DOUBLE)
              final $2 = seq[1];
              // Metadata?
              final $3 = seq[2];
              final $start = startPos10;
              $$ = new FloatTypeSpecification(metadata: $3, name: $2, qualifiers: $1);
            }
            break;
          }
          if (!success) {
            _ch = ch4;
            _cursor = pos4;
          }
          _startPos = startPos10;
          // <= TYPE_QUALIFIERS? (FLOAT / DOUBLE) Metadata? # Sequence
          if (success) break;
          // => TYPE_QUALIFIERS? VOID Metadata? # Sequence
          var ch5 = _ch, pos5 = _cursor, startPos13 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => TYPE_QUALIFIERS?
            var testing13 = _testing;
            _testing = _cursor;
            // => TYPE_QUALIFIERS
            $$ = _parse_TYPE_QUALIFIERS();
            // <= TYPE_QUALIFIERS
            success = true; 
            _testing = testing13;
            // <= TYPE_QUALIFIERS?
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            // => VOID
            $$ = _parse_VOID();
            // <= VOID
            if (!success) break;
            seq[1] = $$;
            // => Metadata?
            var testing14 = _testing;
            _testing = _cursor;
            // => Metadata
            $$ = _parse_Metadata();
            // <= Metadata
            success = true; 
            _testing = testing14;
            // <= Metadata?
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              // TYPE_QUALIFIERS?
              final $1 = seq[0];
              // VOID
              final $2 = seq[1];
              // Metadata?
              final $3 = seq[2];
              final $start = startPos13;
              $$ = new VoidTypeSpecification(metadata: $3, qualifiers: $1);
            }
            break;
          }
          if (!success) {
            _ch = ch5;
            _cursor = pos5;
          }
          _startPos = startPos13;
          // <= TYPE_QUALIFIERS? VOID Metadata? # Sequence
          if (success) break;
          var startPos14 = _startPos;
          _startPos = _cursor;
          // => StructTypeName
          $$ = _parse_StructTypeName();
          // <= StructTypeName
          _startPos = startPos14;
          if (success) break;
          var startPos15 = _startPos;
          _startPos = _cursor;
          // => EnumTypeName
          $$ = _parse_EnumTypeName();
          // <= EnumTypeName
          _startPos = startPos15;
          break;
        }
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
      // EOF
      case 2:
        // => TYPE_QUALIFIERS? IDENTIFIER Metadata? # Sequence
        var ch6 = _ch, pos6 = _cursor, startPos16 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => TYPE_QUALIFIERS?
          var testing15 = _testing;
          _testing = _cursor;
          // => TYPE_QUALIFIERS
          $$ = _parse_TYPE_QUALIFIERS();
          // <= TYPE_QUALIFIERS
          success = true; 
          _testing = testing15;
          // <= TYPE_QUALIFIERS?
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => IDENTIFIER
          $$ = _parse_IDENTIFIER();
          // <= IDENTIFIER
          if (!success) break;
          seq[1] = $$;
          // => Metadata?
          var testing16 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing16;
          // <= Metadata?
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // TYPE_QUALIFIERS?
            final $1 = seq[0];
            // IDENTIFIER
            final $2 = seq[1];
            // Metadata?
            final $3 = seq[2];
            final $start = startPos16;
            $$ = new DefinedTypeSpecification(metadata: $3, name: $2, qualifiers: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch6;
          _cursor = pos6;
        }
        _startPos = startPos16;
        // <= TYPE_QUALIFIERS? IDENTIFIER Metadata? # Sequence
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum'
      _failure(_expect3);
    }
    // <= TYPE_QUALIFIERS? IDENTIFIER Metadata? / TYPE_QUALIFIERS? SIGNEDNESS? (SHORT / LONG_TYPE) INT? Metadata? / TYPE_QUALIFIERS? SIGNEDNESS? (CHAR / INT / SHORT / LONG_TYPE) Metadata? / TYPE_QUALIFIERS? SIGNEDNESS Metadata? / TYPE_QUALIFIERS? (FLOAT / DOUBLE) Metadata? / TYPE_QUALIFIERS? VOID Metadata? / StructTypeName / EnumTypeName # Choice
    if (_cacheable[12]) {
      _addToCache($$, pos, 12);
    }    
    return $$;
  }
  
  dynamic _parse_TypeSynonym() {
    // SENTENCE (NONTERMINAL)
    // TypeSynonym <- ArrayTypeSynonym / PointerTypeSynonym / SimpleTypeSynonym
    var $$;          
    var pos = _cursor;             
    if(_cachePos[43] >= pos) {
      $$ = _getFromCache(43);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[43] = pos;
    }  
    // => ArrayTypeSynonym / PointerTypeSynonym / SimpleTypeSynonym # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        while (true) {
          var startPos0 = _startPos;
          _startPos = _cursor;
          // => ArrayTypeSynonym
          $$ = _parse_ArrayTypeSynonym();
          // <= ArrayTypeSynonym
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          // => PointerTypeSynonym
          $$ = _parse_PointerTypeSynonym();
          // <= PointerTypeSynonym
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          // => SimpleTypeSynonym
          $$ = _parse_SimpleTypeSynonym();
          // <= SimpleTypeSynonym
          _startPos = startPos2;
          break;
        }
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
      // EOF
      case 2:
        while (true) {
          var startPos3 = _startPos;
          _startPos = _cursor;
          // => ArrayTypeSynonym
          $$ = _parse_ArrayTypeSynonym();
          // <= ArrayTypeSynonym
          _startPos = startPos3;
          if (success) break;
          var startPos4 = _startPos;
          _startPos = _cursor;
          // => SimpleTypeSynonym
          $$ = _parse_SimpleTypeSynonym();
          // <= SimpleTypeSynonym
          _startPos = startPos4;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '*', IDENTIFIER
      _failure(_expect20);
    }
    // <= ArrayTypeSynonym / PointerTypeSynonym / SimpleTypeSynonym # Choice
    if (_cacheable[43]) {
      _addToCache($$, pos, 43);
    }    
    return $$;
  }
  
  dynamic _parse_TypeSynonymList() {
    // SENTENCE (NONTERMINAL)
    // TypeSynonymList <- TypeSynonym (COMMA TypeSynonym)*
    var $$;
    // => TypeSynonym (COMMA TypeSynonym)* # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        // => TypeSynonym (COMMA TypeSynonym)* # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => TypeSynonym
          $$ = _parse_TypeSynonym();
          // <= TypeSynonym
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => (COMMA TypeSynonym)*
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            // => (COMMA TypeSynonym) # Choice
            switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
              // [,]
              case 0:
                // => COMMA TypeSynonym # Sequence
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  // => COMMA
                  $$ = _parse_COMMA();
                  // <= COMMA
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  // => TypeSynonym
                  $$ = _parse_TypeSynonym();
                  // <= TypeSynonym
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                // <= COMMA TypeSynonym # Sequence
                break;
              // No matches
              // EOF
              case 1:
              case 2:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              // Expected: ','
              _failure(_expect6);
            }
            // <= (COMMA TypeSynonym) # Choice
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          // <= (COMMA TypeSynonym)*
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // TypeSynonym
            final $1 = seq[0];
            // (COMMA TypeSynonym)*
            final $2 = seq[1];
            final $start = startPos0;
            $$ = _list($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= TypeSynonym (COMMA TypeSynonym)* # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '*', IDENTIFIER
      _failure(_expect20);
    }
    // <= TypeSynonym (COMMA TypeSynonym)* # Choice
    return $$;
  }
  
  dynamic _parse_TypeSynonymNoMetadata() {
    // SENTENCE (NONTERMINAL)
    // TypeSynonymNoMetadata <- ArrayTypeSynonym / PointerTypeSynonymNoMetadata / SimpleTypeSynonymNoMetadata
    var $$;
    // => ArrayTypeSynonym / PointerTypeSynonymNoMetadata / SimpleTypeSynonymNoMetadata # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        while (true) {
          var startPos0 = _startPos;
          _startPos = _cursor;
          // => ArrayTypeSynonym
          $$ = _parse_ArrayTypeSynonym();
          // <= ArrayTypeSynonym
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          // => PointerTypeSynonymNoMetadata
          $$ = _parse_PointerTypeSynonymNoMetadata();
          // <= PointerTypeSynonymNoMetadata
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          // => SimpleTypeSynonymNoMetadata
          $$ = _parse_SimpleTypeSynonymNoMetadata();
          // <= SimpleTypeSynonymNoMetadata
          _startPos = startPos2;
          break;
        }
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
      // EOF
      case 2:
        while (true) {
          var startPos3 = _startPos;
          _startPos = _cursor;
          // => ArrayTypeSynonym
          $$ = _parse_ArrayTypeSynonym();
          // <= ArrayTypeSynonym
          _startPos = startPos3;
          if (success) break;
          var startPos4 = _startPos;
          _startPos = _cursor;
          // => SimpleTypeSynonymNoMetadata
          $$ = _parse_SimpleTypeSynonymNoMetadata();
          // <= SimpleTypeSynonymNoMetadata
          _startPos = startPos4;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, '*'
      _failure(_expect20);
    }
    // <= ArrayTypeSynonym / PointerTypeSynonymNoMetadata / SimpleTypeSynonymNoMetadata # Choice
    return $$;
  }
  
  dynamic _parse_TypedefDeclaration() {
    // SENTENCE (NONTERMINAL)
    // TypedefDeclaration <- Metadata? TypedefSpecifier TypedefType TypeSynonymList
    var $$;
    // => Metadata? TypedefSpecifier TypedefType TypeSynonymList # Choice
    switch (_getState(_transitions8)) {
      // [_] [t]
      case 0:
        // => Metadata? TypedefSpecifier TypedefType TypeSynonymList # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          // => TypedefSpecifier
          $$ = _parse_TypedefSpecifier();
          // <= TypedefSpecifier
          if (!success) break;
          seq[1] = $$;
          // => TypedefType
          $$ = _parse_TypedefType();
          // <= TypedefType
          if (!success) break;
          seq[2] = $$;
          // => TypeSynonymList
          $$ = _parse_TypeSynonymList();
          // <= TypeSynonymList
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            // Metadata?
            final $1 = seq[0];
            // TypedefSpecifier
            final $2 = seq[1];
            // TypedefType
            final $3 = seq[2];
            // TypeSynonymList
            final $4 = seq[3];
            final $start = startPos0;
            $$ = new TypedefDeclaration(metadata: $1, synonyms: $4, typedef: $2, type: $3);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= Metadata? TypedefSpecifier TypedefType TypeSynonymList # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'typedef'
      _failure(_expect17);
    }
    // <= Metadata? TypedefSpecifier TypedefType TypeSynonymList # Choice
    return $$;
  }
  
  dynamic _parse_TypedefSpecifier() {
    // SENTENCE (NONTERMINAL)
    // TypedefSpecifier <- TYPEDEF Metadata?
    var $$;
    // => TYPEDEF Metadata? # Choice
    switch (_ch == 116 ? 0 : _ch == -1 ? 2 : 1) {
      // [t]
      case 0:
        // => TYPEDEF Metadata? # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => TYPEDEF
          $$ = _parse_TYPEDEF();
          // <= TYPEDEF
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => Metadata?
          var testing0 = _testing;
          _testing = _cursor;
          // => Metadata
          $$ = _parse_Metadata();
          // <= Metadata
          success = true; 
          _testing = testing0;
          // <= Metadata?
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // TYPEDEF
            final $1 = seq[0];
            // Metadata?
            final $2 = seq[1];
            final $start = startPos0;
            $$ = new TypedefSpecifier(metadata: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= TYPEDEF Metadata? # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'typedef'
      _failure(_expect17);
    }
    // <= TYPEDEF Metadata? # Choice
    return $$;
  }
  
  dynamic _parse_TypedefType() {
    // SENTENCE (NONTERMINAL)
    // TypedefType <- StructType / EnumType / TypeName
    var $$;
    // => StructType / EnumType / TypeName # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        while (true) {
          var startPos0 = _startPos;
          _startPos = _cursor;
          // => StructType
          $$ = _parse_StructType();
          // <= StructType
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          // => EnumType
          $$ = _parse_EnumType();
          // <= EnumType
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          // => TypeName
          $$ = _parse_TypeName();
          // <= TypeName
          _startPos = startPos2;
          break;
        }
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
      // EOF
      case 2:
        var startPos3 = _startPos;
        _startPos = _cursor;
        // => TypeName
        $$ = _parse_TypeName();
        // <= TypeName
        _startPos = startPos3;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'struct', 'union', 'enum', IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void'
      _failure(_expect3);
    }
    // <= StructType / EnumType / TypeName # Choice
    return $$;
  }
  
  dynamic _parse_UNION() {
    // LEXEME (TOKEN)
    // UNION <- 'union' !IDENT_PART SPACING
    var $$;          
    var pos = _cursor;             
    if(_cachePos[86] >= pos) {
      $$ = _getFromCache(86);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[86] = pos;
    }  
    _token = 30;    
    _tokenStart = _cursor;    
    // => 'union' !IDENT_PART SPACING # Choice
    switch (_ch == 117 ? 0 : _ch == -1 ? 2 : 1) {
      // [u]
      case 0:
        // => 'union' !IDENT_PART SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => 'union'
          $$ = _matchString(_strings10, 'union');
          // <= 'union'
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => !IDENT_PART
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          // => IDENT_PART
          $$ = _parse_IDENT_PART();
          // <= IDENT_PART
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          // <= !IDENT_PART
          if (!success) break;
          seq[1] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // 'union'
            final $1 = seq[0];
            // !IDENT_PART
            final $2 = seq[1];
            // SPACING
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= 'union' !IDENT_PART SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'union'
      _failure(_expect41);
    }
    // <= 'union' !IDENT_PART SPACING # Choice
    if (_cacheable[86]) {
      _addToCache($$, pos, 86);
    }    
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_UNIVERSAL_CHARCTER_NAME() {
    // MORHEME
    // UNIVERSAL_CHARCTER_NAME <- '\\U' HEX_QUAD HEX_QUAD / '\\u' HEX_QUAD
    var $$;
    // => '\\U' HEX_QUAD HEX_QUAD / '\\u' HEX_QUAD # Choice
    switch (_ch == 92 ? 0 : _ch == -1 ? 2 : 1) {
      // [\\]
      case 0:
        while (true) {
          // => '\\U' HEX_QUAD HEX_QUAD # Sequence
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => '\\U'
            $$ = _matchString(_strings43, '\\U');
            // <= '\\U'
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            // => HEX_QUAD
            $$ = _parse_HEX_QUAD();
            // <= HEX_QUAD
            if (!success) break;
            seq[1] = $$;
            // => HEX_QUAD
            $$ = _parse_HEX_QUAD();
            // <= HEX_QUAD
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              // '\\U'
              final $1 = seq[0];
              // HEX_QUAD
              final $2 = seq[1];
              // HEX_QUAD
              final $3 = seq[2];
              final $start = startPos0;
              $$ = int.parse(_text(2), radix: 16);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          // <= '\\U' HEX_QUAD HEX_QUAD # Sequence
          if (success) break;
          // => '\\u' HEX_QUAD # Sequence
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            // => '\\u'
            $$ = _matchString(_strings44, '\\u');
            // <= '\\u'
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // => HEX_QUAD
            $$ = _parse_HEX_QUAD();
            // <= HEX_QUAD
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // '\\u'
              final $1 = seq[0];
              // HEX_QUAD
              final $2 = seq[1];
              final $start = startPos1;
              $$ = int.parse(_text(2), radix: 16);
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          // <= '\\u' HEX_QUAD # Sequence
          break;
        }
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: \U, \u
      _failure(_expect55);
    }
    // <= '\\U' HEX_QUAD HEX_QUAD / '\\u' HEX_QUAD # Choice
    return $$;
  }
  
  dynamic _parse_UNSIGNED() {
    // MORHEME
    // UNSIGNED <- 'unsigned' !IDENT_PART SPACING
    var $$;
    // => 'unsigned' !IDENT_PART SPACING # Choice
    switch (_ch == 117 ? 0 : _ch == -1 ? 2 : 1) {
      // [u]
      case 0:
        // => 'unsigned' !IDENT_PART SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => 'unsigned'
          $$ = _matchString(_strings40, 'unsigned');
          // <= 'unsigned'
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => !IDENT_PART
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          // => IDENT_PART
          $$ = _parse_IDENT_PART();
          // <= IDENT_PART
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          // <= !IDENT_PART
          if (!success) break;
          seq[1] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // 'unsigned'
            final $1 = seq[0];
            // !IDENT_PART
            final $2 = seq[1];
            // SPACING
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= 'unsigned' !IDENT_PART SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: unsigned
      _failure(_expect56);
    }
    // <= 'unsigned' !IDENT_PART SPACING # Choice
    return $$;
  }
  
  dynamic _parse_VA_LIST_PARAMETER() {
    // LEXEME (TOKEN)
    // VA_LIST_PARAMETER <- ELLIPSIS
    var $$;
    _token = 31;  
    _tokenStart = _cursor;  
    // => ELLIPSIS # Choice
    switch (_ch == 46 ? 0 : _ch == -1 ? 2 : 1) {
      // [.]
      case 0:
        var startPos0 = _startPos;
        _startPos = _cursor;
        // => ELLIPSIS
        $$ = _parse_ELLIPSIS();
        // <= ELLIPSIS
        if (success) {    
          // ELLIPSIS
          final $1 = $$;
          final $start = startPos0;
          $$ = new ParameterDeclaration(type: new VaListTypeSpecification());
        }
        _startPos = startPos0;
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: '...'
      _failure(_expect42);
    }
    // <= ELLIPSIS # Choice
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_VOID() {
    // LEXEME (TOKEN)
    // VOID <- 'void' !IDENT_PART SPACING
    var $$;
    _token = 32;  
    _tokenStart = _cursor;  
    // => 'void' !IDENT_PART SPACING # Choice
    switch (_ch == 118 ? 0 : _ch == -1 ? 2 : 1) {
      // [v]
      case 0:
        // => 'void' !IDENT_PART SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => 'void'
          $$ = _matchString(_strings11, 'void');
          // <= 'void'
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => !IDENT_PART
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          // => IDENT_PART
          $$ = _parse_IDENT_PART();
          // <= IDENT_PART
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          // <= !IDENT_PART
          if (!success) break;
          seq[1] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // 'void'
            final $1 = seq[0];
            // !IDENT_PART
            final $2 = seq[1];
            // SPACING
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= 'void' !IDENT_PART SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'void'
      _failure(_expect43);
    }
    // <= 'void' !IDENT_PART SPACING # Choice
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_VariableDeclaration() {
    // SENTENCE (NONTERMINAL)
    // VariableDeclaration <- ArrayVariableDeclaration / TaggedTypeVariableDeclaration / PointerVariableDeclaration / SimpleVariableDeclaration
    var $$;
    // => ArrayVariableDeclaration / TaggedTypeVariableDeclaration / PointerVariableDeclaration / SimpleVariableDeclaration # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      case 0:
        while (true) {
          var startPos0 = _startPos;
          _startPos = _cursor;
          // => ArrayVariableDeclaration
          $$ = _parse_ArrayVariableDeclaration();
          // <= ArrayVariableDeclaration
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          _startPos = _cursor;
          // => TaggedTypeVariableDeclaration
          $$ = _parse_TaggedTypeVariableDeclaration();
          // <= TaggedTypeVariableDeclaration
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          _startPos = _cursor;
          // => PointerVariableDeclaration
          $$ = _parse_PointerVariableDeclaration();
          // <= PointerVariableDeclaration
          _startPos = startPos2;
          if (success) break;
          var startPos3 = _startPos;
          _startPos = _cursor;
          // => SimpleVariableDeclaration
          $$ = _parse_SimpleVariableDeclaration();
          // <= SimpleVariableDeclaration
          _startPos = startPos3;
          break;
        }
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
      // EOF
      case 2:
        while (true) {
          var startPos4 = _startPos;
          _startPos = _cursor;
          // => ArrayVariableDeclaration
          $$ = _parse_ArrayVariableDeclaration();
          // <= ArrayVariableDeclaration
          _startPos = startPos4;
          if (success) break;
          var startPos5 = _startPos;
          _startPos = _cursor;
          // => PointerVariableDeclaration
          $$ = _parse_PointerVariableDeclaration();
          // <= PointerVariableDeclaration
          _startPos = startPos5;
          if (success) break;
          var startPos6 = _startPos;
          _startPos = _cursor;
          // => SimpleVariableDeclaration
          $$ = _parse_SimpleVariableDeclaration();
          // <= SimpleVariableDeclaration
          _startPos = startPos6;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, 'short', 'long', 'char', 'int', SIGNEDNESS, 'float', 'double', 'void', 'struct', 'union', 'enum'
      _failure(_expect3);
    }
    // <= ArrayVariableDeclaration / TaggedTypeVariableDeclaration / PointerVariableDeclaration / SimpleVariableDeclaration # Choice
    return $$;
  }
  
  dynamic _parse_ZERO() {
    // MORHEME
    // ZERO <- [0]+ ![0-9]+
    var $$;
    // => [0]+ ![0-9]+ # Choice
    switch (_ch == 48 ? 0 : _ch == -1 ? 2 : 1) {
      // [0]
      case 0:
        // => [0]+ ![0-9]+ # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => [0]+
          var testing0;
          for (var first = true, reps; ;) {  
            // => [0]  
            $$ = _matchChar(48, '0');  
            // <= [0]  
            if (success) {
             if (first) {      
                first = false;
                reps = [$$];
                testing0 = _testing;                  
              } else {
                reps.add($$);
              }
              _testing = _cursor;   
            } else {
              success = !first;
              if (success) {      
                _testing = testing0;
                $$ = reps;      
              } else $$ = null;
              break;
            }  
          }
          // <= [0]+
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => ![0-9]+
          var ch1 = _ch, pos1 = _cursor, testing1 = _testing; 
          _testing = _inputLen + 1;
          // => [0-9]+
          var testing2;
          for (var first = true, reps; ;) {  
            // => [0-9]  
            $$ = _matchRange(48, 57);  
            // <= [0-9]  
            if (success) {
             if (first) {      
                first = false;
                reps = [$$];
                testing2 = _testing;                  
              } else {
                reps.add($$);
              }
              _testing = _cursor;   
            } else {
              success = !first;
              if (success) {      
                _testing = testing2;
                $$ = reps;      
              } else $$ = null;
              break;
            }  
          }
          // <= [0-9]+
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing1;
          $$ = null;
          success = !success;
          // <= ![0-9]+
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // [0]+
            final $1 = seq[0];
            // ![0-9]+
            final $2 = seq[1];
            final $start = startPos0;
            $$ = 0;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= [0]+ ![0-9]+ # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 
      _failure(const [null]);
    }
    // <= [0]+ ![0-9]+ # Choice
    return $$;
  }
  
  dynamic _parse_ZERO_NUMBER() {
    // LEXEME (TOKEN)
    // ZERO_NUMBER <- ZERO SPACING
    var $$;
    _token = 33;  
    _tokenStart = _cursor;  
    // => ZERO SPACING # Choice
    switch (_ch == 48 ? 0 : _ch == -1 ? 2 : 1) {
      // [0]
      case 0:
        // => ZERO SPACING # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => ZERO
          $$ = _parse_ZERO();
          // <= ZERO
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // => SPACING
          $$ = _parse_SPACING();
          // <= SPACING
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // ZERO
            final $1 = seq[0];
            // SPACING
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= ZERO SPACING # Sequence
        break;
      // No matches
      // EOF
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: ZERO_NUMBER
      _failure(_expect44);
    }
    // <= ZERO SPACING # Choice
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  String _text([int offset = 0]) {
    return new String.fromCharCodes(_input.sublist(_startPos + offset, _cursor));
  }
  
  int _toCodePoint(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      throw new StateError("An empty string contains no elements.");
    }
  
    var start = string.codeUnitAt(0);
    if (length == 1) {
      return start;
    }
  
    if ((start & 0xFC00) == 0xD800) {
      var end = string.codeUnitAt(1);
      if ((end & 0xFC00) == 0xDC00) {
        return (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
      }
    }
  
    return start;
  }
  
  List<int> _toCodePoints(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      return const <int>[];
    }
  
    var codePoints = <int>[];
    codePoints.length = length;
    var i = 0;
    var pos = 0;
    for ( ; i < length; pos++) {
      var start = string.codeUnitAt(i);
      i++;
      if ((start & 0xFC00) == 0xD800 && i < length) {
        var end = string.codeUnitAt(i);
        if ((end & 0xFC00) == 0xDC00) {
          codePoints[pos] = (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
          i++;
        } else {
          codePoints[pos] = start;
        }
      } else {
        codePoints[pos] = start;
      }
    }
  
    codePoints.length = pos;
    return codePoints;
  }
  
  static List<bool> _unmap(List<int> mapping) {
    var length = mapping.length;
    var result = new List<bool>(length * 31);
    var offset = 0;
    for (var i = 0; i < length; i++) {
      var v = mapping[i];
      for (var j = 0; j < 31; j++) {
        result[offset++] = v & (1 << j) == 0 ? false : true;
      }
    }
    return result;
  }
  
  List<CParserError> errors() {
    if (success) {
      return <CParserError>[];
    }
  
    String escape(int c) {
      switch (c) {
        case 10:
          return r"\n";
        case 13:
          return r"\r";
        case 09:
          return r"\t";
        case -1:
          return "";
      }
      return new String.fromCharCode(c);
    } 
    
    String getc(int position) {  
      if (position < _inputLen) {
        return "'${escape(_input[position])}'";      
      }       
      return "end of file";
    }
  
    var errors = <CParserError>[];
    if (_failurePos >= _cursor) {
      var set = new Set<CParserError>();
      set.addAll(_errors);
      for (var error in set) {
        if (error.position >= _failurePos) {
          errors.add(error);
        }
      }
      var names = new Set<String>();  
      names.addAll(_expected);
      if (names.contains(null)) {
        var string = getc(_failurePos);
        var message = "Unexpected $string";
        var error = new CParserError(CParserError.UNEXPECTED, _failurePos, _failurePos, message);
        errors.add(error);
      } else {      
        var found = getc(_failurePos);      
        var list = names.toList();
        list.sort();
        var message = "Expected ${list.join(", ")} but found $found";
        var error = new CParserError(CParserError.EXPECTED, _failurePos, _failurePos, message);
        errors.add(error);
      }        
    }
    errors.sort((a, b) => a.position.compareTo(b.position));
    return errors;  
  }
  
  dynamic parse_Declarations() {
    // SENTENCE (NONTERMINAL)
    // Declarations <- LEADING_SPACES? DeclarationList? EOF
    var $$;
    // => LEADING_SPACES? DeclarationList? EOF # Choice
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      // [\u0000-\u0010ffff]
      // EOF
      case 0:
      case 2:
        // => LEADING_SPACES? DeclarationList? EOF # Sequence
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          // => LEADING_SPACES?
          var testing0 = _testing;
          _testing = _cursor;
          // => LEADING_SPACES
          $$ = _parse_LEADING_SPACES();
          // <= LEADING_SPACES
          success = true; 
          _testing = testing0;
          // <= LEADING_SPACES?
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          // => DeclarationList?
          var testing1 = _testing;
          _testing = _cursor;
          // => DeclarationList
          $$ = _parse_DeclarationList();
          // <= DeclarationList
          success = true; 
          _testing = testing1;
          // <= DeclarationList?
          if (!success) break;
          seq[1] = $$;
          // => EOF
          $$ = _parse_EOF();
          // <= EOF
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            // LEADING_SPACES?
            final $1 = seq[0];
            // DeclarationList?
            final $2 = seq[1];
            // EOF
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $2;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        // <= LEADING_SPACES? DeclarationList? EOF # Sequence
        break;
      // No matches
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      // Expected: EOF
      _failure(_expect0);
    }
    // <= LEADING_SPACES? DeclarationList? EOF # Choice
    return $$;
  }
  
  void reset(int pos) {
    if (pos == null) {
      throw new ArgumentError('pos: $pos');
    }
    if (pos < 0 || pos > _inputLen) {
      throw new RangeError('pos');
    }      
    _cursor = pos;
    _cache = new List<Map<int, List>>(122);
    _cachePos = new List<int>.filled(122, -1);  
    _cacheable = new List<bool>.filled(122, false);
    _ch = -1;
    _errors = <CParserError>[];   
    _expected = <String>[];
    _failurePos = -1;
    _startPos = pos;        
    _testing = -1;
    _token = null;
    _tokenStart = null;  
    if (_cursor < _inputLen) {
      _ch = _input[_cursor];
    }
    success = true;    
  }
  
}

class CParserError {
  static const int EXPECTED = 1;    
      
  static const int MALFORMED = 2;    
      
  static const int MISSING = 3;    
      
  static const int UNEXPECTED = 4;    
      
  static const int UNTERMINATED = 5;    
      
  final int hashCode = 0;
  
  final String message;
  
  final int position;
  
  final int start;
  
  final int type;
  
  CParserError(this.type, this.position, this.start, this.message);
  
  bool operator ==(other) {
    if (identical(this, other)) return true;
    if (other is CParserError) {
      return type == other.type && position == other.position &&
      start == other.start && message == other.message;  
    }
    return false;
  }
  
}

