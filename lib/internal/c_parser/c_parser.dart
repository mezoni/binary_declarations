// This code was generated by a tool.
// Processing tool available at https://github.com/mezoni/peg

import "package:binary_declarations/binary_declarations.dart";

ArrayTypeSpecification _createArray(TypeSpecification type, List dimensions) {  
  return new ArrayTypeSpecification(dimensions: dimensions, type: type);
}

String _createInt(List parts) {
  var list = [];
  for (var part in parts) {
    if (part != null) {
      list.add(part);
    }
  }

  return list.join(" ");
}

List _createParameters(List parameters, ParameterDeclaration vaList) {    
  var list = <ParameterDeclaration>[];
  list.addAll(parameters);
  if (vaList != null) {
    list.add(vaList);  
  }
  
  return list;
}

PointerTypeSpecification _createPointer(TypeSpecification type, List stars) {    
  for (var star in stars) {
    type = new PointerTypeSpecification(type: type);
  }
  
  return type;
}
class CParser {
  static final List<String> _ascii = new List<String>.generate(128, (c) => new String.fromCharCode(c));
  
  static final List<String> _expect0 = <String>["EOF"];
  
  static final List<String> _expect1 = <String>[];
  
  static final List<String> _expect10 = <String>["long"];
  
  static final List<String> _expect11 = <String>["ReservedWord"];
  
  static final List<String> _expect12 = <String>["char", "double", "float", "int", "long", "short", "signed", "struct", "typedef", "union", "unsigned", "void"];
  
  static final List<String> _expect13 = <String>["IDENT_CONT", "IDENT_START"];
  
  static final List<String> _expect14 = <String>["signed", "unsigned"];
  
  static final List<String> _expect15 = <String>["IDENT_PART"];
  
  static final List<String> _expect16 = <String>["signed"];
  
  static final List<String> _expect17 = <String>["unsigned"];
  
  static final List<String> _expect18 = <String>["char"];
  
  static final List<String> _expect19 = <String>["int"];
  
  static final List<String> _expect2 = <String>[null, "\\r\\n", "//"];
  
  static final List<String> _expect20 = <String>["short"];
  
  static final List<String> _expect21 = <String>["float"];
  
  static final List<String> _expect22 = <String>["double"];
  
  static final List<String> _expect23 = <String>["struct"];
  
  static final List<String> _expect24 = <String>["IDENT_START"];
  
  static final List<String> _expect25 = <String>["union"];
  
  static final List<String> _expect26 = <String>["void"];
  
  static final List<String> _expect27 = <String>["*"];
  
  static final List<String> _expect28 = <String>["["];
  
  static final List<String> _expect29 = <String>["]"];
  
  static final List<String> _expect3 = <String>[null, "\\r\\n"];
  
  static final List<String> _expect30 = <String>["("];
  
  static final List<String> _expect31 = <String>[","];
  
  static final List<String> _expect32 = <String>["const"];
  
  static final List<String> _expect33 = <String>["..."];
  
  static final List<String> _expect34 = <String>[")"];
  
  static final List<String> _expect35 = <String>[";"];
  
  static final List<String> _expect36 = <String>["typedef"];
  
  static final List<String> _expect37 = <String>["struct", "union"];
  
  static final List<String> _expect38 = <String>["{"];
  
  static final List<String> _expect39 = <String>["}"];
  
  static final List<String> _expect4 = <String>["//"];
  
  static final List<String> _expect40 = <String>["IDENT_CONT"];
  
  static final List<String> _expect5 = <String>[null];
  
  static final List<String> _expect6 = <String>["IDENT_START", "char", "double", "float", "int", "long", "short", "struct", "typedef", "union", "void"];
  
  static final List<String> _expect7 = <String>["IDENT_START", "char", "double", "float", "int", "long", "short", "struct", "union", "void"];
  
  static final List<String> _expect8 = <String>["char", "int"];
  
  static final List<String> _expect9 = <String>["long", "short"];
  
  static final List<bool> _lookahead = _unmap([0x7ffe03ff, 0x7ffd0fff, 0x27fff, 0x3c092e0]);
  
  static final List<bool> _mapping0 = _unmap([0x800001]);
  
  static final List<bool> _mapping1 = _unmap([0x9]);
  
  static final List<bool> _mapping2 = _unmap([0x43ffffff, 0x7fffffe]);
  
  static final List<int> _strings0 = <int>[13, 10];
  
  static final List<int> _strings1 = <int>[47, 47];
  
  static final List<int> _strings10 = <int>[116, 121, 112, 101, 100, 101, 102];
  
  static final List<int> _strings11 = <int>[117, 110, 115, 105, 103, 110, 101, 100];
  
  static final List<int> _strings12 = <int>[117, 110, 105, 111, 110];
  
  static final List<int> _strings13 = <int>[118, 111, 105, 100];
  
  static final List<int> _strings14 = <int>[99, 111, 110, 115, 116];
  
  static final List<int> _strings15 = <int>[46, 46, 46];
  
  static final List<int> _strings2 = <int>[99, 104, 97, 114];
  
  static final List<int> _strings3 = <int>[100, 111, 117, 98, 108, 101];
  
  static final List<int> _strings4 = <int>[102, 108, 111, 97, 116];
  
  static final List<int> _strings5 = <int>[105, 110, 116];
  
  static final List<int> _strings6 = <int>[108, 111, 110, 103];
  
  static final List<int> _strings7 = <int>[115, 105, 103, 110, 101, 100];
  
  static final List<int> _strings8 = <int>[115, 104, 111, 114, 116];
  
  static final List<int> _strings9 = <int>[115, 116, 114, 117, 99, 116];
  
  final List<int> _tokenFlags = [0, 0, 0, 0, 0];
  
  final List<String> _tokenNames = ["ReservedWord", "IDENT_PART", "EOF", "IDENT_CONT", "IDENT_START"];
  
  static final List<List<int>> _transitions0 = [[9, 10, 13, 13, 32, 32], [47, 47]];
  
  static final List<List<int>> _transitions1 = [[9, 9, 32, 32], [10, 10, 13, 13]];
  
  static final List<List<int>> _transitions10 = [[115, 115], [117, 117]];
  
  static final List<List<int>> _transitions11 = [[115, 115, 117, 117]];
  
  static final List<List<int>> _transitions2 = [[10, 10], [13, 13]];
  
  static final List<List<int>> _transitions3 = [[65, 90, 95, 95], [97, 122]];
  
  static final List<List<int>> _transitions4 = [[65, 90, 95, 95, 97, 122]];
  
  static final List<List<int>> _transitions5 = [[99, 99], [105, 105]];
  
  static final List<List<int>> _transitions6 = [[108, 108], [115, 115]];
  
  static final List<List<int>> _transitions7 = [[99, 100, 102, 102, 105, 105, 108, 108, 115, 118]];
  
  static final List<List<int>> _transitions8 = [[99, 99], [100, 100], [102, 102], [105, 105], [108, 108], [115, 115], [116, 116], [117, 117], [118, 118]];
  
  static final List<List<int>> _transitions9 = [[48, 57], [65, 90, 95, 95, 97, 122]];
  
  List _cache;
  
  int _cachePos;
  
  List<int> _cacheRule;
  
  List<int> _cacheState;
  
  int _ch;
  
  int _cursor;
  
  List<CParserError> _errors;
  
  List<String> _expected;
  
  int _failurePos;
  
  List<int> _input;
  
  int _inputLen;
  
  int _startPos;
  
  int _testing;
  
  int _token;
  
  int _tokenLevel;
  
  int _tokenStart;
  
  bool success;
  
  final String text;
  
  CParser(this.text) {
    if (text == null) {
      throw new ArgumentError('text: $text');
    }    
    _input = _toCodePoints(text);
    _inputLen = _input.length;
    if (_inputLen >= 0x3fffffe8 / 32) {
      throw new StateError('File size to big: $_inputLen');
    }  
    reset(0);    
  }
  
  void _beginToken(int tokenId) {
    if (_tokenLevel++ == 0) {
      _token = tokenId;
      _tokenStart = _cursor;
    }  
  }
  
  void _endToken() {
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }    
  }
  
  void _failure([List<String> expected]) {  
    if (_failurePos > _cursor) {
      return;
    }
    if (_failurePos < _cursor) {    
      _expected = [];
     _failurePos = _cursor;
    }
    if (_token != null) {
      var flag = _tokenFlags[_token];
      var name = _tokenNames[_token];
      if (_failurePos == _inputLen && (flag & 1) != 0) {             
        var message = "Unterminated $name";
        _errors.add(new CParserError(CParserError.UNTERMINATED, _failurePos, _tokenStart, message));            
      }
      else if (_failurePos > _tokenStart && (flag & 1) != 0) {             
        var message = "Malformed $name";
        _errors.add(new CParserError(CParserError.MALFORMED, _failurePos, _tokenStart, message));            
      }
      _expected.add(name);        
    } else if (expected == null) {
      _expected.add(null);
    } else {
      _expected.addAll(expected);
    }   
  }
  
  List _flatten(dynamic value) {
    if (value is List) {
      var result = [];
      var length = value.length;
      for (var i = 0; i < length; i++) {
        var element = value[i];
        if (element is Iterable) {
          result.addAll(_flatten(element));
        } else {
          result.add(element);
        }
      }
      return result;
    } else if (value is Iterable) {
      var result = [];
      for (var element in value) {
        if (element is! List) {
          result.add(element);
        } else {
          result.addAll(_flatten(element));
        }
      }
    }
    return [value];
  }
  
  int _getState(List<List<int>> transitions) {
    var count = transitions.length;
    var state = 0;
    for ( ; state < count; state++) {
      var found = false;
      var ranges = transitions[state];    
      while (true) {
        var right = ranges.length ~/ 2;
        if (right == 0) {
          break;
        }
        var left = 0;
        if (right == 1) {
          if (_ch <= ranges[1] && _ch >= ranges[0]) {
            found = true;          
          }
          break;
        }
        int middle;
        while (left < right) {
          middle = (left + right) >> 1;
          var index = middle << 1;
          if (ranges[index + 1] < _ch) {
            left = middle + 1;
          } else {
            if (_ch >= ranges[index]) {
              found = true;
              break;
            }
            right = middle;
          }
        }
        break;
      }
      if (found) {
        return state; 
      }   
    }
    if (_ch != -1) {
      return state;
    }
    return state + 1;  
  }
  
  List _list(Object first, List next) {
    var length = next.length;
    var list = new List(length + 1);
    list[0] = first;
    for (var i = 0; i < length; i++) {
      list[i + 1] = next[i][1];
    }
    return list;
  }
  
  String _matchAny() {
    success = _cursor < _inputLen;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }    
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return result;
    }    
    return null;  
  }
  
  String _matchChar(int ch, String string) {
    success = _ch == ch;
    if (success) {
      var result = string;  
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return result;
    }  
    return null;  
  }
  
  String _matchMapping(int start, int end, List<bool> mapping) {
    success = _ch >= start && _ch <= end;
    if (success) {    
      if(mapping[_ch - start]) {
        String result;
        if (_ch < 128) {
          result = _ascii[_ch];  
        } else {
          result = new String.fromCharCode(_ch);
        }     
        if (++_cursor < _inputLen) {
          _ch = _input[_cursor];
        } else {
          _ch = -1;
        }      
        return result;
      }
      success = false;
    }  
    return null;  
  }
  
  String _matchRange(int start, int end) {
    success = _ch >= start && _ch <= end;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }        
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }  
      return result;
    }  
    return null;  
  }
  
  String _matchRanges(List<int> ranges) {
    var length = ranges.length;
    for (var i = 0; i < length; i += 2) {    
      if (_ch >= ranges[i]) {
        if (_ch <= ranges[i + 1]) {
          String result;
          if (_ch < 128) {
            result = _ascii[_ch];  
          } else {
            result = new String.fromCharCode(_ch);
          }          
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
             _ch = -1;
          }
          success = true;    
          return result;
        }      
      } else break;  
    }
    success = false;  
    return null;  
  }
  
  String _matchString(List<int> codePoints, String string) {
    var length = codePoints.length;  
    success = _cursor + length <= _inputLen;
    if (success) {
      for (var i = 0; i < length; i++) {
        if (codePoints[i] != _input[_cursor + i]) {
          success = false;
          break;
        }
      }
    } else {
      success = false;
    }  
    if (success) {
      _cursor += length;      
      if (_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return string;      
    }  
    return null; 
  }
  
  void _nextChar() {
    if (++_cursor < _inputLen) {
      _ch = _input[_cursor];
    } else {
      _ch = -1;
    }  
  }
  
  dynamic _parse_ASTERISK() {
    var $$;
    switch (_ch == 42 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = '*';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect27);
    }
    return $$;
  }
  
  dynamic _parse_ArrayParameter() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_Type();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_IDENTIFIER();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_DIMENSIONS();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            $$ = new ParameterDeclaration(name: $2, type: _createArray($1, $3));
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_ArrayType() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_TypeName();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_DIMENSIONS();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = _createArray($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_ArrayVariableDeclaration() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_Type();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          $$ = _parse_IDENTIFIER();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_DIMENSIONS();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            $$ = new VariableDeclaration(name: $2, type: _createArray($1, $3));
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_CLOSE_BRACE() {
    var $$;
    switch (_ch == 125 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = '}';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect39);
    }
    return $$;
  }
  
  dynamic _parse_CLOSE_BRACKET() {
    var $$;
    switch (_ch == 93 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = ']';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect29);
    }
    return $$;
  }
  
  dynamic _parse_CLOSE_PAREN() {
    var $$;
    switch (_ch == 41 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = ')';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect34);
    }
    return $$;
  }
  
  dynamic _parse_COMMA() {
    var $$;
    switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = ',';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect31);
    }
    return $$;
  }
  
  dynamic _parse_COMMENT() {
    var $$;
    switch (_ch == 47 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings1, '//');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
              case 2:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  var ch2 = _ch, pos2 = _cursor, testing1 = _testing; 
                  _testing = _inputLen + 1;
                  $$ = _parse_EOL();
                  _ch = ch2;
                  _cursor = pos2; 
                  _testing = testing1;
                  $$ = null;
                  success = !success;
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _matchAny();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect5);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          var testing2 = _testing;
          _testing = _cursor;
          $$ = _parse_EOL();
          success = true; 
          _testing = testing2;
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect4);
    }
    return $$;
  }
  
  dynamic _parse_CONST() {
    var $$;
    switch (_ch == 99 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings14, 'const');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect32);
    }
    return $$;
  }
  
  dynamic _parse_ConstPointerParameter() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_CONST();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          $$ = _parse_PointerType();
          if (!success) break;
          seq[1] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_IDENTIFIER();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            $$ = new ParameterDeclaration(name: $3, type: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_DIMENSION() {
    var $$;
    switch (_ch == 91 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_OPEN_BRACKET();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_INTEGER();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_CLOSE_BRACKET();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            $$ = $2;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect28);
    }
    return $$;
  }
  
  dynamic _parse_DIMENSIONS() {
    var $$;
    switch (_ch == 91 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var startPos0 = _startPos;
        var testing0;
        for (var first = true, reps; ;) {  
          $$ = _parse_DIMENSION();  
          if (success) {
           if (first) {      
              first = false;
              reps = [$$];
              testing0 = _testing;                  
            } else {
              reps.add($$);
            }
            _testing = _cursor;   
          } else {
            success = !first;
            if (success) {      
              _testing = testing0;
              $$ = reps;      
            } else $$ = null;
            break;
          }  
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect28);
    }
    return $$;
  }
  
  dynamic _parse_Declaration() {
    var $$;
    switch (_getState(_transitions3)) {
      case 0:
      case 3:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_FunctionDeclartion();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing0;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing0 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing0;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_VariableDeclaration();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing1;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing1 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing1;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        while (true) {
          var ch2 = _ch, pos2 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_FunctionDeclartion();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing2;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing2 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing2;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos2;
          if (success) break;
          var ch3 = _ch, pos3 = _cursor, startPos3 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_TypedefDeclaration();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing3;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing3 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing3;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch3;
            _cursor = pos3;
          }
          _startPos = startPos3;
          if (success) break;
          var ch4 = _ch, pos4 = _cursor, startPos4 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_VariableDeclaration();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing4;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing4 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing4;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch4;
            _cursor = pos4;
          }
          _startPos = startPos4;
          if (success) break;
          var ch5 = _ch, pos5 = _cursor, startPos5 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_StructDeclaration();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing5;
            for (var first = true, reps; ;) {  
              $$ = _parse_SEMICOLON();  
              if (success) {
               if (first) {      
                  first = false;
                  reps = [$$];
                  testing5 = _testing;                  
                } else {
                  reps.add($$);
                }
                _testing = _cursor;   
              } else {
                success = !first;
                if (success) {      
                  _testing = testing5;
                  $$ = reps;      
                } else $$ = null;
                break;
              }  
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch5;
            _cursor = pos5;
          }
          _startPos = startPos5;
          break;
        }
        break;
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect6);
    }
    return $$;
  }
  
  dynamic _parse_DeclarationList() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var startPos0 = _startPos;
        var testing0 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          $$ = _parse_Declaration();
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing0;
            $$ = reps;
            break; 
          }
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = true;
        break;
      case 2:
        while (true) {
          var startPos1 = _startPos;
          var testing1 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            $$ = _parse_Declaration();
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing1;
              $$ = reps;
              break; 
            }
          }
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          var testing2 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            $$ = _parse_Declaration();
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing2;
              $$ = reps;
              break; 
            }
          }
          _startPos = startPos2;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect1);
    }
    return $$;
  }
  
  dynamic _parse_ELLIPSIS() {
    var $$;
    switch (_ch == 46 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings15, '...');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect33);
    }
    return $$;
  }
  
  dynamic _parse_EOF() {
    var $$;
    _beginToken(2);  
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        var ch0 = _ch, pos0 = _cursor, testing0 = _testing; 
        _testing = _inputLen + 1;
        $$ = _matchAny();
        _ch = ch0;
        _cursor = pos0; 
        _testing = testing0;
        $$ = null;
        success = !success;
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect0);
    }
    _endToken();
    return $$;
  }
  
  dynamic _parse_EOL() {
    var $$;
    switch (_getState(_transitions2)) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchMapping(10, 13, _mapping1);
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        while (true) {
          var startPos1 = _startPos;
          $$ = _matchString(_strings0, '\r\n');
          _startPos = startPos1;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _matchMapping(10, 13, _mapping1);
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _parse_SPACING();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              $$ = $1;
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos2;
          break;
        }
        break;
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect3);
    }
    return $$;
  }
  
  dynamic _parse_FunctionDeclartion() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_IDENTIFIER();
            if (!success) break;
            var seq = new List(4)..[0] = $$;
            $$ = _parse_OPEN_PAREN();
            if (!success) break;
            seq[1] = $$;
            var testing0 = _testing;
            _testing = _cursor;
            $$ = _parse_FunctionParameters();
            success = true; 
            _testing = testing0;
            if (!success) break;
            seq[2] = $$;
            $$ = _parse_CLOSE_PAREN();
            if (!success) break;
            seq[3] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              $$ = new FunctionDeclaration(name: $1, parameters: $3);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_Type();
            if (!success) break;
            var seq = new List(5)..[0] = $$;
            $$ = _parse_IDENTIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = _parse_OPEN_PAREN();
            if (!success) break;
            seq[2] = $$;
            var testing1 = _testing;
            _testing = _cursor;
            $$ = _parse_FunctionParameters();
            success = true; 
            _testing = testing1;
            if (!success) break;
            seq[3] = $$;
            $$ = _parse_CLOSE_PAREN();
            if (!success) break;
            seq[4] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              final $4 = seq[3];
              final $5 = seq[4];
              $$ = new FunctionDeclaration(name: $2, parameters: $4, returnType: $1);
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_FunctionParameter() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        while (true) {
          var startPos0 = _startPos;
          $$ = _parse_ArrayParameter();
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          $$ = _parse_ConstPointerParameter();
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          $$ = _parse_PointerParameter();
          _startPos = startPos2;
          if (success) break;
          var startPos3 = _startPos;
          $$ = _parse_SimpleParameter();
          _startPos = startPos3;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_FunctionParameterList() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_FunctionParameter();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
              case 0:
                var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                _startPos = _cursor;
                while (true) {  
                  $$ = _parse_COMMA();
                  if (!success) break;
                  var seq = new List(2)..[0] = $$;
                  $$ = _parse_FunctionParameter();
                  if (!success) break;
                  seq[1] = $$;
                  $$ = seq;
                  break;
                }
                if (!success) {
                  _ch = ch1;
                  _cursor = pos1;
                }
                _startPos = startPos1;
                break;
              case 1:
              case 2:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect31);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing0;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = _list($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_FunctionParameters() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_FunctionParameterList();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          switch (_ch == 44 ? 0 : _ch == -1 ? 2 : 1) {
            case 0:
              var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
              _startPos = _cursor;
              while (true) {  
                $$ = _parse_COMMA();
                if (!success) break;
                var seq = new List(2)..[0] = $$;
                $$ = _parse_VaListParameter();
                if (!success) break;
                seq[1] = $$;
                $$ = seq;
                if (success) {    
                  final $1 = seq[0];
                  final $2 = seq[1];
                  $$ = $2;
                }
                break;
              }
              if (!success) {
                _ch = ch1;
                _cursor = pos1;
              }
              _startPos = startPos1;
              break;
            case 1:
            case 2:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(_expect31);
          }
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = _createParameters($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_IDENTIFIER() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_ReservedWord();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          var seq = new List(4)..[0] = $$;
          $$ = _parse_IDENT_START();
          if (!success) break;
          seq[1] = $$;
          var testing1 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            $$ = _parse_IDENT_CONT();
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing1;
              $$ = reps;
              break; 
            }
          }
          if (!success) break;
          seq[2] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[3] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            $$ = _flatten([$2, $3]).join();
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect24);
    }
    return $$;
  }
  
  dynamic _parse_IDENT_CONT() {
    var $$;
    _beginToken(3);  
    switch (_getState(_transitions9)) {
      case 0:
        var startPos0 = _startPos;
        $$ = _matchRange(48, 57);
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        $$ = _parse_IDENT_START();
        _startPos = startPos1;
        break;
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect40);
    }
    _endToken();
    return $$;
  }
  
  dynamic _parse_IDENT_PART() {
    var $$;
    _beginToken(1);  
    switch (_getState(_transitions9)) {
      case 0:
        var startPos0 = _startPos;
        $$ = _parse_IDENT_CONT();
        _startPos = startPos0;
        break;
      case 1:
        while (true) {
          var startPos1 = _startPos;
          $$ = _parse_IDENT_START();
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          $$ = _parse_IDENT_CONT();
          _startPos = startPos2;
          break;
        }
        break;
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect15);
    }
    _endToken();
    return $$;
  }
  
  dynamic _parse_IDENT_START() {
    var $$;
    _beginToken(4);  
    switch (_getState(_transitions4)) {
      case 0:
        var startPos0 = _startPos;
        $$ = _matchMapping(65, 122, _mapping2);
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect24);
    }
    _endToken();
    return $$;
  }
  
  dynamic _parse_ID_CHAR() {
    var $$;
    switch (_ch == 99 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings2, 'char');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENT_PART();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect18);
    }
    return $$;
  }
  
  dynamic _parse_ID_DOUBLE() {
    var $$;
    switch (_ch == 100 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings3, 'double');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENT_PART();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect22);
    }
    return $$;
  }
  
  dynamic _parse_ID_FLOAT() {
    var $$;
    switch (_ch == 102 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings4, 'float');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENT_PART();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect21);
    }
    return $$;
  }
  
  dynamic _parse_ID_INT() {
    var $$;
    switch (_ch == 105 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings5, 'int');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENT_PART();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect19);
    }
    return $$;
  }
  
  dynamic _parse_ID_LONG() {
    var $$;
    switch (_ch == 108 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings6, 'long');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENT_PART();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect10);
    }
    return $$;
  }
  
  dynamic _parse_ID_SHORT() {
    var $$;
    switch (_ch == 115 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings8, 'short');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENT_PART();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect20);
    }
    return $$;
  }
  
  dynamic _parse_ID_SIGNED() {
    var $$;
    switch (_ch == 115 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings7, 'signed');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENT_PART();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect16);
    }
    return $$;
  }
  
  dynamic _parse_ID_STRUCT() {
    var $$;
    switch (_ch == 115 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings9, 'struct');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENT_PART();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect23);
    }
    return $$;
  }
  
  dynamic _parse_ID_UNION() {
    var $$;
    switch (_ch == 117 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings12, 'union');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENT_PART();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect25);
    }
    return $$;
  }
  
  dynamic _parse_ID_UNSIGNED() {
    var $$;
    switch (_ch == 117 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings11, 'unsigned');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENT_PART();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect17);
    }
    return $$;
  }
  
  dynamic _parse_ID_VOID() {
    var $$;
    switch (_ch == 118 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings13, 'void');
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          $$ = _parse_IDENT_PART();
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect26);
    }
    return $$;
  }
  
  dynamic _parse_INTEGER() {
    var $$;
    switch (_ch >= 48 && _ch <= 57 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0;
          for (var first = true, reps; ;) {  
            $$ = _matchRange(48, 57);  
            if (success) {
             if (first) {      
                first = false;
                reps = [$$];
                testing0 = _testing;                  
              } else {
                reps.add($$);
              }
              _testing = _cursor;   
            } else {
              success = !first;
              if (success) {      
                _testing = testing0;
                $$ = reps;      
              } else $$ = null;
              break;
            }  
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = int.parse($1.join());
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect5);
    }
    return $$;
  }
  
  dynamic _parse_LongType() {
    var $$;
    switch (_ch == 108 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_ID_LONG();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _parse_ID_LONG();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              $$ = _createInt([$1, $2]);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          $$ = _parse_ID_LONG();
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect10);
    }
    return $$;
  }
  
  dynamic _parse_OPEN_BRACE() {
    var $$;
    switch (_ch == 123 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = '{';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect38);
    }
    return $$;
  }
  
  dynamic _parse_OPEN_BRACKET() {
    var $$;
    switch (_ch == 91 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = '[';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect28);
    }
    return $$;
  }
  
  dynamic _parse_OPEN_PAREN() {
    var $$;
    switch (_ch == 40 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = '(';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect30);
    }
    return $$;
  }
  
  dynamic _parse_PointerParameter() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_PointerType();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_IDENTIFIER();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = new ParameterDeclaration(name: $2, type: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_PointerType() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_TypeName();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0;
          for (var first = true, reps; ;) {  
            $$ = _parse_ASTERISK();  
            if (success) {
             if (first) {      
                first = false;
                reps = [$$];
                testing0 = _testing;                  
              } else {
                reps.add($$);
              }
              _testing = _cursor;   
            } else {
              success = !first;
              if (success) {      
                _testing = testing0;
                $$ = reps;      
              } else $$ = null;
              break;
            }  
          }
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = _createPointer($1, $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_PointerVariableDeclaration() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_PointerType();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_IDENTIFIER();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = new VariableDeclaration(name: $2, type: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_ReservedWord() {
    var $$;
    _beginToken(0);  
    switch (_getState(_transitions7)) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          switch (_getState(_transitions8)) {
            case 0:
              var startPos1 = _startPos;
              $$ = _matchString(_strings2, 'char');
              _startPos = startPos1;
              break;
            case 1:
              var startPos2 = _startPos;
              $$ = _matchString(_strings3, 'double');
              _startPos = startPos2;
              break;
            case 2:
              var startPos3 = _startPos;
              $$ = _matchString(_strings4, 'float');
              _startPos = startPos3;
              break;
            case 3:
              var startPos4 = _startPos;
              $$ = _matchString(_strings5, 'int');
              _startPos = startPos4;
              break;
            case 4:
              var startPos5 = _startPos;
              $$ = _matchString(_strings6, 'long');
              _startPos = startPos5;
              break;
            case 5:
              while (true) {
                var startPos6 = _startPos;
                $$ = _matchString(_strings7, 'signed');
                _startPos = startPos6;
                if (success) break;
                var startPos7 = _startPos;
                $$ = _matchString(_strings8, 'short');
                _startPos = startPos7;
                if (success) break;
                var startPos8 = _startPos;
                $$ = _matchString(_strings9, 'struct');
                _startPos = startPos8;
                break;
              }
              break;
            case 6:
              var startPos9 = _startPos;
              $$ = _matchString(_strings10, 'typedef');
              _startPos = startPos9;
              break;
            case 7:
              while (true) {
                var startPos10 = _startPos;
                $$ = _matchString(_strings11, 'unsigned');
                _startPos = startPos10;
                if (success) break;
                var startPos11 = _startPos;
                $$ = _matchString(_strings12, 'union');
                _startPos = startPos11;
                break;
              }
              break;
            case 8:
              var startPos12 = _startPos;
              $$ = _matchString(_strings13, 'void');
              _startPos = startPos12;
              break;
            case 9:
            case 10:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(_expect12);
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
          _testing = _inputLen + 1;
          switch (_getState(_transitions9)) {
            case 0:
              var startPos13 = _startPos;
              $$ = _parse_IDENT_CONT();
              _startPos = startPos13;
              break;
            case 1:
              while (true) {
                var startPos14 = _startPos;
                $$ = _parse_IDENT_START();
                _startPos = startPos14;
                if (success) break;
                var startPos15 = _startPos;
                $$ = _parse_IDENT_CONT();
                _startPos = startPos15;
                break;
              }
              break;
            case 2:
            case 3:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(_expect13);
          }
          _ch = ch1;
          _cursor = pos1; 
          _testing = testing0;
          $$ = null;
          success = !success;
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect11);
    }
    _endToken();
    return $$;
  }
  
  dynamic _parse_SEMICOLON() {
    var $$;
    switch (_ch == 59 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = ';';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect35);
    }
    return $$;
  }
  
  dynamic _parse_SPACE() {
    var $$;
    switch (_getState(_transitions1)) {
      case 0:
        var startPos0 = _startPos;
        $$ = _matchMapping(9, 32, _mapping0);
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        $$ = _parse_EOL();
        _startPos = startPos1;
        break;
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect3);
    }
    return $$;
  }
  
  dynamic _parse_SPACING() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        var testing0 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          switch (_getState(_transitions0)) {
            case 0:
              var startPos1 = _startPos;
              $$ = _parse_SPACE();
              _startPos = startPos1;
              break;
            case 1:
              var startPos2 = _startPos;
              $$ = _parse_COMMENT();
              _startPos = startPos2;
              break;
            case 2:
            case 3:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(_expect2);
          }
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing0;
            $$ = reps;
            break; 
          }
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = true;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect1);
    }
    return $$;
  }
  
  dynamic _parse_SimpleParameter() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_Type();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_IDENTIFIER();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = new ParameterDeclaration(name: $2, type: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_SimpleVariableDeclaration() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_Type();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_IDENTIFIER();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = new VariableDeclaration(name: $2, type: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_StructDeclaration() {
    var $$;
    switch (_getState(_transitions11)) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          switch (_getState(_transitions10)) {
            case 0:
              var startPos1 = _startPos;
              $$ = _parse_ID_STRUCT();
              _startPos = startPos1;
              break;
            case 1:
              var startPos2 = _startPos;
              $$ = _parse_ID_UNION();
              _startPos = startPos2;
              break;
            case 2:
            case 3:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(_expect37);
          }
          if (!success) break;
          var seq = new List(5)..[0] = $$;
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_IDENTIFIER();
          success = true; 
          _testing = testing0;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_OPEN_BRACE();
          if (!success) break;
          seq[2] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_StructMemberList();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[3] = $$;
          $$ = _parse_CLOSE_BRACE();
          if (!success) break;
          seq[4] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $4 = seq[3];
            final $5 = seq[4];
            $$ = new StructureDeclaration(kind: $1, members: $4, tag: $2);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect37);
    }
    return $$;
  }
  
  dynamic _parse_StructMember() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_VariableDeclaration();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SEMICOLON();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_StructMemberList() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var startPos0 = _startPos;
        var testing0 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          switch (_getState(_transitions4)) {
            case 0:
            case 2:
              var startPos1 = _startPos;
              $$ = _parse_StructMember();
              _startPos = startPos1;
              break;
            case 1:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(_expect7);
          }
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing0;
            $$ = reps;
            break; 
          }
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = true;
        break;
      case 2:
        while (true) {
          var startPos2 = _startPos;
          var testing1 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_getState(_transitions4)) {
              case 0:
              case 2:
                var startPos3 = _startPos;
                $$ = _parse_StructMember();
                _startPos = startPos3;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect7);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing1;
              $$ = reps;
              break; 
            }
          }
          _startPos = startPos2;
          if (success) break;
          var startPos4 = _startPos;
          var testing2 = _testing; 
          for (var reps = []; ; ) {
            _testing = _cursor;
            switch (_getState(_transitions4)) {
              case 0:
              case 2:
                var startPos5 = _startPos;
                $$ = _parse_StructMember();
                _startPos = startPos5;
                break;
              case 1:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect7);
            }
            if (success) {  
              reps.add($$);
            } else {
              success = true;
              _testing = testing2;
              $$ = reps;
              break; 
            }
          }
          _startPos = startPos4;
          break;
        }
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect1);
    }
    return $$;
  }
  
  dynamic _parse_StructVariableDeclaration() {
    var $$;
    switch (_getState(_transitions11)) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_StructDeclaration();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_IDENTIFIER();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = new VariableDeclaration(name: $2, type: $1.type);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect37);
    }
    return $$;
  }
  
  dynamic _parse_TYPEDEF() {
    var $$;
    switch (_ch == 116 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _matchString(_strings10, 'typedef');
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_SPACING();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect36);
    }
    return $$;
  }
  
  dynamic _parse_Type() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        while (true) {
          var startPos0 = _startPos;
          $$ = _parse_PointerType();
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          $$ = _parse_ArrayType();
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          $$ = _parse_TypeName();
          _startPos = startPos2;
          break;
        }
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_TypeName() {
    var $$;
    switch (_getState(_transitions3)) {
      case 0:
      case 3:
        var startPos0 = _startPos;
        $$ = _parse_IDENTIFIER();
        if (success) {    
          final $1 = $$;
          $$ = new TypedefTypeSpecification(name: $1);
        }
        _startPos = startPos0;
        break;
      case 1:
        while (true) {
          var startPos1 = _startPos;
          $$ = _parse_IDENTIFIER();
          if (success) {    
            final $1 = $$;
            $$ = new TypedefTypeSpecification(name: $1);
          }
          _startPos = startPos1;
          if (success) break;
          var ch0 = _ch, pos0 = _cursor, startPos2 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing0 = _testing;
            _testing = _cursor;
            $$ = _parse_TypeSign();
            success = true; 
            _testing = testing0;
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            switch (_getState(_transitions5)) {
              case 0:
                var startPos3 = _startPos;
                $$ = _parse_ID_CHAR();
                _startPos = startPos3;
                break;
              case 1:
                var startPos4 = _startPos;
                $$ = _parse_ID_INT();
                _startPos = startPos4;
                break;
              case 2:
              case 3:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect8);
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              $$ = new IntegerTypeSpecification(name: _createInt([$1, $2]));
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos2;
          if (success) break;
          var ch1 = _ch, pos1 = _cursor, startPos5 = _startPos;
          _startPos = _cursor;
          while (true) {  
            var testing1 = _testing;
            _testing = _cursor;
            $$ = _parse_TypeSign();
            success = true; 
            _testing = testing1;
            if (!success) break;
            var seq = new List(3)..[0] = $$;
            switch (_getState(_transitions6)) {
              case 0:
                var startPos6 = _startPos;
                $$ = _parse_LongType();
                _startPos = startPos6;
                break;
              case 1:
                var startPos7 = _startPos;
                $$ = _parse_ID_SHORT();
                _startPos = startPos7;
                break;
              case 2:
              case 3:
                $$ = null;
                success = false;
                break;
            }
            if (!success && _cursor > _testing) {
              _failure(_expect9);
            }
            if (!success) break;
            seq[1] = $$;
            var testing2 = _testing;
            _testing = _cursor;
            $$ = _parse_ID_INT();
            success = true; 
            _testing = testing2;
            if (!success) break;
            seq[2] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $3 = seq[2];
              $$ = new IntegerTypeSpecification(name: _createInt([$1, $2, $3]));
            }
            break;
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          _startPos = startPos5;
          if (success) break;
          var startPos8 = _startPos;
          $$ = _parse_ID_FLOAT();
          if (success) {    
            final $1 = $$;
            $$ = new FloatTypeSpecification(kind: "float");
          }
          _startPos = startPos8;
          if (success) break;
          var startPos9 = _startPos;
          $$ = _parse_ID_DOUBLE();
          if (success) {    
            final $1 = $$;
            $$ = new FloatTypeSpecification(kind: "double");
          }
          _startPos = startPos9;
          if (success) break;
          var ch2 = _ch, pos2 = _cursor, startPos10 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_ID_STRUCT();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _parse_IDENTIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              $$ = new StructureTypeSpecification(kind: "struct", tag: $2);
            }
            break;
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          _startPos = startPos10;
          if (success) break;
          var ch3 = _ch, pos3 = _cursor, startPos11 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_ID_UNION();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            $$ = _parse_IDENTIFIER();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              $$ = new StructureTypeSpecification(kind: "union", tag: $2);
            }
            break;
          }
          if (!success) {
            _ch = ch3;
            _cursor = pos3;
          }
          _startPos = startPos11;
          if (success) break;
          var startPos12 = _startPos;
          $$ = _parse_ID_VOID();
          if (success) {    
            final $1 = $$;
            $$ = new VoidTypeSpecification();
          }
          _startPos = startPos12;
          break;
        }
        break;
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_TypeSign() {
    var $$;
    switch (_getState(_transitions10)) {
      case 0:
        var startPos0 = _startPos;
        $$ = _parse_ID_SIGNED();
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        $$ = _parse_ID_UNSIGNED();
        _startPos = startPos1;
        break;
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect14);
    }
    return $$;
  }
  
  dynamic _parse_TypedefArrayTypeDeclaration() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_Type();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          $$ = _parse_IDENTIFIER();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_DIMENSIONS();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            $$ = new TypedefDeclaration(name: $2,type: _createArray($1, $3));
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_TypedefDeclaration() {
    var $$;
    switch (_ch == 116 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_TYPEDEF();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_TypedefTypeDeclaration();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = $2;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect36);
    }
    return $$;
  }
  
  dynamic _parse_TypedefSimpleTypeDeclaration() {
    var $$;
    switch (_getState(_transitions4)) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_Type();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_IDENTIFIER();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = new TypedefDeclaration(name: $2, type: $1);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_TypedefStructTypeDeclaration() {
    var $$;
    switch (_getState(_transitions11)) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_StructDeclaration();
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_IDENTIFIER();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            $$ = new TypedefDeclaration(name: $2, type: $1.type);
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect37);
    }
    return $$;
  }
  
  dynamic _parse_TypedefTypeDeclaration() {
    var $$;
    switch (_getState(_transitions3)) {
      case 0:
      case 3:
        while (true) {
          var startPos0 = _startPos;
          $$ = _parse_TypedefArrayTypeDeclaration();
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          $$ = _parse_TypedefSimpleTypeDeclaration();
          _startPos = startPos1;
          break;
        }
        break;
      case 1:
        while (true) {
          var startPos2 = _startPos;
          $$ = _parse_TypedefArrayTypeDeclaration();
          _startPos = startPos2;
          if (success) break;
          var startPos3 = _startPos;
          $$ = _parse_TypedefStructTypeDeclaration();
          _startPos = startPos3;
          if (success) break;
          var startPos4 = _startPos;
          $$ = _parse_TypedefSimpleTypeDeclaration();
          _startPos = startPos4;
          break;
        }
        break;
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_VaListParameter() {
    var $$;
    switch (_ch == 46 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var startPos0 = _startPos;
        $$ = _parse_ELLIPSIS();
        if (success) {    
          final $1 = $$;
          $$ = new ParameterDeclaration(type: new VaListTypeSpecification());
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect33);
    }
    return $$;
  }
  
  dynamic _parse_VariableDeclaration() {
    var $$;
    switch (_getState(_transitions3)) {
      case 0:
      case 3:
        while (true) {
          var startPos0 = _startPos;
          $$ = _parse_ArrayVariableDeclaration();
          _startPos = startPos0;
          if (success) break;
          var startPos1 = _startPos;
          $$ = _parse_PointerVariableDeclaration();
          _startPos = startPos1;
          if (success) break;
          var startPos2 = _startPos;
          $$ = _parse_SimpleVariableDeclaration();
          _startPos = startPos2;
          break;
        }
        break;
      case 1:
        while (true) {
          var startPos3 = _startPos;
          $$ = _parse_ArrayVariableDeclaration();
          _startPos = startPos3;
          if (success) break;
          var startPos4 = _startPos;
          $$ = _parse_StructVariableDeclaration();
          _startPos = startPos4;
          if (success) break;
          var startPos5 = _startPos;
          $$ = _parse_PointerVariableDeclaration();
          _startPos = startPos5;
          if (success) break;
          var startPos6 = _startPos;
          $$ = _parse_SimpleVariableDeclaration();
          _startPos = startPos6;
          break;
        }
        break;
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    return $$;
  }
  
  String _text() {
    return new String.fromCharCodes(_input.sublist(_startPos, _cursor));
  }
  
  int _toCodePoint(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      throw new StateError("An empty string contains no elements.");
    }
  
    var start = string.codeUnitAt(0);
    if (length == 1) {
      return start;
    }
  
    if ((start & 0xFC00) == 0xD800) {
      var end = string.codeUnitAt(1);
      if ((end & 0xFC00) == 0xDC00) {
        return (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
      }
    }
  
    return start;
  }
  
  List<int> _toCodePoints(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      return const <int>[];
    }
  
    var codePoints = <int>[];
    codePoints.length = length;
    var i = 0;
    var pos = 0;
    for ( ; i < length; pos++) {
      var start = string.codeUnitAt(i);
      i++;
      if ((start & 0xFC00) == 0xD800 && i < length) {
        var end = string.codeUnitAt(i);
        if ((end & 0xFC00) == 0xDC00) {
          codePoints[pos] = (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
          i++;
        } else {
          codePoints[pos] = start;
        }
      } else {
        codePoints[pos] = start;
      }
    }
  
    codePoints.length = pos;
    return codePoints;
  }
  
  static List<bool> _unmap(List<int> mapping) {
    var length = mapping.length;
    var result = new List<bool>(length * 31);
    var offset = 0;
    for (var i = 0; i < length; i++) {
      var v = mapping[i];
      for (var j = 0; j < 31; j++) {
        result[offset++] = v & (1 << j) == 0 ? false : true;
      }
    }
    return result;
  }
  
  List<CParserError> errors() {
    if (success) {
      return <CParserError>[];
    }
  
    String escape(int c) {
      switch (c) {
        case 10:
          return r"\n";
        case 13:
          return r"\r";
        case 09:
          return r"\t";
        case -1:
          return "";
      }
      return new String.fromCharCode(c);
    } 
    
    String getc(int position) {  
      if (position < _inputLen) {
        return "'${escape(_input[position])}'";      
      }       
      return "end of file";
    }
  
    var errors = <CParserError>[];
    if (_failurePos >= _cursor) {
      var set = new Set<CParserError>();
      set.addAll(_errors);
      for (var error in set) {
        if (error.position >= _failurePos) {
          errors.add(error);
        }
      }
      var names = new Set<String>();  
      names.addAll(_expected);
      if (names.contains(null)) {
        var string = getc(_failurePos);
        var message = "Unexpected $string";
        var error = new CParserError(CParserError.UNEXPECTED, _failurePos, _failurePos, message);
        errors.add(error);
      } else {      
        var found = getc(_failurePos);      
        var list = names.toList();
        list.sort();
        var message = "Expected ${list.join(", ")} but found $found";
        var error = new CParserError(CParserError.EXPECTED, _failurePos, _failurePos, message);
        errors.add(error);
      }        
    }
    errors.sort((a, b) => a.position.compareTo(b.position));
    return errors;  
  }
  
  dynamic parse_Declarations() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_SPACING();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          var testing1 = _testing;
          _testing = _cursor;
          $$ = _parse_DeclarationList();
          success = true; 
          _testing = testing1;
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_EOF();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            $$ = $2;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect0);
    }
    return $$;
  }
  
  void reset(int pos) {
    if (pos == null) {
      throw new ArgumentError('pos: $pos');
    }
    if (pos < 0 || pos > _inputLen) {
      throw new RangeError('pos');
    }      
    _cursor = pos;
    _cache = new List(_inputLen + 1);
    _cachePos = -1;
    _cacheRule = new List(_inputLen + 1);
    _cacheState = new List.filled(((_inputLen + 1) >> 5) + 1, 0);
    _ch = -1;
    _errors = <CParserError>[];   
    _expected = <String>[];
    _failurePos = -1;
    _startPos = pos;        
    _testing = -1;
    _token = null;
    _tokenLevel = 0;
    _tokenStart = null;
    if (_cursor < _inputLen) {
      _ch = _input[_cursor];
    }
    success = true;    
  }
  
}

class CParserError {
  static const int EXPECTED = 1;    
      
  static const int MALFORMED = 2;    
      
  static const int MISSING = 3;    
      
  static const int UNEXPECTED = 4;    
      
  static const int UNTERMINATED = 5;    
      
  final int hashCode = 0;
  
  final String message;
  
  final int position;
  
  final int start;
  
  final int type;
  
  CParserError(this.type, this.position, this.start, this.message);
  
  bool operator ==(other) {
    if (identical(this, other)) return true;
    if (other is CParserError) {
      return type == other.type && position == other.position &&
      start == other.start && message == other.message;  
    }
    return false;
  }
  
}

