%{
library binary_declarations.internal.c_parser;

import "dart:math";
import "package:binary_declarations/binary_declarations.dart";

Expression _binary(left, _Node node) {
  if (node == null) {
    return left;
  }
  var right = _binary(node.operand, node.next);
  return new BinaryExpression(left: left, operator: node.operator, right: right);  
 }
 
 String _chars2str(List<int> chars) {
   if (chars == null) {
     return "";
   }
   return new String.fromCharCodes(chars);
 }

Expression _conditional(Expression condition, Expression left, Expression right) {  
  return new ConditionalExpression(condition: condition, left: left, right: right);
}

FloatingPointLiteral _floatLiteral(String source) {
  var value = _parserFloat(source);
  return new FloatingPointLiteral(text: source, value: value);
}

Identifier _ident(List parts) {
  var list = [];
  for (var part in parts) {
    if (part != null) {
      list.add(part);
    }
  }

  return new Identifier(name: list.join(" "));
}

int _escape(String ch) {
  switch(ch) {
    case "a":
      return 0x07;
    case "b":
      return 0x08;
    case "f":
      return 0x0c;
    case "n":
      return 0x0a;
    case "r":
      return 0x0d;
    case "t":
      return 0x09;
    case "v":
      return 0x0b;
    case "\'":
      return 0x27;
    case "\"":
      return 0x22;
    case "\?":
      return 0x3f;
    default:
      throw new StateError("Unknown escape sequence: \\$ch");  
  }
}

double _parserFloat(String source) {
  source = source.toLowerCase();
  var hex = false;
  if (source.startsWith("0x")) {
    source = source.substring(2);
    hex = true;
  }
  var length = source.length;
  var endsWith = source[length - 1];
  if (endsWith == "f" || endsWith == "l") {
    source = source.substring(0, length - 1);
  }
  if (!hex) {
    return double.parse(source);
  }
  var index = source.indexOf("p");
  var exponent = int.parse(source.substring(index + 1));
  source = source.substring(0, index);
  index = source.indexOf(".");
  int integer = 0;
  int fractional = 0;
  if (index == 0) {
    fractional = int.parse(source.substring(1), radix: 16);
  } else if (index > 0) {
    integer = int.parse(source.substring(0, index), radix: 16);
    fractional = int.parse(source.substring(index + 1), radix: 16);
  } else {
    integer = int.parse(source, radix: 16);
  }
  var d = double.parse(".$fractional") * .625;
  return (integer + d) * pow(2, exponent);
}

int _parseInt(String sign, String digits, int radix) {
  if (sign == null) {
    sign = "";
  }
  return int.parse("$sign$digits", radix: radix);   
}

List _removeNull(List list) {  
  var result = list.toList();
  result.retainWhere((e) => e != null);
  return result;
}

String _strValue(List<List<int>> list) {
  var chars = <int>[];
  for (var element in list) {
    chars.addAll(element);
  }
  return new String.fromCharCodes(chars);
}

Expression _unary(String operator, Expression operand) {  
  return new UnaryExpression(operand: operand, operator: operator);
}

class _Node {
  final _Node next;

  final dynamic operand;
 
  final String operator;    
  
  _Node(this.operator, this.operand, this.next);
  
  String toString() {
    var sb = new StringBuffer();
    sb.write(operator);
    sb.write(" ");
    sb.write(operand);
    if (next != null) {
      sb.write(" ");
      sb.write(next);    
    }
    return sb.toString();
  }
}

}%

### Sentences (nonterminals) ###

Declarations <-
  LEADING_SPACES? DeclarationList? EOF { $$ = $2; }

DeclarationList <-
  Declaration*

Declaration <-
  FunctionDeclaration SEMICOLON+ { $$ = $1; }
  / StructureDeclaration SEMICOLON+ { $$ = $1; }
  / EnumDeclaration SEMICOLON+ { $$ = $1; }
  / TypedefDeclaration SEMICOLON+ { $$ = $1; }
  / VariableDeclaration SEMICOLON+ { $$ = $1; }
  / SEMICOLON+ { $$ = new EmptyDeclaration(); }

FunctionDeclaration <-
  Metadata? TypeQualifiers? FunctionDeclarator { $$ = new FunctionDeclaration(declarator: $3, metadata: $1, qualifiers: $2); }
  / Metadata? TypeQualifiers? Type FunctionDeclarator { $$ = new FunctionDeclaration(declarator: $4, metadata: $1, qualifiers: $2, type: $3); }

Metadata <-
  DeclarationSpecifier+ { $$ = new DeclarationSpecifiers(elements: $1); }

DeclarationSpecifier <-
  ATTRIBUTE OPEN_PAREN OPEN_PAREN DeclarationModifierList? CLOSE_PAREN CLOSE_PAREN { $$ = new DeclarationSpecifier(identifier: $1, modifiers: $4, parenthesis: true); }

DeclarationModifierList <-
  DeclarationModifier (COMMA DeclarationModifier)* { $$ = new DeclarationModifiers(elements: _list($1, $2)); }

DeclarationModifier <-
  Identifier OPEN_PAREN DeclarationModifierArguments? CLOSE_PAREN { $$ = new DeclarationModifier(arguments: $3, identifier: $1); }
  / Identifier { $$ = new DeclarationModifier(identifier: $1); }

Identifier <-
  !RESERVED_WORD Identifier_base spaces2 { $$ = $2; }

spaces2 <-
  spaces

DeclarationModifierArguments <-
  DeclarationModifierArgument (COMMA DeclarationModifierArgument)* { $$ = new Arguments(elements: _list($1, $2)); }

DeclarationModifierArgument <-
  constant_expression

constant_expression <-
  conditional_expression
  / string_literal

conditional_expression <-
  logical_or_expression question_mark expression semicolon conditional_expression { $$ = _conditional($1, $3, $5); }
  / logical_or_expression

logical_or_expression <-
  logical_and_expression logical_or_expression1 { $$ = _binary($1, $2); }

logical_and_expression <-
  inclusive_or_expression logical_and_expression1 { $$ = _binary($1, $2); }

inclusive_or_expression <-
  exclusive_or_expression inclusive_or_expression1 { $$ = _binary($1, $2); }

exclusive_or_expression <-
  and_expression exclusive_or_expression1 { $$ = _binary($1, $2); }

and_expression <-
  equality_expression and_expression1 { $$ = _binary($1, $2); }

equality_expression <-
  relational_expression equality_expression1 { $$ = _binary($1, $2); }

relational_expression <-
  shift_expression relational_expression1 { $$ = _binary($1, $2); }

shift_expression <-
  additive_expression shift_expression1 { $$ = _binary($1, $2); }

additive_expression <-
  multiplicative_expression additive_expression1 { $$ = _binary($1, $2); }

multiplicative_expression <-
  unary_expression multiplicative_expression1 { $$ = _binary($1, $2); }

unary_expression <-
  primary_expression
  / unary_operator unary_expression { $$ = _unary($1, $2); }

primary_expression <-
  sizeof
  / Identifier
  / constant
  / lparen expression rparen { $$ = new ParenthesisExpression(expression: $2); }

sizeof <-
  SIZEOF OPEN_PAREN Type CLOSE_PAREN { $$ = new SizeofExpression(type: $3); }

expression <-
  conditional_expression

constant <-
  constant_base spaces2 { $$ = $1; }

constant_base <-
  floating_constant_base
  / integer_constant_base
  / character_constant_base  

floating_constant_base <-
  decimal_floating_constant
  / hexadecimal_floating_constant

decimal_floating_constant <-
  decimal_floating_constant_base spaces2 { $$ = $1; }

lparen <-
  '(' spaces { $$ = $1; }

rparen <-
  ')' spaces { $$ = $1; }

unary_operator <-
  plus
  / minus
  / tilde
  / exclamation

plus <-
  '+' spaces { $$ = $1; }

minus <-
  '-' spaces { $$ = $1; }

tilde <-
  '~' spaces { $$ = $1; }

exclamation <-
  '!' spaces { $$ = $1; }

multiplicative_expression1 <-
  multiplicative_operator unary_expression multiplicative_expression1 { $$ = new _Node($1, $2, $3); }
  / '' { $$ = null; }

multiplicative_operator <-
  asterisk
  / slash
  / percent

asterisk <-
  '*' spaces { $$ = $1; }

slash <-
  '/' spaces { $$ = $1; }

percent <-
  '%' spaces { $$ = $1; }

additive_expression1 <-
  additive_operator multiplicative_expression additive_expression1 { $$ = new _Node($1, $2, $3); }
  / '' { $$ = null; }

additive_operator <-
  plus
  / minus

shift_expression1 <-
  shift_operator additive_expression shift_expression1 { $$ = new _Node($1, $2, $3); }
  / '' { $$ = null; }

shift_operator <-
  lsh
  / rsh

lsh <-
  '<<' spaces { $$ = $1; }

rsh <-
  '>>' spaces { $$ = $1; }

relational_expression1 <-
  relational_operator shift_expression relational_expression1 { $$ = new _Node($1, $2, $3); }
  / '' { $$ = null; }

relational_operator <-
  lt
  / gt
  / lte
  / gte

lt <-
  '<' spaces { $$ = $1; }

gt <-
  '>' spaces { $$ = $1; }

lte <-
  '<=' spaces { $$ = $1; }

gte <-
  '>=' spaces { $$ = $1; }

equality_expression1 <-
  eq relational_expression equality_expression1 { $$ = new _Node($1, $2, $3); }
  / neq relational_expression equality_expression1 { $$ = new _Node($1, $2, $3); }
  / '' { $$ = null; }

eq <-
  '==' spaces { $$ = $1; }

neq <-
  '!=' spaces { $$ = $1; }

and_expression1 <-
  ampersand equality_expression and_expression1 { $$ = new _Node($1, $2, $3); }
  / '' { $$ = null; }

ampersand <-
  '&' spaces { $$ = $1; }

exclusive_or_expression1 <-
  xor and_expression exclusive_or_expression1 { $$ = new _Node($1, $2, $3); }
  / '' { $$ = null; }

xor <-
  '^' spaces { $$ = $1; }

inclusive_or_expression1 <-
  vertical_line exclusive_or_expression inclusive_or_expression1 { $$ = new _Node($1, $2, $3); }
  / '' { $$ = null; }

vertical_line <-
  '|' spaces { $$ = $1; }

logical_and_expression1 <-
  ampersand2 inclusive_or_expression logical_or_expression1 { $$ = new _Node($1, $2, $3); }
  / '' { $$ = null; }

ampersand2 <-
  '&&' spaces { $$ = $1; }

logical_or_expression1 <-
  vertical_line2 logical_and_expression logical_or_expression1 { $$ = new _Node($1, $2, $3); }
  / '' { $$ = null; }

vertical_line2 <-
  '||' spaces { $$ = $1; }

question_mark <-
  '?' spaces { $$ = $1; }

semicolon <-
  ':' spaces { $$ = $1; }

TypeQualifiers <-
  TypeQualifier+ { $$ = new TypeQualifiers(elements: $1); }

TypeQualifier <-
  (CONST / VOLATILE) Metadata? { $$ = new TypeQualifier(identifier: $1, metadata: $2); }

FunctionDeclarator <-
  PointerSpecifiers? Identifier OPEN_PAREN FunctionParameters CLOSE_PAREN Metadata? { $$ = new Declarator(identifier: $2, metadata: $6, parameters: $4, pointers: $1); }

PointerSpecifiers <-
  PointerSpecifier+ { $$ = new PointerSpecifiers(elements: $1); }

PointerSpecifier <-
  ASTERISK Metadata? TypeQualifiers? { $$ = new PointerSpecifier(metadata: $2, qualifiers: $3); }

FunctionParameters <-
  FunctionParameterList? (COMMA ELLIPSIS { $$ = $2; })? { $$ = new FunctionParameters(elements: $1 != null ? $1 : [], ellipsis: $2); }

FunctionParameterList <-
  FunctionParameterDeclaration (COMMA FunctionParameterDeclaration)* { $$ = _list($1, $2); }

FunctionParameterDeclaration <-
  ParameterDeclarationNotAbstract
  / ParameterDeclarationAbstract

ParameterDeclarationNotAbstract <-
  Metadata? TypeQualifiers? Type FunctionDeclarator { $$ = new ParameterDeclaration(declarator: $4, metadata: $1, qualifiers: $2,  type: $3); }
  / Metadata? TypeQualifiers? Type FunctionPointerDeclarator { $$ = new ParameterDeclaration(declarator: $4, metadata: $1, qualifiers: $2,  type: $3); }
  / Metadata? TypeQualifiers? Type DeclaratorNotAbstract { $$ = new ParameterDeclaration(declarator: $4, metadata: $1, qualifiers: $2,  type: $3); }

Type <-
  DefinedType
  / IntegerType
  / FloatType
  / VoidType
  / BoolType
  / StructureType
  / EnumType

DefinedType <-
  Identifier Metadata? TypeQualifiers? { $$ = new DefinedTypeSpecification(identifier: $1, metadata: $2, qualifiers: $3); }

IntegerType <-
  (CharTypeSpecifiers / Integer_Type_Specifiers) Metadata? TypeQualifiers? { $$ = new BasicTypeSpecification(metadata: $2, qualifiers: $3, specifiers: $1); }

FloatType <-
  FloatTypeSpeficiers Metadata? TypeQualifiers? { $$ = new BasicTypeSpecification(metadata: $2, qualifiers: $3, specifiers: $1); }

VoidType <-
  VOID Metadata? TypeQualifiers? { $$ = new VoidTypeSpecification(identifier: _ident([$1]), metadata: $2, qualifiers: $3); }

BoolType <-
  BOOL Metadata? TypeQualifiers? { $$ = new BoolTypeSpecification(identifier: _ident([$1]), metadata: $2, qualifiers: $3); }

StructureType <-
  StructureTypeSpecifier StructureMemberList Metadata? TypeQualifiers? { $$ = new StructureTypeSpecification(metadata: $3, elaboratedType: $1, members: $2, qualifiers: $4); }
  / StructureTypeSpecifierWithTag Metadata? TypeQualifiers? { $$ = new StructureTypeSpecification(metadata: $2, elaboratedType: $1, qualifiers: $3); }

StructureTypeSpecifier <-
  (STRUCT / UNION) Metadata? Identifier? { $$ = new ElaboratedTypeSpecifier(kind: $1, metadata: $2, tag: $3); }

StructureMemberList <-
  OPEN_BRACE StructureMember+ CLOSE_BRACE { $$ = new MemberDeclarations(elements: $2); }

StructureMember <-
  BitFieldParameterDeclaration SEMICOLON { $$ = $1; }
  / ParameterDeclarationNotAbstract SEMICOLON { $$ = $1; }
  / ParameterDeclarationAbstract SEMICOLON { $$ = $1; }

BitFieldParameterDeclaration <-
  Metadata? TypeQualifiers? Type BitFieldDeclaratorNotAbstract { $$ = new ParameterDeclaration(declarator: $4, metadata: $1, qualifiers: $2,  type: $3); }
  / Metadata? TypeQualifiers? Type BitFieldDeclaratorAbstract { $$ = new ParameterDeclaration(declarator: $4, metadata: $1, qualifiers: $2, type: $3); }

BitFieldDeclaratorNotAbstract <-
  Identifier COLON integer_constant Metadata? { $$ = new Declarator(identifier: $1, metadata: $4, width: $3); }

integer_constant <-
  integer_constant_base spaces { $$ = $1; }

BitFieldDeclaratorAbstract <-
  Identifier? COLON integer_constant Metadata? { $$ = new Declarator(identifier: $1, metadata: $4, width: $3); }

ParameterDeclarationAbstract <-
  Metadata? TypeQualifiers? Type DeclaratorAbstract { $$ = new ParameterDeclaration(declarator: $4, metadata: $1, qualifiers: $2, type: $3); }
  / Metadata? TypeQualifiers? Type { $$ = new ParameterDeclaration(metadata: $1, qualifiers: $2, type: $3); }

DeclaratorAbstract <-
  PointerSpecifiers ArrayDimensions Metadata? { $$ = new Declarator(dimensions: $2, metadata: $3, pointers: $1); }
  / PointerSpecifiers? ArrayDimensions Metadata? { $$ = new Declarator(dimensions: $2, metadata: $3, pointers: $1); }
  / PointerSpecifiers ArrayDimensions? Metadata? { $$ = new Declarator(dimensions: $2, metadata: $3, pointers: $1); }

ArrayDimensions <-
  Dimension+ { $$ = new ArrayDimensions(elements: $1); }

Dimension <-
  OPEN_BRACKET constant_expression? CLOSE_BRACKET { $$ = $2; }

StructureTypeSpecifierWithTag <-
  (STRUCT / UNION) Metadata? Identifier { $$ = new ElaboratedTypeSpecifier(kind: $1, metadata: $2, tag: $3); }

EnumType <-
  EnumTypeSpecifier OPEN_BRACE Enumerators CLOSE_BRACE Metadata? TypeQualifiers? { $$ = new EnumTypeSpecification(metadata: $5, elaboratedType: $1, qualifiers: $6, enumerators: $3); }
  / EnumTypeSpecifierWithTag Metadata? TypeQualifiers? { $$ = new EnumTypeSpecification(metadata: $2, elaboratedType: $1, qualifiers: $3); }

EnumTypeSpecifier <-
  ENUM Metadata? Identifier? { $$ = new ElaboratedTypeSpecifier(kind: $1, metadata: $2, tag: $3); }

Enumerators <-
  EnumeratorList { $$ = new Enumerators(elements: $1); }

EnumeratorList <-
  Enumerator (COMMA Enumerator)* COMMA? { $$ = _list($1, $2); }

Enumerator <-
  Identifier ASSIGN (constant_expression) { $$ = new Enumerator(identifier: $1, value: $3); }
  / Identifier { $$ = new Enumerator(identifier: $1); }

EnumTypeSpecifierWithTag <-
  ENUM Metadata? Identifier { $$ = new ElaboratedTypeSpecifier(kind: $1, metadata: $2, tag: $3); }

FunctionPointerDeclarator <-
  PointerSpecifiers? OPEN_PAREN PointerSpecifiers Identifier CLOSE_PAREN OPEN_PAREN FunctionParameters CLOSE_PAREN ArrayDimensions? Metadata? { $$ = new Declarator(dimensions: $9, functionPointers: $3, identifier: $4, metadata: $10, parameters: $7, pointers: $1); }

DeclaratorNotAbstract <-
  PointerSpecifiers? Identifier ArrayDimensions? Metadata? { $$ = new Declarator(dimensions: $3, identifier: $2, metadata: $4, pointers: $1); }

StructureDeclaration <-
  Metadata? TypeQualifiers? StructureType { $$ = new StructureDeclaration(metadata: $1, qualifiers: $2, type: $3); }

EnumDeclaration <-
  Metadata? TypeQualifiers? EnumType { $$ = new EnumDeclaration(metadata: $1, qualifiers: $2, type: $3); }

TypedefDeclaration <-
  Metadata? TypeQualifiers? TypedefSpecifier Type TypeDeclaratorList { $$ = new TypedefDeclaration(declarators: $5, metadata: $1, qualifiers: $2, type: $4, typedef: $3); }

TypedefSpecifier <-
  TYPEDEF Metadata? TypeQualifiers? { $$ = new TypedefSpecifier(metadata: $2, qualifiers: $3); }

TypeDeclaratorList <-
  TypeDeclarator (COMMA TypeDeclarator)* { $$ = new TypedefDeclarators(elements: _list($1, $2)); }

TypeDeclarator <-
  FunctionDeclarator
  / FunctionPointerDeclarator
  / DeclaratorNotAbstract
  / TypedefFunctionDeclarator

TypedefFunctionDeclarator <-
  PointerSpecifiers? OPEN_PAREN Identifier CLOSE_PAREN OPEN_PAREN FunctionParameters CLOSE_PAREN Metadata? { $$ = new Declarator(identifier: $3, metadata: $8, parameters: $6, pointers: $1); }

VariableDeclaration <-
  Metadata? TypeQualifiers? Type VariableDeclaratorList { $$ = new VariableDeclaration(declarators: $4, metadata: $1, qualifiers: $2, type: $3); }

VariableDeclaratorList <-
  VariableDeclarator (COMMA VariableDeclarator)* { $$ = new VariableDeclarators(elements: _list($1, $2)); }

VariableDeclarator <-
  DeclaratorNotAbstract

string_literal <-
  string_literal2 spaces { $$ = $1; }

string_literal2 <-
  string_literal_base (spaces string_literal_base)* { $$ = new StringLiteral(text: _text(), value: _strValue(_list($1, $2))); }

### Lexemes (tokens) ###

ASSIGN <-
  '=' SPACING { $$ = $1; }

ASTERISK <-
  '*' SPACING { $$ = $1; }

ATTRIBUTE <-
  '__attribute__' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

BOOL <-
  '_Bool' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

CLOSE_BRACE <-
  '}' SPACING { $$ = $1; }

CLOSE_BRACKET <-
  ']' SPACING { $$ = $1; }

CLOSE_PAREN <-
  ')' SPACING { $$ = $1; }

COLON <-
  ':' SPACING { $$ = $1; }

COMMA <-
  ',' SPACING { $$ = $1; }

CONST <-
  'const' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

CharTypeSpecifiers <-
  SIGNMODIFIER? CHAR { $$ = new TypeSpecifiers(elements: _removeNull([$1, $2])); }
  / CHAR SIGNMODIFIER { $$ = new TypeSpecifiers(elements: [$1, $2]); }

ELLIPSIS <-
  '...' SPACING { $$ = new Identifier(name: $1); }

ENUM <-
  'enum' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

EOF <-
  !.

FloatTypeSpeficiers <-
  (FLOAT / DOUBLE) { $$ = new TypeSpecifiers(elements: [$1]); }

Identifier_base <-
  IDENTIFIER_NONDIGIT IDENTIFIER_BASE1* { $$ = new Identifier(name: _text()); }

Integer_Type_Specifiers <-
  SIGNMODIFIER? SIZEMODIFIER INT { $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3]))); }
  / SIGNMODIFIER? INT SIZEMODIFIER { $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3]))); }
  / SIZEMODIFIER? SIGNMODIFIER INT { $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3]))); }
  / SIZEMODIFIER? INT SIGNMODIFIER { $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3]))); }
  / INT? SIGNMODIFIER SIZEMODIFIER { $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3]))); }
  / INT? SIZEMODIFIER SIGNMODIFIER { $$ = new TypeSpecifiers(elements: _removeNull(_flatten([$1, $2, $3]))); }
  / SIGNMODIFIER { $$ = new TypeSpecifiers(elements: _flatten([$1])); }
  / SIZEMODIFIER { $$ = new TypeSpecifiers(elements: _flatten([$1])); }
  / INT { $$ = new TypeSpecifiers(elements: _flatten([$1])); }

LEADING_SPACES <-
  SPACING

OPEN_BRACE <-
  '{' SPACING { $$ = $1; }

OPEN_BRACKET <-
  '[' SPACING { $$ = $1; }

OPEN_PAREN <-
  '(' SPACING { $$ = $1; }

RESERVED_WORD <-
  ('__attribute__' / 'auto' / 'break' / 'case' / 'char' / 'const' / 'continue' / 'default' / 'do' / 'double' / 'else' / 'enum' / 'extern' / 'float' / 'for' / 'goto' / 'if' / 'inline' / 'int' / 'long' / 'register' / 'restrict' / 'return' / 'short' / 'signed' / 'sizeof' / 'static' / 'struct' / 'switch' / 'typedef' / 'union' / 'unsigned' / 'void' / 'volatile' / 'while' / '_Bool' / '_Complex' / '_Imaginary') !IDENTIFIER_BASE1

SEMICOLON <-
  ';' SPACING { $$ = $1; }

SIZEOF <-
  'sizeof' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

STRUCT <-
  'struct' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

TYPEDEF <-
  'typedef' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

UNION <-
  'union' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

VOID <-
  'void' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

VOLATILE <-
  'volatile' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

character_constant_base <-
  '\'' C_CHAR '\'' { $$ = new CharacterLiteral(text: _text(), value: $2); }
  / 'L\'' C_CHAR '\'' { $$ = new CharacterLiteral(text: _text(), value: $2); }

decimal_floating_constant_base <-
  FRACTIONAL_CONSTANT EXPONENT_PART? FLOATING_SUFFIX? { $$ = _floatLiteral(_text()); }
  / DIGIT_SEQUENCE EXPONENT_PART FLOATING_SUFFIX? { $$ = _floatLiteral(_text()); }

hexadecimal_floating_constant <-
  HEXADECIMAL_PREFIX HEXADECIMAL_FRACTIONAL_CONSTANT BINARY_EXPONENT_PART FLOATING_SUFFIX? { $$ = _floatLiteral(_text()); }
  / HEXADECIMAL_PREFIX HEXADECIMAL_DIGIT_SEQUENCE BINARY_EXPONENT_PART FLOATING_SUFFIX? { $$ = _floatLiteral(_text()); }

integer_constant_base <-
  DECIMAL_CONSTANT INTEGER_SUFFIX? { $$ = new IntegerLiteral(text: _text(), value: $1); }
  / HEXADECIMAL_CONSTANT INTEGER_SUFFIX? { $$ = new IntegerLiteral(text: _text(), value: $1); }
  / OCTAL_CONSTANT INTEGER_SUFFIX? { $$ = new IntegerLiteral(text: _text(), value: $1); }

spaces <-
  [\t ]* { $$ = _text(); }

string_literal_base <-
  '"' S_CHAR_SEQUENCE? '"' { $$ = $2; }
  / 'L"' S_CHAR_SEQUENCE? '"' { $$ = $2; }

### Morphemes ###

CHAR <-
  'char' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

COMMENT <-
  '//' (!EOL .)* (EOL / !.)

DOUBLE <-
  'double' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

EOL <-
  '\r\n'
  / [\n\r]

FLOAT <-
  'float' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

INT <-
  'int' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

IDENTIFIER_BASE1 <-
  IDENTIFIER_NONDIGIT { $$ = _text(); }
  / DIGIT { $$ = _text(); }

IDENTIFIER_NONDIGIT <-
  NONDIGIT
  / UNIVERSAL_CHARACTER_NAME

LONG <-
  'long' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

SHORT <-
  'short' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

SIGNED <-
  'signed' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

SPACE <-
  [\t-\n\r ]

SPACING <-
  (SPACE / COMMENT)*

SIGNMODIFIER <-
  SIGNED
  / UNSIGNED

SIZEMODIFIER <-
  SHORT
  / LONG LONG
  / LONG

UNSIGNED <-
  'unsigned' !IDENTIFIER_BASE1 SPACING { $$ = new Identifier(name: $1); }

BINARY_EXPONENT_PART <-
  ('p' / 'P') SIGN? DIGIT_SEQUENCE { $$ = _text(); }

C_CHAR <-
  ![\n\r'\\] . { $$ = $2.codeUnitAt(0); }
  / ESCAPE_SEQUENCE

DECIMAL_CONSTANT <-
  NONZERO_DIGIT DIGIT* { $$ = int.parse(_text()); }

DIGIT <-
  [0-9]

DIGIT_SEQUENCE <-
  DIGIT+ { $$ = _text(); }

ESCAPE_SEQUENCE <-
  SIMPLE_ESCAPE_SEQUENCE
  / OCTAL_ESCAPE_SEQUENCE
  / HEXADECIMAL_ESCAPE_SEQUENCE
  / UNIVERSAL_CHARACTER_NAME

EXPONENT_PART <-
  ('e' / 'E') SIGN? DIGIT_SEQUENCE { $$ = _text(); }

FLOATING_SUFFIX <-
  [FLfl]

FRACTIONAL_CONSTANT <-
  DIGIT_SEQUENCE? '.' DIGIT_SEQUENCE { $$ = _text(); }
  / DIGIT_SEQUENCE '.' { $$ = _text(); }

HEX_QUAD <-
  HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT { $$ = _text(); }

HEXADECIMAL_CONSTANT <-
  HEXADECIMAL_PREFIX HEXADECIMAL_DIGIT HEXADECIMAL_CONSTANT1 { $$ = int.parse(_text(2), radix: 16); }

HEXADECIMAL_CONSTANT1 <-
  (HEXADECIMAL_DIGIT HEXADECIMAL_CONSTANT1)?

HEXADECIMAL_DIGIT <-
  [0-9A-Fa-f]

HEXADECIMAL_DIGIT_SEQUENCE <-
  HEXADECIMAL_DIGIT+ { $$ = _text(); }

HEXADECIMAL_ESCAPE_SEQUENCE <-
  '\\x' HEXADECIMAL_DIGIT HEXADECIMAL_ESCAPE_SEQUENCE1 { $$ = int.parse(_text(2), radix: 16); }

HEXADECIMAL_ESCAPE_SEQUENCE1 <-
  (HEXADECIMAL_DIGIT HEXADECIMAL_ESCAPE_SEQUENCE1)? { $$ = _text(); }

HEXADECIMAL_FRACTIONAL_CONSTANT <-
  HEXADECIMAL_DIGIT_SEQUENCE? '.' HEXADECIMAL_DIGIT_SEQUENCE
  / HEXADECIMAL_DIGIT_SEQUENCE '.'

HEXADECIMAL_PREFIX <-
  '0x'
  / '0X'

INTEGER_SUFFIX <-
  UNSIGNED_SUFFIX LONG_LONG_SUFFIX
  / UNSIGNED_SUFFIX LONG_SUFFIX?
  / LONG_LONG_SUFFIX UNSIGNED_SUFFIX?
  / LONG_SUFFIX UNSIGNED_SUFFIX?

LONG_LONG_SUFFIX <-
  'll'
  / 'LL'

LONG_SUFFIX <-
  [Ll]

NONDIGIT <-
  [A-Z_a-z]

NONZERO_DIGIT <-
  [1-9]

OCTAL_CONSTANT <-
  '0' OCTAL_CONSTANT1 { $$ = int.parse(_text(), radix: 8); }

OCTAL_CONSTANT1 <-
  (OCTAL_DIGIT OCTAL_CONSTANT1)?

OCTAL_DIGIT <-
  [0-7]

OCTAL_ESCAPE_SEQUENCE <-
  '\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT { $$ = int.parse(_text(1), radix: 8); }
  / '\\' OCTAL_DIGIT OCTAL_DIGIT { $$ = int.parse(_text(1), radix: 8); }
  / '\\' OCTAL_DIGIT { $$ = int.parse($2, radix: 8); }

S_CHAR <-
  ![\n\r"\\] . { $$ = $2.codeUnitAt(0); }
  / ESCAPE_SEQUENCE

S_CHAR_SEQUENCE <-
  S_CHAR+

SIGN <-
  [+\-]

SIMPLE_ESCAPE_SEQUENCE <-
  [\\] ["'?\\a-bfnrtv] { $$ = _escape($1); }

UNIVERSAL_CHARACTER_NAME <-
  '\\U' HEX_QUAD HEX_QUAD { $$ = int.parse(_text(2), radix: 16); }
  / '\\u' HEX_QUAD { $$ = int.parse(_text(2), radix: 16); }

UNSIGNED_SUFFIX <-
  [Uu]

