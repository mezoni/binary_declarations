%{
import "package:binary_declarations/binary_declarations.dart";

ArrayTypeSpecification _createArray(TypeSpecification type, List dimensions) {  
  return new ArrayTypeSpecification(dimensions: dimensions, type: type);
}

List _createParameters(List parameters, ParameterDeclaration vaList) {    
  var list = <ParameterDeclaration>[];
  list.addAll(parameters);
  if (vaList != null) {
    list.add(vaList);  
  }
  
  return list;
}

PointerTypeSpecification _createPointer(TypeSpecification type, List stars) {    
  for (var star in stars) {
    type = new PointerTypeSpecification(type: type);
  }
  
  return type;
}
}%

# Nonterminals

Declarations <-
  SPACING? DeclarationList? EOF { $$ = $2; }

SPACING <-
  (SPACE / COMMENT)*

SPACE <-
  [\t ]
  / EOL

EOL <-
  '\r\n'
  / [\n\r] SPACING { $$ = $1; }

COMMENT <-
  '//' (!EOL .)* EOL?

DeclarationList <-
  Declaration*

Declaration <-
  FunctionDeclartion SEMICOLON { $$ = $1; }
  / TypedefDeclaration SEMICOLON { $$ = $1; }
  / StructDeclaration SEMICOLON { $$ = $1; }

FunctionDeclartion <-
  Type IDENTIFIER OPEN_PAREN FunctionParameters? CLOSE_PAREN { $$ = new FunctionDeclaration(name: $2, parameters: $4, returnType: $1); }

Type <-
  PointerType
  / ArrayType
  / TypeName

PointerType <-
  TypeName ASTERISK+ { $$ = _createPointer($1, $2); }

TypeName <-
  TypeSign? CHAR { $$ = new IntegerTypeSpecification(kind: $2, sign: $1); }
  / TypeSign? INT { $$ = new IntegerTypeSpecification(kind: $2, sign: $1); }
  / TypeSign? SHORT INT? { $$ = new IntegerTypeSpecification(kind: "short", sign: $1); }
  / TypeSign? LONG INT? { $$ = new IntegerTypeSpecification(kind: "long", sign: $1); }
  / TypeSign? LONG LONG INT? { $$ = new IntegerTypeSpecification(kind: "long long", sign: $1); }
  / FLOAT { $$ = new FloatTypeSpecification(kind: "float"); }
  / DOUBLE { $$ = new FloatTypeSpecification(kind: "double"); }
  / STRUCT IDENTIFIER { $$ = new StructureTypeSpecification(kind: "struct", tag: $2); }
  / UNION IDENTIFIER { $$ = new StructureTypeSpecification(kind: "union", tag: $2); }
  / VOID { $$ = new VoidTypeSpecification(); }
  / IDENTIFIER { $$ = new TypedefTypeSpecification(name: $1); }

TypeSign <-
  SIGNED { $$ = true; }
  / UNSIGNED { $$ = false; }

SIGNED <-
  'signed' SPACING { $$ = $1; }

UNSIGNED <-
  'unsigned' SPACING { $$ = $1; }

CHAR <-
  'char' SPACING { $$ = $1; }

INT <-
  'int' SPACING { $$ = $1; }

SHORT <-
  'short' SPACING { $$ = $1; }

LONG <-
  'long' SPACING { $$ = $1; }

FLOAT <-
  'float' SPACING { $$ = $1; }

DOUBLE <-
  'double' SPACING { $$ = $1; }

STRUCT <-
  'struct' SPACING { $$ = $1; }

IDENTIFIER <-
  IDENT_START IDENT_CONT* SPACING { $$ = _flatten([$1, $2]).join(); }

UNION <-
  'union' SPACING { $$ = $1; }

VOID <-
  'void' SPACING { $$ = $1; }

ASTERISK <-
  '*' SPACING { $$ = $1; }

ArrayType <-
  TypeName DIMENSIONS { $$ = _createArray($1, $2); }

DIMENSIONS <-
  DIMENSION+

DIMENSION <-
  OPEN_BRACKET INTEGER? CLOSE_BRACKET { $$ = $2; }

OPEN_BRACKET <-
  '[' SPACING { $$ = $1; }

INTEGER <-
  [0-9]+ SPACING { $$ = int.parse($1.join()); }

CLOSE_BRACKET <-
  ']' SPACING { $$ = $1; }

OPEN_PAREN <-
  '(' SPACING { $$ = $1; }

FunctionParameters <-
  FunctionParameterList (COMMA VaListParameter { $$ = $2; })? { $$ = _createParameters($1, $2); }

FunctionParameterList <-
  FunctionParameter (COMMA FunctionParameter)* { $$ = _list($1, $2); }

FunctionParameter <-
  ArrayParameter
  / ConstPointerParameter
  / PointerParameter
  / SimpleParameter

ArrayParameter <-
  Type IDENTIFIER? DIMENSIONS { $$ = new ParameterDeclaration(name: $2, type: _createArray($1, $3)); }

ConstPointerParameter <-
  CONST? PointerType IDENTIFIER? { $$ = new ParameterDeclaration(name: $3, type: $2); }

CONST <-
  'const' SPACING { $$ = $1; }

PointerParameter <-
  PointerType IDENTIFIER? { $$ = new ParameterDeclaration(name: $2, type: $1); }

SimpleParameter <-
  Type IDENTIFIER? { $$ = new ParameterDeclaration(name: $2, type: $1); }

COMMA <-
  ',' SPACING { $$ = $1; }

VaListParameter <-
  ELLIPSIS { $$ = new ParameterDeclaration(type: new VaListTypeSpecification()); }

ELLIPSIS <-
  '...' SPACING { $$ = $1; }

CLOSE_PAREN <-
  ')' SPACING { $$ = $1; }

SEMICOLON <-
  ';' SPACING { $$ = $1; }

TypedefDeclaration <-
  TYPEDEF TypedefTypeDeclaration { $$ = $2; }

TYPEDEF <-
  'typedef' SPACING { $$ = $1; }

TypedefTypeDeclaration <-
  ArrayTypeDeclaration
  / StructTypeDeclaration
  / TypeDeclaration

ArrayTypeDeclaration <-
  Type IDENTIFIER DIMENSIONS { $$ = new TypedefDeclaration(name: $2,type: _createArray($1, $3)); }

StructTypeDeclaration <-
  StructDeclaration IDENTIFIER { $$ = new TypedefDeclaration(name: $2, type: $1.type); }

StructDeclaration <-
  (STRUCT / UNION) IDENTIFIER? OPEN_BRACE StructMemberList? CLOSE_BRACE { $$ = new StructDeclaration(kind: $1, members: $4, tag: $2); }

OPEN_BRACE <-
  '{' SPACING { $$ = $1; }

StructMemberList <-
  (StructMember)*

StructMember <-
  VariableDeclaration SEMICOLON { $$ = $1; }

VariableDeclaration <-
  ArrayVariableDeclaration
  / StructVariableDeclaration
  / PointerVariableDeclaration
  / SimpleVariableDeclaration

ArrayVariableDeclaration <-
  Type IDENTIFIER DIMENSIONS { $$ = new VariableDeclaration(name: $2, type: _createArray($1, $3)); }

StructVariableDeclaration <-
  StructTypeDeclaration IDENTIFIER { $$ = new VariableDeclaration(name: $2, type: $1.type); }

PointerVariableDeclaration <-
  PointerType IDENTIFIER { $$ = new VariableDeclaration(name: $2, type: $1); }

SimpleVariableDeclaration <-
  Type IDENTIFIER { $$ = new VariableDeclaration(name: $2, type: $1); }

CLOSE_BRACE <-
  '}' SPACING { $$ = $1; }

TypeDeclaration <-
  Type IDENTIFIER { $$ = new TypedefDeclaration(name: $2, type: $1); }

# Lexemes

EOF <-
  !.

IDENT_CONT <-
  IDENT_START
  / [0-9]

IDENT_START <-
  [A-Z_a-z]

