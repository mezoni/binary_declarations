%{
import "package:binary_declarations/binary_declarations.dart";

ArrayTypeSpecification _createArray(TypeSpecification type, ArrayDimensions dimensions, Metadata metadata) {  
  return new ArrayTypeSpecification(dimensions: dimensions, metadata: metadata, type: type);
}

String _createInt(List parts) {
  var list = [];
  for (var part in parts) {
    if (part != null) {
      list.add(part);
    }
  }

  return list.join(" ");
}

List _createParameters(List parameters, ParameterDeclaration vaList) {    
  var list = <ParameterDeclaration>[];
  list.addAll(parameters);
  if (vaList != null) {
    list.add(vaList);  
  }
  
  return list;
}

PointerTypeSpecification _createPointerType(TypeSpecification type, List stars, Metadata metadata) {    
  for (var star in stars) {
    type = new PointerTypeSpecification(metadata: metadata, type: type);
  }
  
  return type;
}

int _escape(String ch) {
  switch(ch) {
    case "a":
      return 0x07;
    case "b":
      return 0x08;
    case "f":
      return 0x0c;
    case "n":
      return 0x0a;
    case "r":
      return 0x0d;
    case "t":
      return 0x09;
    case "v":
      return 0x0b;
    case "\'":
      return 0x27;
    case "\"":
      return 0x22;
    case "\?":
      return 0x3f;
    default:
      throw new StateError("Unknown escape sequence: \\$ch");  
  }
}


int _parseInt(String sign, String digits, int radix) {
  if (sign == null) {
    sign = "";
  }
  return int.parse("$sign$digits", radix: radix);
}

}%

### Sentences (nonterminals) ###

Declarations <-
  LEADING_SPACES? DeclarationList? EOF { $$ = $2; }

DeclarationList <-
  Declaration*

Declaration <-
  FunctionDeclaration SEMICOLON+ { $$ = $1; }
  / StructureDeclaration SEMICOLON+ { $$ = $1; }
  / EnumDeclaration SEMICOLON+ { $$ = $1; }
  / TypedefDeclaration SEMICOLON+ { $$ = $1; }
  / VariableDeclaration SEMICOLON+ { $$ = $1; }
  / SEMICOLON+ { $$ = new EmptyDeclaration(); }

FunctionDeclaration <-
  Metadata? FunctionType { $$ = new FunctionDeclaration(metadata: $1, type: $2); }

Metadata <-
  AttributeSpecifier+ { $$ = new Metadata($1); }

AttributeSpecifier <-
  ATTRIBUTE OPEN_PAREN OPEN_PAREN AttributeList? CLOSE_PAREN CLOSE_PAREN { $$ = new AttributeList($4); }

AttributeList <-
  Attribute (COMMA Attribute)* { $$ = _list($1, $2); }

Attribute <-
  IDENT OPEN_PAREN AttributeParameterList? CLOSE_PAREN { $$ = new Attribute($1, $3); }
  / IDENT { $$ = new Attribute($1); }

AttributeParameterList <-
  AttributeParameter (COMMA AttributeParameter)* { $$ = _list($1, $2); }

AttributeParameter <-
  STRING
  / NUMBER

FunctionType <-
  (PointerType / Type)? Identifier FunctionParameters Metadata? { $$ = new FunctionTypeSpecification(metadata: $4, identifier: $2, parameters: $3, returnType: $1); }

PointerType <-
  Type ASTERISK+ Metadata? { $$ = _createPointerType($1, $2, $3); }

Type <-
  StructureType
  / EnumType
  / PrimitiveType

StructureType <-
  StructureTypeSpecifier StructureMemberList Metadata? { $$ = new StructureTypeSpecification(metadata: $3, elaboratedType: $1, members: $2); }
  / StructureTypeSpecifierWithTag Metadata? { $$ = new StructureTypeSpecification(metadata: $2, elaboratedType: $1); }

StructureTypeSpecifier <-
  (STRUCT / UNION) Metadata? Identifier? { $$ = new ElaboratedTypeSpecifier(kind: $1, metadata: $2, tag: $3); }

Identifier <-
  IDENTIFIER { $$ = new Identifier(name: $1); }

StructureMemberList <-
  OPEN_BRACE StructureMember+ CLOSE_BRACE { $$ = $2; }

StructureMember <-
  BitFieldParameter SEMICOLON { $$ = $1; }
  / ArrayParameter SEMICOLON { $$ = $1; }
  / PointerParameter SEMICOLON { $$ = $1; }
  / TypeParameter SEMICOLON { $$ = $1; }

BitFieldParameter <-
  Metadata? Type Identifier? COLON POSITIVE_NUMBER { $$ = new ParameterDeclaration(identifier: $3, metadata: $1, type: $2, width: $5); }

ArrayParameter <-
  Metadata? Type Identifier? ArrayDimensions Metadata? { $$ = new ParameterDeclaration(identifier: $3, metadata: $1, type: _createArray($2, $4, $5)); }

ArrayDimensions <-
  Dimension+ { $$ = new ArrayDimensions(dimensions: $1); }

Dimension <-
  OPEN_BRACKET ArraySize? CLOSE_BRACKET { $$ = $2; }

ArraySize <-
  !ZERO_NUMBER POSITIVE_NUMBER { $$ = $2; }

PointerParameter <-
  Metadata? PointerType IdentifierMD? { $$ = new ParameterDeclaration(identifier: $3, metadata: $1, type: $2); }

IdentifierMD <-
  IDENTIFIER Metadata? { $$ = new Identifier(metadata: $2, name: $1); }

TypeParameter <-
  Metadata? Type IdentifierMD? { $$ = new ParameterDeclaration(identifier: $3, metadata: $1, type: $2); }

StructureTypeSpecifierWithTag <-
  (STRUCT / UNION) Metadata? Identifier { $$ = new ElaboratedTypeSpecifier(kind: $1, metadata: $2, tag: $3); }

EnumType <-
  EnumTypeSpecifier OPEN_BRACE EnumValueList CLOSE_BRACE Metadata? { $$ = new EnumTypeSpecification(metadata: $5, elaboratedType: $1, values: $3); }
  / EnumTypeSpecifierWithTag Metadata? { $$ = new EnumTypeSpecification(metadata: $2, elaboratedType: $1); }

EnumTypeSpecifier <-
  ENUM Metadata? Identifier? { $$ = new ElaboratedTypeSpecifier(kind: $1, metadata: $2, tag: $3); }

EnumValueList <-
  EnumValue (COMMA EnumValue)* COMMA? { $$ = _list($1, $2); }

EnumValue <-
  IDENTIFIER ASSIGN NUMBER { $$ = new EnumValueDeclaration(name: $1, value: $3); }
  / IDENTIFIER { $$ = new EnumValueDeclaration(name: $1); }

EnumTypeSpecifierWithTag <-
  ENUM Metadata? Identifier { $$ = new ElaboratedTypeSpecifier(kind: $1, metadata: $2, tag: $3); }

PrimitiveType <-
  TYPE_QUALIFIERS? IDENTIFIER Metadata? { $$ = new DefinedTypeSpecification(metadata: $3, name: $2, qualifiers: $1); }
  / TYPE_QUALIFIERS? SIGNEDNESS? (SHORT / LONG_TYPE) INT? Metadata? { $$ = new IntegerTypeSpecification(metadata: $5, name: _createInt([$2, $3, $4]), qualifiers: $1); }
  / TYPE_QUALIFIERS? SIGNEDNESS? (CHAR / INT / SHORT / LONG_TYPE) Metadata? { $$ = new IntegerTypeSpecification(metadata: $4, name: _createInt([$2, $3]), qualifiers: $1); }
  / TYPE_QUALIFIERS? SIGNEDNESS Metadata? { $$ = new IntegerTypeSpecification(metadata: $3, name: $2, qualifiers: $1); }
  / TYPE_QUALIFIERS? (FLOAT / DOUBLE) Metadata? { $$ = new FloatTypeSpecification(metadata: $3, name: $2, qualifiers: $1); }
  / TYPE_QUALIFIERS? VOID Metadata? { $$ = new VoidTypeSpecification(metadata: $3, qualifiers: $1); }

FunctionParameters <-
  OPEN_PAREN FunctionParameterList? CLOSE_PAREN Metadata? { $$ = new FunctionParameters(metadata: $4, parameters: $2); }

FunctionParameterList <-
  FunctionParameterListNoVaList (COMMA VA_LIST_PARAMETER { $$ = $2; })? { $$ = _createParameters($1, $2); }

FunctionParameterListNoVaList <-
  FunctionParameter (COMMA FunctionParameter)* { $$ = _list($1, $2); }

FunctionParameter <-
  ArrayParameter
  / PointerParameter
  / TypeParameter

StructureDeclaration <-
  Metadata? StructureType { $$ = new StructureDeclaration(metadata: $1, type: $2); }

EnumDeclaration <-
  Metadata? EnumType { $$ = new EnumDeclaration(metadata: $1, type: $2); }

TypedefDeclaration <-
  Metadata? TypedefSpecifier TypedefType TypeSynonymList { $$ = new TypedefDeclaration(metadata: $1, synonyms: $4, type: $3, typedef: $2); }

TypedefSpecifier <-
  TYPEDEF Metadata? { $$ = new TypedefSpecifier(metadata: $2); }

TypedefType <-
  StructureType
  / EnumType
  / PrimitiveType

TypeSynonymList <-
  TypeSynonym (COMMA TypeSynonym)* { $$ = _list($1, $2); }

TypeSynonym <-
  FunctionTypeNoReturn
  / FunctionTypeSynonym
  / FunctionPointerTypeSynonym
  / ArrayTypeSynonym
  / PointerTypeSynonym
  / SimpleTypeSynonym

FunctionTypeNoReturn <-
  Identifier FunctionParameters Metadata? { $$ = new FunctionTypeSpecification(metadata: $3, identifier: $1, parameters: $2); }

FunctionTypeSynonym <-
  TYPE_QUALIFIERS? OPEN_PAREN Identifier CLOSE_PAREN FunctionParameters Metadata? { $$ = new FunctionTypeSpecification(metadata: $6, identifier: $3, parameters: $5); }

FunctionPointerTypeSynonym <-
  TYPE_QUALIFIERS? OPEN_PAREN ASTERISK+ Metadata? Identifier CLOSE_PAREN FunctionParameters Metadata? { $$ = _createPointerType(new FunctionTypeSpecification(metadata: $8, identifier: $5, parameters: $7), $3, $4); }

ArrayTypeSynonym <-
  ArrayTypeElementSynonym ArrayDimensions Metadata? { $$ = new ArrayTypeSpecification(dimensions: $2, metadata: $3, type: $1); }

ArrayTypeElementSynonym <-
  PointerTypeSynonymNoMetadata
  / SimpleTypeSynonymNoMetadata

PointerTypeSynonymNoMetadata <-
  TYPE_QUALIFIERS? ASTERISK Metadata? TypeSynonymNoMetadata { $$ = new PointerTypeSpecification(metadata: $3, qualifiers: $1, type: $4); }

TypeSynonymNoMetadata <-
  ArrayTypeSynonym
  / PointerTypeSynonymNoMetadata
  / SimpleTypeSynonymNoMetadata

SimpleTypeSynonymNoMetadata <-
  TYPE_QUALIFIERS? IDENTIFIER { $$ = new DefinedTypeSpecification(qualifiers: $1, name: $2); }

PointerTypeSynonym <-
  TYPE_QUALIFIERS? ASTERISK Metadata? TypeSynonym { $$ = new PointerTypeSpecification(metadata: $3, qualifiers: $1, type: $4); }

SimpleTypeSynonym <-
  TYPE_QUALIFIERS? IDENTIFIER Metadata? { $$ = new DefinedTypeSpecification(metadata: $3, qualifiers: $1, name: $2); }

VariableDeclaration <-
  ArrayVariableDeclaration
  / PointerVariableDeclaration
  / TypeVariableDeclaration

ArrayVariableDeclaration <-
  Metadata? Type Identifier ArrayDimensions Metadata? { $$ = new VariableDeclaration(identifier: $3, metadata: $1, type: _createArray($2, $4, $5)); }

PointerVariableDeclaration <-
  Metadata? PointerType IdentifierMD { $$ = new VariableDeclaration(identifier: $3, metadata: $1, type: $2); }

TypeVariableDeclaration <-
  Metadata? Type IdentifierMD { $$ = new VariableDeclaration(identifier: $3, metadata: $1, type: $2); }

### Lexemes (tokens) ###

ASSIGN <-
  '=' SPACING { $$ = $1; }

ASTERISK <-
  '*' SPACING { $$ = $1; }

ATTRIBUTE <-
  '__attribute__' SPACING { $$ = $1; }

CHAR <-
  'char' !IDENT_PART SPACING { $$ = $1; }

CLOSE_BRACE <-
  '}' SPACING { $$ = $1; }

CLOSE_BRACKET <-
  ']' SPACING { $$ = $1; }

CLOSE_PAREN <-
  ')' SPACING { $$ = $1; }

COLON <-
  ':' SPACING { $$ = $1; }

COMMA <-
  ',' SPACING { $$ = $1; }

DOUBLE <-
  'double' !IDENT_PART SPACING { $$ = $1; }

ENUM <-
  'enum' !IDENT_PART SPACING { $$ = $1; }

EOF <-
  !.

FLOAT <-
  'float' !IDENT_PART SPACING { $$ = $1; }

IDENT <-
  IDENT_START IDENT_CONT* SPACING { $$ = _flatten([$1, $2]).join(); }

IDENTIFIER <-
  !RESERVED_WORD IDENT_START IDENT_CONT* SPACING { $$ = _flatten([$2, $3]).join(); }

INT <-
  'int' !IDENT_PART SPACING { $$ = $1; }

LEADING_SPACES <-
  SPACING

LONG_TYPE <-
  LONG LONG { $$ = _createInt([$1, $2]); }
  / LONG

NUMBER <-
  OCTAL_NUMBER
  / INTEGER

OPEN_BRACE <-
  '{' SPACING { $$ = $1; }

OPEN_BRACKET <-
  '[' SPACING { $$ = $1; }

OPEN_PAREN <-
  '(' SPACING { $$ = $1; }

POSITIVE_NUMBER <-
  !('-' SPACING) (OCTAL_NUMBER / INTEGER) { $$ = $2; }

SEMICOLON <-
  ';' SPACING { $$ = $1; }

SHORT <-
  'short' !IDENT_PART SPACING { $$ = $1; }

SIGNEDNESS <-
  SIGNED
  / UNSIGNED

STRING <-
  '"' STRING_CHAR_SEQUENCE? '"' { $$ = $2 == null ? "" : new String.fromCharCodes($2); }
  / 'L"' STRING_CHAR_SEQUENCE? '"' { $$ = $2 == null ? "" : new String.fromCharCodes($2); }

STRUCT <-
  'struct' !IDENT_PART SPACING { $$ = $1; }

TYPEDEF <-
  'typedef' SPACING { $$ = $1; }

TYPE_QUALIFIERS <-
  TYPE_QUALIFIER* { $$ = new TypeQualifierList($1); }

UNION <-
  'union' !IDENT_PART SPACING { $$ = $1; }

VA_LIST_PARAMETER <-
  ELLIPSIS { $$ = new ParameterDeclaration(type: new VaListTypeSpecification()); }

VOID <-
  'void' !IDENT_PART SPACING { $$ = $1; }

ZERO_NUMBER <-
  ZERO SPACING { $$ = $1; }

### Morphemes ###

COMMENT <-
  '//' (!EOL .)* (EOL / !.)

CONST <-
  'const' SPACING { $$ = $1; }

ELLIPSIS <-
  '...' SPACING { $$ = $1; }

EOL <-
  '\r\n'
  / [\n\r]

ESCAPE_SEQUENCE <-
  SIMPLE_ESCAPE_SEQUENCE
  / OCTAL_ESCAPE_SEQUENCE
  / HEXADECIMAL_ESCAPE_SEQUENCE
  / UNIVERSAL_CHARCTER_NAME

HEXADECIMAL_DIGIT <-
  [0-af]

HEXADECIMAL_ESCAPE_SEQUENCE <-
  '\\x' HEXADECIMAL_DIGIT HEXADECIMAL_ESCAPE_SEQUENCE1 { $$ = int.parse(_text(2), radix: 16); }

HEXADECIMAL_ESCAPE_SEQUENCE1 <-
  HEXADECIMAL_DIGIT HEXADECIMAL_ESCAPE_SEQUENCE1 { $$ = _text(); }
  / ''

HEX_QUAD <-
  HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT { $$ = _text(); }

IDENT_CONT <-
  IDENT_START
  / [0-9]

IDENT_PART <-
  IDENT_START
  / IDENT_CONT

IDENT_START <-
  [A-Z_a-z]

INTEGER <-
  SIGN? [0-9]+ SPACING { $$ = _parseInt($1, $2.join(), 10); }

LONG <-
  'long' !IDENT_PART SPACING { $$ = $1; }

MINUS <-
  '-' SPACING { $$ = $1; }

OCTAL_DIGIT <-
  [0-7]

OCTAL_ESCAPE_SEQUENCE <-
  '\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT { $$ = int.parse(_text(1), radix: 8); }
  / '\\' OCTAL_DIGIT OCTAL_DIGIT { $$ = int.parse(_text(1), radix: 8); }
  / '\\' OCTAL_DIGIT { $$ = int.parse($2, radix: 8); }

OCTAL_NUMBER <-
  SIGN? [0] [0-9]+ { $$ = _parseInt($1, _flatten([$2, $3]).join(), 8); }

PLUS <-
  '+' SPACING { $$ = $1; }

RESERVED_WORD <-
  ('auto' / 'break' / 'case' / 'char' / 'const' / 'continue' / 'default' / 'do' / 'double' / 'else' / 'enum' / 'extern' / 'float' / 'for' / 'goto' / 'if' / 'inline' / 'int' / 'long' / 'register' / 'restrict' / 'return' / 'short' / 'signed' / 'sizeof' / 'static' / 'struct' / 'switch' / 'typedef' / 'union' / 'unsigned' / 'void' / 'volatile' / 'while' / '_Bool' / '_Complex' / '_Imaginary') !(IDENT_START / IDENT_CONT) { $$ = $1; }

SIGN <-
  PLUS
  / MINUS

SIGNED <-
  'signed' !IDENT_PART SPACING { $$ = $1; }

SIMPLE_ESCAPE_SEQUENCE <-
  [\\] ["'?\\a-bfnrtv] { $$ = _escape($1); }

SPACE <-
  [\t-\n\r ]

SPACING <-
  (SPACE / COMMENT)*

STRING_CHAR <-
  ![\n\r"\\] . { $$ = $2.codeUnitAt(0); }
  / ESCAPE_SEQUENCE

STRING_CHAR_SEQUENCE <-
  STRING_CHAR+

TYPE_QUALIFIER <-
  CONST

UNIVERSAL_CHARCTER_NAME <-
  '\\U' HEX_QUAD HEX_QUAD { $$ = int.parse(_text(2), radix: 16); }
  / '\\u' HEX_QUAD { $$ = int.parse(_text(2), radix: 16); }

UNSIGNED <-
  'unsigned' !IDENT_PART SPACING { $$ = $1; }

ZERO <-
  [0]+ ![0-9]+ { $$ = 0; }

