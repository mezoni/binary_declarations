%{
import "package:binary_declarations/binary_declarations.dart";

ArrayTypeSpecification _createArray(TypeSpecification type, List dimensions) {  
  return new ArrayTypeSpecification(dimensions: dimensions, type: type);
}

String _createInt(List parts) {
  var list = [];
  for (var part in parts) {
    if (part != null) {
      list.add(part);
    }
  }

  return list.join(" ");
}

int parseInt(String sign, String digits, int radix) {
  if (sign == null) {
    sign = "";
  }
  return int.parse("$sign$digits", radix: radix);
}

List _createParameters(List parameters, ParameterDeclaration vaList) {    
  var list = <ParameterDeclaration>[];
  list.addAll(parameters);
  if (vaList != null) {
    list.add(vaList);  
  }
  
  return list;
}

PointerTypeSpecification _createPointer(TypeSpecification type, List stars) {    
  for (var star in stars) {
    type = new PointerTypeSpecification(type: type);
  }
  
  return type;
}
}%

### Sentences (nonterminals) ###

Declarations <-
  LEADING_SPACES? DeclarationList? EOF { $$ = $2; }

DeclarationList <-
  Declaration*

Declaration <-
  FunctionDeclartion SEMICOLON+ { $$ = $1; }
  / TypedefDeclaration SEMICOLON+ { $$ = $1; }
  / VariableDeclaration SEMICOLON+ { $$ = $1; }
  / StructDeclaration SEMICOLON+ { $$ = $1; }
  / EnumDeclaration SEMICOLON+ { $$ = $1; }
  / SEMICOLON+ { $$ = new EmptyDeclaration(); }

FunctionDeclartion <-
  Type IDENTIFIER OPEN_PAREN FunctionParameters? CLOSE_PAREN AttributeSpecifiers? { $$ = new FunctionDeclaration(attributes: $6, name: $2, parameters: $4, returnType: $1); }

Type <-
  PointerType
  / ArrayType
  / TypeName

PointerType <-
  TypeName ASTERISK+ { $$ = _createPointer($1, $2); }

TypeName <-
  CONST? IDENTIFIER AttributeSpecifiers? { $$ = new TypedefTypeSpecification(attributes: $3, isConst: $1, name: $2); }
  / CONST? SIGNEDNESS? (CHAR / INT) AttributeSpecifiers? { $$ = new IntegerTypeSpecification(attributes: $4, isConst: $1, name: _createInt([$2, $3])); }
  / CONST? SIGNEDNESS? (SHORT / LONG_TYPE) INT? AttributeSpecifiers? { $$ = new IntegerTypeSpecification(attributes: $5, isConst: $1, name: _createInt([$2, $3, $4])); }
  / CONST? SIGNEDNESS AttributeSpecifiers? { $$ = new IntegerTypeSpecification(attributes: $3, isConst: $1, name: $2); }
  / CONST? (FLOAT / DOUBLE) AttributeSpecifiers? { $$ = new FloatTypeSpecification(attributes: $3, isConst: $1, kind: $2); }
  / CONST? VOID AttributeSpecifiers? { $$ = new VoidTypeSpecification(attributes: $3, isConst: $1); }
  / StructTypeName
  / EnumTypeName

AttributeSpecifiers <-
  AttributeSpecifier+ { $$ = new AttributeSpecifications($1); }

AttributeSpecifier <-
  ATTRIBUTE OPEN_PAREN OPEN_PAREN AttributeList? CLOSE_PAREN CLOSE_PAREN { $$ = new AttributeSpecification($4); }

AttributeList <-
  Attribute (COMMA Attribute)* { $$ = _list($1, $2); }

Attribute <-
  IDENT OPEN_PAREN AttributeParameterList? CLOSE_PAREN { $$ = new BinaryAttribute($1, $3); }
  / IDENT { $$ = new BinaryAttribute($1); }

AttributeParameterList <-
  AttributeParameter (COMMA AttributeParameter)* { $$ = _list($1, $2); }

AttributeParameter <-
  IDENT
  / NUMBER

StructTypeName <-
  CONST? (STRUCT / UNION) AttributeSpecifiers? IDENTIFIER? { $$ = new TaggedTypeSpecification(attributes: $3, isConst: $1, kind: $2, tag: $4); }

EnumTypeName <-
  CONST? ENUM AttributeSpecifiers? IDENTIFIER? { $$ = new TaggedTypeSpecification(attributes: $3, isConst: $1, kind: $2, tag: $4); }

ArrayType <-
  TypeName ArrayDimension { $$ = _createArray($1, $2); }

ArrayDimension <-
  Dimension+

Dimension <-
  OPEN_BRACKET ArraySize? CLOSE_BRACKET { $$ = $2; }

ArraySize <-
  !ZERO_NUMBER POSITIVE_NUMBER { $$ = $2; }

FunctionParameters <-
  FunctionParameterList (COMMA VA_LIST_PARAMETER { $$ = $2; })? { $$ = _createParameters($1, $2); }

FunctionParameterList <-
  FunctionParameter (COMMA FunctionParameter)* { $$ = _list($1, $2); }

FunctionParameter <-
  ArrayParameter
  / PointerParameter
  / SimpleParameter

ArrayParameter <-
  Type IDENTIFIER? ArrayDimension AttributeSpecifiers? { $$ = new ParameterDeclaration(attributes: $4, name: $2, type: _createArray($1, $3)); }

PointerParameter <-
  PointerType IDENTIFIER? AttributeSpecifiers? { $$ = new ParameterDeclaration(attributes: $3, name: $2, type: $1); }

SimpleParameter <-
  Type IDENTIFIER? AttributeSpecifiers? { $$ = new ParameterDeclaration(attributes: $3, name: $2, type: $1); }

TypedefDeclaration <-
  TYPEDEF TypedefTypeDeclaration { $$ = $2; }

TypedefTypeDeclaration <-
  TypedefArrayTypeDeclaration
  / TypedefTaggedTypeDeclaration
  / TypedefSimpleTypeDeclaration

TypedefArrayTypeDeclaration <-
  Type IDENTIFIER ArrayDimension AttributeSpecifiers? { $$ = new TypedefDeclaration(attributes: $4, name: $2, type: _createArray($1, $3)); }

TypedefTaggedTypeDeclaration <-
  TaggedTypeDeclaration IDENTIFIER AttributeSpecifiers? { $$ = new TypedefDeclaration(attributes: $3, name: $2, type: $1.type); }

TaggedTypeDeclaration <-
  StructDeclaration
  / EnumDeclaration

StructDeclaration <-
  StructTypeName OPEN_BRACE StructMemberList? CLOSE_BRACE AttributeSpecifiers? { $$ = new StructureDeclaration(attributes: $5, taggedType: $1, members: $3); }

StructMemberList <-
  (StructMember)*

StructMember <-
  BitFieldParameter SEMICOLON { $$ = $1; }
  / ArrayParameter SEMICOLON { $$ = $1; }
  / TaggedTypeParameter SEMICOLON { $$ = $1; }
  / PointerParameter SEMICOLON { $$ = $1; }
  / SimpleParameter SEMICOLON { $$ = $1; }

BitFieldParameter <-
  Type IDENTIFIER? COLON POSITIVE_NUMBER { $$ = new ParameterDeclaration(name: $2, type: $1, width: $4); }

TaggedTypeParameter <-
  (StructDeclaration / EnumDeclaration) IDENTIFIER { $$ = new ParameterDeclaration(name: $2, type: $1.type); }

EnumDeclaration <-
  EnumTypeName OPEN_BRACE EnumValueList CLOSE_BRACE AttributeSpecifiers? { $$ = new EnumDeclaration(attributes: $5, taggedType: $1, values: $3); }

EnumValueList <-
  EnumValue (COMMA EnumValue)* COMMA? { $$ = _list($1, $2); }

EnumValue <-
  IDENTIFIER ASSIGN NUMBER { $$ = new EnumValueDeclaration(name: $1, value: $3); }
  / IDENTIFIER { $$ = new EnumValueDeclaration(name: $1); }

TypedefSimpleTypeDeclaration <-
  Type IDENTIFIER AttributeSpecifiers? { $$ = new TypedefDeclaration(attributes: $3, name: $2, type: $1); }

VariableDeclaration <-
  ArrayVariableDeclaration
  / TaggedTypeVariableDeclaration
  / PointerVariableDeclaration
  / SimpleVariableDeclaration

ArrayVariableDeclaration <-
  Type IDENTIFIER ArrayDimension AttributeSpecifiers? { $$ = new VariableDeclaration(attributes: $4, name: $2, type: _createArray($1, $3)); }

TaggedTypeVariableDeclaration <-
  (StructDeclaration / EnumDeclaration) IDENTIFIER AttributeSpecifiers? { $$ = new VariableDeclaration(attributes: $3, name: $2, type: $1.type); }

PointerVariableDeclaration <-
  PointerType IDENTIFIER AttributeSpecifiers? { $$ = new VariableDeclaration(attributes: $3, name: $2, type: $1); }

SimpleVariableDeclaration <-
  Type IDENTIFIER AttributeSpecifiers? { $$ = new VariableDeclaration(attributes: $3, name: $2, type: $1); }

### Lexemes (tokens) ###

ASSIGN <-
  '=' SPACING { $$ = $1; }

ASTERISK <-
  '*' SPACING { $$ = $1; }

ATTRIBUTE <-
  '__attribute__' SPACING { $$ = $1; }

CHAR <-
  'char' !IDENT_PART SPACING { $$ = $1; }

CLOSE_BRACE <-
  '}' SPACING { $$ = $1; }

CLOSE_BRACKET <-
  ']' SPACING { $$ = $1; }

CLOSE_PAREN <-
  ')' SPACING { $$ = $1; }

COLON <-
  ':' SPACING { $$ = $1; }

COMMA <-
  ',' SPACING { $$ = $1; }

CONST <-
  'const' SPACING { $$ = true; }

DOUBLE <-
  'double' !IDENT_PART SPACING { $$ = $1; }

ENUM <-
  'enum' !IDENT_PART SPACING { $$ = $1; }

EOF <-
  !.

FLOAT <-
  'float' !IDENT_PART SPACING { $$ = $1; }

IDENT <-
  IDENT_START IDENT_CONT* SPACING { $$ = _flatten([$1, $2]).join(); }

IDENTIFIER <-
  !RESERVED_WORD IDENT_START IDENT_CONT* SPACING { $$ = _flatten([$2, $3]).join(); }

INT <-
  'int' !IDENT_PART SPACING { $$ = $1; }

LEADING_SPACES <-
  SPACING

LONG_TYPE <-
  LONG LONG { $$ = _createInt([$1, $2]); }
  / LONG

NUMBER <-
  OCTAL_NUMBER
  / INTEGER

OPEN_BRACE <-
  '{' SPACING { $$ = $1; }

OPEN_BRACKET <-
  '[' SPACING { $$ = $1; }

OPEN_PAREN <-
  '(' SPACING { $$ = $1; }

POSITIVE_NUMBER <-
  !('-' SPACING) (OCTAL_NUMBER / INTEGER) { $$ = $2; }

SEMICOLON <-
  ';' SPACING { $$ = $1; }

SHORT <-
  'short' !IDENT_PART SPACING { $$ = $1; }

SIGNEDNESS <-
  SIGNED
  / UNSIGNED

STRUCT <-
  'struct' !IDENT_PART SPACING { $$ = $1; }

TYPEDEF <-
  'typedef' SPACING { $$ = $1; }

UNION <-
  'union' !IDENT_PART SPACING { $$ = $1; }

VA_LIST_PARAMETER <-
  ELLIPSIS { $$ = new ParameterDeclaration(type: new VaListTypeSpecification()); }

VOID <-
  'void' !IDENT_PART SPACING { $$ = $1; }

ZERO_NUMBER <-
  ZERO SPACING { $$ = $1; }

### Morphemes ###

COMMENT <-
  '//' (!EOL .)* (EOL / !.)

ELLIPSIS <-
  '...' SPACING { $$ = $1; }

EOL <-
  '\r\n'
  / [\n\r]

IDENT_CONT <-
  IDENT_START
  / [0-9]

IDENT_PART <-
  IDENT_START
  / IDENT_CONT

IDENT_START <-
  [A-Z_a-z]

INTEGER <-
  SIGN? [0-9]+ SPACING { $$ = parseInt($1, $2.join(), 10); }

LONG <-
  'long' !IDENT_PART SPACING { $$ = $1; }

MINUS <-
  '-' SPACING { $$ = $1; }

OCTAL_NUMBER <-
  SIGN? [0] [0-9]+ { $$ = parseInt($1, _flatten([$2, $3]).join(), 8); }

PLUS <-
  '+' SPACING { $$ = $1; }

RESERVED_WORD <-
  ('auto' / 'break' / 'case' / 'char' / 'const' / 'continue' / 'default' / 'do' / 'double' / 'else' / 'enum' / 'extern' / 'float' / 'for' / 'goto' / 'if' / 'inline' / 'int' / 'long' / 'register' / 'restrict' / 'return' / 'short' / 'signed' / 'sizeof' / 'static' / 'struct' / 'switch' / 'typedef' / 'union' / 'unsigned' / 'void' / 'volatile' / 'while' / '_Bool' / '_Complex' / '_Imaginary') !(IDENT_START / IDENT_CONT) { $$ = $1; }

SIGN <-
  PLUS
  / MINUS

SIGNED <-
  'signed' !IDENT_PART SPACING { $$ = $1; }

SPACE <-
  [\t-\n\r ]

SPACING <-
  (SPACE / COMMENT)*

UNSIGNED <-
  'unsigned' !IDENT_PART SPACING { $$ = $1; }

ZERO <-
  [0]+ ![0-9]+ { $$ = 0; }

