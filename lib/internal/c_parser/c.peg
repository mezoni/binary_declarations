%{
import "package:binary_declarations/binary_declarations.dart";

ArrayTypeSpecification _createArray(TypeSpecification type, List dimensions) {  
  return new ArrayTypeSpecification(dimensions: dimensions, type: type);
}

String _createInt(List parts) {
  var list = [];
  for (var part in parts) {
    if (part != null) {
      list.add(part);
    }
  }

  return list.join(" ");
}

List _createParameters(List parameters, ParameterDeclaration vaList) {    
  var list = <ParameterDeclaration>[];
  list.addAll(parameters);
  if (vaList != null) {
    list.add(vaList);  
  }
  
  return list;
}

PointerTypeSpecification _createPointer(TypeSpecification type, List stars) {    
  for (var star in stars) {
    type = new PointerTypeSpecification(type: type);
  }
  
  return type;
}
}%

# Nonterminals

Declarations <-
  SPACING? DeclarationList? EOF { $$ = $2; }

SPACING <-
  (SPACE / COMMENT)*

SPACE <-
  [\t ]
  / EOL

EOL <-
  '\r\n'
  / [\n\r] SPACING { $$ = $1; }

COMMENT <-
  '//' (!EOL .)* EOL?

DeclarationList <-
  Declaration*

Declaration <-
  FunctionDeclartion SEMICOLON+ { $$ = $1; }
  / TypedefDeclaration SEMICOLON+ { $$ = $1; }
  / VariableDeclaration SEMICOLON+ { $$ = $1; }
  / StructDeclaration SEMICOLON+ { $$ = $1; }

FunctionDeclartion <-
  IDENTIFIER OPEN_PAREN FunctionParameters? CLOSE_PAREN { $$ = new FunctionDeclaration(name: $1, parameters: $3); }
  / Type IDENTIFIER OPEN_PAREN FunctionParameters? CLOSE_PAREN { $$ = new FunctionDeclaration(name: $2, parameters: $4, returnType: $1); }

Type <-
  PointerType
  / ArrayType
  / TypeName

PointerType <-
  TypeName ASTERISK+ { $$ = _createPointer($1, $2); }

TypeName <-
  IDENTIFIER { $$ = new TypedefTypeSpecification(name: $1); }  
  / TypeSign? (ID_CHAR / ID_INT) { $$ = new IntegerTypeSpecification(name: _createInt([$1, $2])); }  
  / TypeSign? (ID_SHORT / LongType) ID_INT? { $$ = new IntegerTypeSpecification(name: _createInt([$1, $2, $3])); }  
  / ID_FLOAT { $$ = new FloatTypeSpecification(kind: "float"); }
  / ID_DOUBLE { $$ = new FloatTypeSpecification(kind: "double"); }
  / ID_STRUCT IDENTIFIER { $$ = new StructureTypeSpecification(kind: "struct", tag: $2); }
  / ID_UNION IDENTIFIER { $$ = new StructureTypeSpecification(kind: "union", tag: $2); }
  / ID_VOID { $$ = new VoidTypeSpecification(); }  

LongType <-
  ID_LONG ID_LONG { $$ = _createInt([$1, $2]); }
  / ID_LONG

ReservedWord <-
  ("signed"
  / "unsigned"
  / "char"
  / "int"
  / "short"
  / "long"   
  / "float"
  / "double"
  / "struct"
  / "typedef"
  / "union"
  / "void") !(IDENT_START / IDENT_CONT) { $$ = $1; }

TypeSign <-
  ID_SIGNED
  / ID_UNSIGNED

IDENT_PART <-
  IDENT_START
  / IDENT_CONT

ID_SIGNED <-
  'signed' !IDENT_PART SPACING { $$ = $1; }

ID_UNSIGNED <-
  'unsigned' !IDENT_PART SPACING { $$ = $1; }

ID_CHAR <-
  'char' !IDENT_PART SPACING { $$ = $1; }

ID_INT <-
  'int' !IDENT_PART SPACING { $$ = $1; }

ID_SHORT <-
  'short' !IDENT_PART SPACING { $$ = $1; }

ID_LONG <-
  'long' !IDENT_PART SPACING { $$ = $1; }

ID_FLOAT <-
  'float' !IDENT_PART SPACING { $$ = $1; }

ID_DOUBLE <-
  'double' !IDENT_PART SPACING { $$ = $1; }

ID_STRUCT <-
  'struct' !IDENT_PART SPACING { $$ = $1; }

IDENTIFIER <-
  !ReservedWord IDENT_START IDENT_CONT* SPACING { $$ = _flatten([$2, $3]).join(); }

ID_UNION <-
  'union' !IDENT_PART SPACING { $$ = $1; }

ID_VOID <-
  'void' !IDENT_PART SPACING { $$ = $1; }

ASTERISK <-
  '*' SPACING { $$ = $1; }

ArrayType <-
  TypeName DIMENSIONS { $$ = _createArray($1, $2); }

DIMENSIONS <-
  DIMENSION+

DIMENSION <-
  OPEN_BRACKET INTEGER? CLOSE_BRACKET { $$ = $2; }

OPEN_BRACKET <-
  '[' SPACING { $$ = $1; }

INTEGER <-
  [0-9]+ SPACING { $$ = int.parse($1.join()); }

CLOSE_BRACKET <-
  ']' SPACING { $$ = $1; }

OPEN_PAREN <-
  '(' SPACING { $$ = $1; }

FunctionParameters <-
  FunctionParameterList (COMMA VaListParameter { $$ = $2; })? { $$ = _createParameters($1, $2); }

FunctionParameterList <-
  FunctionParameter (COMMA FunctionParameter)* { $$ = _list($1, $2); }

FunctionParameter <-
  ArrayParameter
  / ConstPointerParameter
  / PointerParameter
  / SimpleParameter

ArrayParameter <-
  Type IDENTIFIER? DIMENSIONS { $$ = new ParameterDeclaration(name: $2, type: _createArray($1, $3)); }

ConstPointerParameter <-
  CONST? PointerType IDENTIFIER? { $$ = new ParameterDeclaration(name: $3, type: $2); }

CONST <-
  'const' SPACING { $$ = $1; }

PointerParameter <-
  PointerType IDENTIFIER? { $$ = new ParameterDeclaration(name: $2, type: $1); }

SimpleParameter <-
  Type IDENTIFIER? { $$ = new ParameterDeclaration(name: $2, type: $1); }

COMMA <-
  ',' SPACING { $$ = $1; }

VaListParameter <-
  ELLIPSIS { $$ = new ParameterDeclaration(type: new VaListTypeSpecification()); }

ELLIPSIS <-
  '...' SPACING { $$ = $1; }

CLOSE_PAREN <-
  ')' SPACING { $$ = $1; }

SEMICOLON <-
  ';' SPACING { $$ = $1; }

TypedefDeclaration <-
  TYPEDEF TypedefTypeDeclaration { $$ = $2; }

TYPEDEF <-
  'typedef' SPACING { $$ = $1; }

TypedefTypeDeclaration <-
  TypedefArrayTypeDeclaration
  / TypedefStructTypeDeclaration
  / TypedefSimpleTypeDeclaration

TypedefArrayTypeDeclaration <-
  Type IDENTIFIER DIMENSIONS { $$ = new TypedefDeclaration(name: $2,type: _createArray($1, $3)); }

TypedefStructTypeDeclaration <-
  StructDeclaration IDENTIFIER { $$ = new TypedefDeclaration(name: $2, type: $1.type); }

StructDeclaration <-
  (ID_STRUCT / ID_UNION) IDENTIFIER? OPEN_BRACE StructMemberList? CLOSE_BRACE { $$ = new StructureDeclaration(kind: $1, members: $4, tag: $2); }

OPEN_BRACE <-
  '{' SPACING { $$ = $1; }

StructMemberList <-
  (StructMember)*

StructMember <-
  VariableDeclaration SEMICOLON { $$ = $1; }

VariableDeclaration <-
  ArrayVariableDeclaration
  / StructVariableDeclaration
  / PointerVariableDeclaration
  / SimpleVariableDeclaration

ArrayVariableDeclaration <-
  Type IDENTIFIER DIMENSIONS { $$ = new VariableDeclaration(name: $2, type: _createArray($1, $3)); }

StructVariableDeclaration <-
  StructDeclaration IDENTIFIER { $$ = new VariableDeclaration(name: $2, type: $1.type); }

PointerVariableDeclaration <-
  PointerType IDENTIFIER { $$ = new VariableDeclaration(name: $2, type: $1); }

SimpleVariableDeclaration <-
  Type IDENTIFIER { $$ = new VariableDeclaration(name: $2, type: $1); }

CLOSE_BRACE <-
  '}' SPACING { $$ = $1; }

TypedefSimpleTypeDeclaration <-
  Type IDENTIFIER { $$ = new TypedefDeclaration(name: $2, type: $1); }

# Lexemes

EOF <-
  !.

IDENT_CONT <-
  IDENT_START
  / [0-9]

IDENT_START <-
  [A-Z_a-z_]

